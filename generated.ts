import {
  createUseReadContract,
  createUseWriteContract,
  createUseSimulateContract,
  createUseWatchContractEvent,
} from 'wagmi/codegen'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AgentInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const agentInfoAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AgentSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const agentSettingsAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AssetManagerSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const assetManagerSettingsAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AvailableAgentInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const availableAgentInfoAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CollateralReservationInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const collateralReservationInfoAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CollateralType
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const collateralTypeAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContractRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contractRegistryAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FtsoV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ftsoV2InterfaceAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldFeedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      {
        name: 'newFeedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
    ],
    name: 'FeedIdChanged',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'calculateFeeById',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'calculateFeeByIds',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedById',
    outputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'int8', type: 'int8' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedByIdInWei',
    outputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFeedIdChanges',
    outputs: [
      {
        name: '_feedIdChanges',
        internalType: 'struct FtsoV2Interface.FeedIdChange[]',
        type: 'tuple[]',
        components: [
          { name: 'oldFeedId', internalType: 'bytes21', type: 'bytes21' },
          { name: 'newFeedId', internalType: 'bytes21', type: 'bytes21' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'getFeedsById',
    outputs: [
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'getFeedsByIdInWei',
    outputs: [
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsoProtocolId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedFeedIds',
    outputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_feedData',
        internalType: 'struct FtsoV2Interface.FeedDataWithProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct FtsoV2Interface.FeedData',
            type: 'tuple',
            components: [
              { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
              { name: 'id', internalType: 'bytes21', type: 'bytes21' },
              { name: 'value', internalType: 'int32', type: 'int32' },
              { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
              { name: 'decimals', internalType: 'int8', type: 'int8' },
            ],
          },
        ],
      },
    ],
    name: 'verifyFeedData',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddressBinder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddressBinderAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'publicKey',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'pAddress',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: false,
      },
      {
        name: 'cAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddressesRegistered',
  },
  {
    type: 'function',
    inputs: [{ name: '_cAddress', internalType: 'address', type: 'address' }],
    name: 'cAddressToPAddress',
    outputs: [{ name: '_pAddress', internalType: 'bytes20', type: 'bytes20' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_pAddress', internalType: 'bytes20', type: 'bytes20' }],
    name: 'pAddressToCAddress',
    outputs: [{ name: '_cAddress', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_publicKey', internalType: 'bytes', type: 'bytes' },
      { name: '_pAddress', internalType: 'bytes20', type: 'bytes20' },
      { name: '_cAddress', internalType: 'address', type: 'address' },
    ],
    name: 'registerAddresses',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_publicKey', internalType: 'bytes', type: 'bytes' }],
    name: 'registerPublicKey',
    outputs: [
      { name: '_pAddress', internalType: 'bytes20', type: 'bytes20' },
      { name: '_cAddress', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddressValidity
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddressValidityAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAddressValidityVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAddressValidityVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IAddressValidity.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IAddressValidity.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IAddressValidity.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'addressStr',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IAddressValidity.ResponseBody',
                type: 'tuple',
                components: [
                  { name: 'isValid', internalType: 'bool', type: 'bool' },
                  {
                    name: 'standardAddress',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'standardAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyAddressValidity',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAgentAlwaysAllowedMinters
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAgentAlwaysAllowedMintersAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_minter', internalType: 'address', type: 'address' },
    ],
    name: 'addAlwaysAllowedMinterForAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'alwaysAllowedMintersForAgent',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_minter', internalType: 'address', type: 'address' },
    ],
    name: 'removeAlwaysAllowedMinterForAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAgentOwnerRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAgentOwnerRegistryAbi = [
  { type: 'error', inputs: [], name: 'AgentNotWhitelisted' },
  { type: 'error', inputs: [], name: 'WorkAddressInUse' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'managementAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'iconUrl',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'termsOfUseUrl',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'AgentDataChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Whitelisted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'WhitelistingRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'managementAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'prevWorkAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'workAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'WorkAddressChanged',
  },
  {
    type: 'function',
    inputs: [
      { name: '_managementAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getAgentDescription',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_managementAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getAgentIconUrl',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_managementAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getAgentName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_managementAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getAgentTermsOfUseUrl',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_workAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getManagementAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_managementAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getWorkAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'isWhitelisted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAgentPing
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAgentPingAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'query',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentPing',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'query',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'response',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'AgentPingResponse',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_query', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'agentPing',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_query', internalType: 'uint256', type: 'uint256' },
      { name: '_response', internalType: 'string', type: 'string' },
    ],
    name: 'agentPingResponse',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAssetManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAssetManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'feeBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mintingVaultCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mintingPoolCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'freeCollateralLots',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentAvailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgentCollateralTypeChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destroyAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentDestroyAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AgentDestroyed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'query',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentPing',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'query',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'response',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'AgentPingResponse',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'validAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentSettingChangeAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentSettingChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'creationData',
        internalType: 'struct IAssetManagerEvents.AgentVaultCreationData',
        type: 'tuple',
        components: [
          { name: 'collateralPool', internalType: 'address', type: 'address' },
          {
            name: 'collateralPoolToken',
            internalType: 'address',
            type: 'address',
          },
          { name: 'underlyingAddress', internalType: 'string', type: 'string' },
          {
            name: 'vaultCollateralToken',
            internalType: 'address',
            type: 'address',
          },
          { name: 'poolWNatToken', internalType: 'address', type: 'address' },
          { name: 'feeBIPS', internalType: 'uint256', type: 'uint256' },
          {
            name: 'poolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingVaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingPoolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'buyFAssetByAgentFactorBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolExitCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'redemptionPoolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'AgentVaultCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'exitAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AvailableAgentExitAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AvailableAgentExited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'collateralToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'minCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'safetyMinCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralRatiosChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'reservedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralReservationDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'firstUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executorFeeNatWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralReserved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'directPricePair',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'assetFtsoSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'tokenFtsoSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'minCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'safetyMinCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralTypeAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'collateralToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralTypeDeprecated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ContractChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CoreVaultRedemptionRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'underlyingBlockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'underlyingBlockTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CurrentUnderlyingBlockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'transactionHash2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'DuplicatePaymentConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'dustUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DustChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'EmergencyPauseCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'EmergencyPauseTransfersCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pausedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EmergencyPauseTransfersTriggered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pausedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EmergencyPauseTriggered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FullLiquidationStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'IllegalPaymentConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'LiquidationEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidPoolCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidationPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidationStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'mintedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'agentFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintingExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'reservedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintingPaymentDefault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'withdrawalAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolTokenRedemptionAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedeemedInCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'redeemedVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'redeemedPoolCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionDefault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'RedemptionPaymentBlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'failureReason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'RedemptionPaymentFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'RedemptionPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionPoolFeeMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'remainingLots',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRequestIncomplete',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'firstUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executorFeeNatWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ticketValueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionTicketCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RedemptionTicketDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ticketValueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionTicketUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ReturnFromCoreVaultCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'receivedUnderlyingUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'remintedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReturnFromCoreVaultConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReturnFromCoreVaultRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SelfClose',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'mintFromFreeUnderlying',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'mintedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'depositedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SelfMint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'SettingArrayChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SettingChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'remintedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultDefaulted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultSuccessful',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'underlyingBalanceUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'requiredBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceTooLow',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'depositedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceToppedUp',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UnderlyingWithdrawalAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UnderlyingWithdrawalCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'spentUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UnderlyingWithdrawalConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'withdrawalAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VaultCollateralWithdrawalAnnounced',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_minter', internalType: 'address', type: 'address' },
    ],
    name: 'addAlwaysAllowedMinterForAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_query', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'agentPing',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_query', internalType: 'uint256', type: 'uint256' },
      { name: '_response', internalType: 'string', type: 'string' },
    ],
    name: 'agentPingResponse',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      {
        name: '_firstRedemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'agentRedemptionQueue',
    outputs: [
      {
        name: '_queue',
        internalType: 'struct RedemptionTicketInfo.Data[]',
        type: 'tuple[]',
        components: [
          {
            name: 'redemptionTicketId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'agentVault', internalType: 'address', type: 'address' },
          { name: 'ticketValueUBA', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '_nextRedemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'alwaysAllowedMintersForAgent',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_valueNATWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'announceAgentPoolTokenRedemption',
    outputs: [
      {
        name: '_redemptionAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'announceAgentSettingUpdate',
    outputs: [
      { name: '_updateAllowedAt', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'announceDestroyAgent',
    outputs: [
      { name: '_destroyAllowedAt', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'announceExitAvailableAgentList',
    outputs: [
      { name: '_exitAllowedAt', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'announceUnderlyingWithdrawal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_valueNATWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'announceVaultCollateralWithdrawal',
    outputs: [
      {
        name: '_withdrawalAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'assetManagerController',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'assetMintingDecimals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'assetMintingGranularityUBA',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'cancelReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'cancelUnderlyingWithdrawal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_lots', internalType: 'uint256', type: 'uint256' }],
    name: 'collateralReservationFee',
    outputs: [
      {
        name: '_reservationFeeNATWei',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'collateralReservationInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralReservationInfo.Data',
        type: 'tuple',
        components: [
          {
            name: 'collateralReservationId',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: 'agentVault', internalType: 'address', type: 'address' },
          { name: 'minter', internalType: 'address', type: 'address' },
          { name: 'paymentAddress', internalType: 'string', type: 'string' },
          {
            name: 'paymentReference',
            internalType: 'bytes32',
            type: 'bytes32',
          },
          { name: 'valueUBA', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingFeeUBA', internalType: 'uint128', type: 'uint128' },
          {
            name: 'reservationFeeNatWei',
            internalType: 'uint128',
            type: 'uint128',
          },
          { name: 'poolFeeShareBIPS', internalType: 'uint16', type: 'uint16' },
          {
            name: 'firstUnderlyingBlock',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'lastUnderlyingBlock',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'lastUnderlyingTimestamp',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: 'executor', internalType: 'address', type: 'address' },
          {
            name: 'executorFeeNatWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'status',
            internalType: 'enum CollateralReservationInfo.Status',
            type: 'uint8',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_redemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'confirmRedemptionPayment',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'confirmReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'confirmTopupPayment',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'confirmUnderlyingWithdrawal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'controllerAttached',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'convertDustToTicket',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'coreVaultAvailableAmount',
    outputs: [
      {
        name: '_immediatelyAvailableUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_totalAvailableUBA', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_addressProof',
        internalType: 'struct IAddressValidity.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IAddressValidity.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IAddressValidity.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'addressStr',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IAddressValidity.ResponseBody',
                type: 'tuple',
                components: [
                  { name: 'isValid', internalType: 'bool', type: 'bool' },
                  {
                    name: 'standardAddress',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'standardAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_settings',
        internalType: 'struct AgentSettings.Data',
        type: 'tuple',
        components: [
          {
            name: 'vaultCollateralToken',
            internalType: 'contract IERC20',
            type: 'address',
          },
          { name: 'poolTokenSuffix', internalType: 'string', type: 'string' },
          { name: 'feeBIPS', internalType: 'uint256', type: 'uint256' },
          {
            name: 'poolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingVaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingPoolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'buyFAssetByAgentFactorBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolExitCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'redemptionPoolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'createAgentVault',
    outputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'currentUnderlyingBlock',
    outputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_blockTimestamp', internalType: 'uint256', type: 'uint256' },
      { name: '_lastUpdateTs', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
    ],
    name: 'destroyAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment1',
        internalType: 'struct IBalanceDecreasingTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_payment2',
        internalType: 'struct IBalanceDecreasingTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'doublePaymentChallenge',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'emergencyPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'emergencyPausedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'endLiquidation',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'executeAgentSettingUpdate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'executeMinting',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'exitAvailableAgentList',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'fAsset',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_functionSelector', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'facetAddress',
    outputs: [
      { name: 'facetAddress_', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'facetAddresses',
    outputs: [
      { name: 'facetAddresses_', internalType: 'address[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_facet', internalType: 'address', type: 'address' }],
    name: 'facetFunctionSelectors',
    outputs: [
      {
        name: 'facetFunctionSelectors_',
        internalType: 'bytes4[]',
        type: 'bytes4[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'facets',
    outputs: [
      {
        name: 'facets_',
        internalType: 'struct IDiamondLoupe.Facet[]',
        type: 'tuple[]',
        components: [
          { name: 'facetAddress', internalType: 'address', type: 'address' },
          {
            name: 'functionSelectors',
            internalType: 'bytes4[]',
            type: 'bytes4[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IConfirmedBlockHeightExists.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IConfirmedBlockHeightExists.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IConfirmedBlockHeightExists.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'queryWindow',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IConfirmedBlockHeightExists.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'numberOfConfirmations',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_redemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'finishRedemptionWithoutPayment',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payments',
        internalType: 'struct IBalanceDecreasingTransaction.Proof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'freeBalanceNegativeChallenge',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentFullPoolCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentFullVaultCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct AgentInfo.Info',
        type: 'tuple',
        components: [
          {
            name: 'status',
            internalType: 'enum AgentInfo.Status',
            type: 'uint8',
          },
          {
            name: 'ownerManagementAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'ownerWorkAddress',
            internalType: 'address',
            type: 'address',
          },
          { name: 'collateralPool', internalType: 'address', type: 'address' },
          {
            name: 'collateralPoolToken',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'underlyingAddressString',
            internalType: 'string',
            type: 'string',
          },
          { name: 'publiclyAvailable', internalType: 'bool', type: 'bool' },
          { name: 'feeBIPS', internalType: 'uint256', type: 'uint256' },
          {
            name: 'poolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'vaultCollateralToken',
            internalType: 'contract IERC20',
            type: 'address',
          },
          {
            name: 'mintingVaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingPoolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freeCollateralLots',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'totalVaultCollateralWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freeVaultCollateralWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'vaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolWNatToken',
            internalType: 'contract IERC20',
            type: 'address',
          },
          {
            name: 'totalPoolCollateralNATWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freePoolCollateralNATWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'totalAgentPoolTokensWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'announcedVaultCollateralWithdrawalWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'announcedPoolTokensWithdrawalWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freeAgentPoolTokensWei',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'mintedUBA', internalType: 'uint256', type: 'uint256' },
          { name: 'reservedUBA', internalType: 'uint256', type: 'uint256' },
          { name: 'redeemingUBA', internalType: 'uint256', type: 'uint256' },
          {
            name: 'poolRedeemingUBA',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'dustUBA', internalType: 'uint256', type: 'uint256' },
          {
            name: 'liquidationStartTimestamp',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'maxLiquidationAmountUBA',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationPaymentFactorVaultBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'liquidationPaymentFactorPoolBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'underlyingBalanceUBA',
            internalType: 'int256',
            type: 'int256',
          },
          {
            name: 'requiredUnderlyingBalanceUBA',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freeUnderlyingBalanceUBA',
            internalType: 'int256',
            type: 'int256',
          },
          {
            name: 'announcedUnderlyingWithdrawalId',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'buyFAssetByAgentFactorBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolExitCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'redemptionPoolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentLiquidationFactorsAndMaxAmount',
    outputs: [
      {
        name: 'liquidationPaymentFactorVaultBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'liquidationPaymentFactorPoolBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'maxLiquidationAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentMinPoolCollateralRatioBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentMinVaultCollateralRatioBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'getAgentSetting',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentVaultCollateralToken',
    outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getAgentVaultOwner',
    outputs: [
      {
        name: '_ownerManagementAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_start', internalType: 'uint256', type: 'uint256' },
      { name: '_end', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAllAgents',
    outputs: [
      { name: '_agents', internalType: 'address[]', type: 'address[]' },
      { name: '_totalLength', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_start', internalType: 'uint256', type: 'uint256' },
      { name: '_end', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAvailableAgentsDetailedList',
    outputs: [
      {
        name: '_agents',
        internalType: 'struct AvailableAgentInfo.Data[]',
        type: 'tuple[]',
        components: [
          { name: 'agentVault', internalType: 'address', type: 'address' },
          {
            name: 'ownerManagementAddress',
            internalType: 'address',
            type: 'address',
          },
          { name: 'feeBIPS', internalType: 'uint256', type: 'uint256' },
          {
            name: 'mintingVaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingPoolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'freeCollateralLots',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'status',
            internalType: 'enum AgentInfo.Status',
            type: 'uint8',
          },
        ],
      },
      { name: '_totalLength', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_start', internalType: 'uint256', type: 'uint256' },
      { name: '_end', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getAvailableAgentsList',
    outputs: [
      { name: '_agents', internalType: 'address[]', type: 'address[]' },
      { name: '_totalLength', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'getCollateralPool',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_collateralClass',
        internalType: 'enum CollateralType.Class',
        type: 'uint8',
      },
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getCollateralType',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralType.Data',
        type: 'tuple',
        components: [
          {
            name: 'collateralClass',
            internalType: 'enum CollateralType.Class',
            type: 'uint8',
          },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'validUntil', internalType: 'uint256', type: 'uint256' },
          { name: 'directPricePair', internalType: 'bool', type: 'bool' },
          { name: 'assetFtsoSymbol', internalType: 'string', type: 'string' },
          { name: 'tokenFtsoSymbol', internalType: 'string', type: 'string' },
          {
            name: 'minCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'safetyMinCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCollateralTypes',
    outputs: [
      {
        name: '',
        internalType: 'struct CollateralType.Data[]',
        type: 'tuple[]',
        components: [
          {
            name: 'collateralClass',
            internalType: 'enum CollateralType.Class',
            type: 'uint8',
          },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'validUntil', internalType: 'uint256', type: 'uint256' },
          { name: 'directPricePair', internalType: 'bool', type: 'bool' },
          { name: 'assetFtsoSymbol', internalType: 'string', type: 'string' },
          { name: 'tokenFtsoSymbol', internalType: 'string', type: 'string' },
          {
            name: 'minCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'safetyMinCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultMinimumAmountLeftBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultMinimumRedeemLots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultNativeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultRedemptionFeeBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultTransferTimeExtensionSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSettings',
    outputs: [
      {
        name: '',
        internalType: 'struct AssetManagerSettings.Data',
        type: 'tuple',
        components: [
          {
            name: 'assetManagerController',
            internalType: 'address',
            type: 'address',
          },
          { name: 'fAsset', internalType: 'address', type: 'address' },
          {
            name: 'agentVaultFactory',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'collateralPoolFactory',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'collateralPoolTokenFactory',
            internalType: 'address',
            type: 'address',
          },
          { name: 'poolTokenSuffix', internalType: 'string', type: 'string' },
          { name: '__whitelist', internalType: 'address', type: 'address' },
          {
            name: 'agentOwnerRegistry',
            internalType: 'address',
            type: 'address',
          },
          { name: 'fdcVerification', internalType: 'address', type: 'address' },
          {
            name: 'burnAddress',
            internalType: 'address payable',
            type: 'address',
          },
          { name: 'priceReader', internalType: 'address', type: 'address' },
          { name: 'assetDecimals', internalType: 'uint8', type: 'uint8' },
          {
            name: 'assetMintingDecimals',
            internalType: 'uint8',
            type: 'uint8',
          },
          { name: 'chainId', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'averageBlockTimeMS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: 'mintingPoolHoldingsRequiredBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: 'collateralReservationFeeBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          { name: 'assetUnitUBA', internalType: 'uint64', type: 'uint64' },
          {
            name: 'assetMintingGranularityUBA',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: 'lotSizeAMG', internalType: 'uint64', type: 'uint64' },
          {
            name: '__minUnderlyingBackingBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: '__requireEOAAddressProof',
            internalType: 'bool',
            type: 'bool',
          },
          { name: 'mintingCapAMG', internalType: 'uint64', type: 'uint64' },
          {
            name: 'underlyingBlocksForPayment',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'underlyingSecondsForPayment',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: 'redemptionFeeBIPS', internalType: 'uint16', type: 'uint16' },
          {
            name: 'redemptionDefaultFactorVaultCollateralBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: '__redemptionDefaultFactorPoolBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: 'confirmationByOthersAfterSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'confirmationByOthersRewardUSD5',
            internalType: 'uint128',
            type: 'uint128',
          },
          {
            name: 'maxRedeemedTickets',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'paymentChallengeRewardBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'paymentChallengeRewardUSD5',
            internalType: 'uint128',
            type: 'uint128',
          },
          {
            name: 'withdrawalWaitMinSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'maxTrustedPriceAgeSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: '__ccbTimeSeconds', internalType: 'uint64', type: 'uint64' },
          {
            name: 'attestationWindowSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'minUpdateRepeatTimeSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__buybackCollateralFactorBIPS',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__announcedUnderlyingConfirmationMinSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'tokenInvalidationTimeMinSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'vaultCollateralBuyForFlareFactorBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: 'agentExitAvailableTimelockSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'agentFeeChangeTimelockSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'agentMintingCRChangeTimelockSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'poolExitCRChangeTimelockSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'agentTimelockedOperationWindowSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'collateralPoolTokenTimelockSeconds',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: 'liquidationStepSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'liquidationCollateralFactorBIPS',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'liquidationFactorVaultCollateralBIPS',
            internalType: 'uint256[]',
            type: 'uint256[]',
          },
          {
            name: 'diamondCutMinTimelockSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'maxEmergencyPauseDurationSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'emergencyPauseDurationResetAfterSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__cancelCollateralReservationAfterSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__rejectOrCancelCollateralReservationReturnFactorBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: '__rejectRedemptionRequestWindowSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__takeOverRedemptionRequestWindowSeconds',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: '__rejectedRedemptionDefaultFactorVaultCollateralBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
          {
            name: '__rejectedRedemptionDefaultFactorPoolBIPS',
            internalType: 'uint32',
            type: 'uint32',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IBalanceDecreasingTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'illegalPaymentChallenge',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_suffix', internalType: 'string', type: 'string' }],
    name: 'isPoolTokenSuffixReserved',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_amountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'liquidate',
    outputs: [
      {
        name: '_liquidatedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_amountPaidVault', internalType: 'uint256', type: 'uint256' },
      { name: '_amountPaidPool', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'lotSize',
    outputs: [
      { name: '_lotSizeUBA', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'makeAgentAvailable',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'maximumTransferToCoreVault',
    outputs: [
      { name: '_maximumTransferUBA', internalType: 'uint256', type: 'uint256' },
      {
        name: '_minimumLeftAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_lots', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'mintFromFreeUnderlying',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'mintingPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IReferencedPaymentNonexistence.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IReferencedPaymentNonexistence.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'destinationAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'amount', internalType: 'uint256', type: 'uint256' },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'checkSourceAddresses',
                    internalType: 'bool',
                    type: 'bool',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'mintingPaymentDefault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'priceReader',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
      {
        name: '_redeemerUnderlyingAddressString',
        internalType: 'string',
        type: 'string',
      },
      { name: '_executor', internalType: 'address payable', type: 'address' },
    ],
    name: 'redeem',
    outputs: [
      { name: '_redeemedAmountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
      {
        name: '_redeemerUnderlyingAddress',
        internalType: 'string',
        type: 'string',
      },
    ],
    name: 'redeemFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IReferencedPaymentNonexistence.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IReferencedPaymentNonexistence.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'destinationAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'amount', internalType: 'uint256', type: 'uint256' },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'checkSourceAddresses',
                    internalType: 'bool',
                    type: 'bool',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_redemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'redemptionPaymentDefault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'redemptionPaymentExtensionSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_firstRedemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_pageSize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'redemptionQueue',
    outputs: [
      {
        name: '_queue',
        internalType: 'struct RedemptionTicketInfo.Data[]',
        type: 'tuple[]',
        components: [
          {
            name: 'redemptionTicketId',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'agentVault', internalType: 'address', type: 'address' },
          { name: 'ticketValueUBA', internalType: 'uint256', type: 'uint256' },
        ],
      },
      {
        name: '_nextRedemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_redemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'redemptionRequestInfo',
    outputs: [
      {
        name: '',
        internalType: 'struct RedemptionRequestInfo.Data',
        type: 'tuple',
        components: [
          {
            name: 'redemptionRequestId',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'status',
            internalType: 'enum RedemptionRequestInfo.Status',
            type: 'uint8',
          },
          { name: 'agentVault', internalType: 'address', type: 'address' },
          { name: 'redeemer', internalType: 'address', type: 'address' },
          { name: 'paymentAddress', internalType: 'string', type: 'string' },
          {
            name: 'paymentReference',
            internalType: 'bytes32',
            type: 'bytes32',
          },
          { name: 'valueUBA', internalType: 'uint128', type: 'uint128' },
          { name: 'feeUBA', internalType: 'uint128', type: 'uint128' },
          { name: 'poolFeeShareBIPS', internalType: 'uint16', type: 'uint16' },
          {
            name: 'firstUnderlyingBlock',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'lastUnderlyingBlock',
            internalType: 'uint64',
            type: 'uint64',
          },
          {
            name: 'lastUnderlyingTimestamp',
            internalType: 'uint64',
            type: 'uint64',
          },
          { name: 'timestamp', internalType: 'uint64', type: 'uint64' },
          { name: 'poolSelfClose', internalType: 'bool', type: 'bool' },
          { name: 'transferToCoreVault', internalType: 'bool', type: 'bool' },
          { name: 'executor', internalType: 'address', type: 'address' },
          {
            name: 'executorFeeNatWei',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IAddressValidity.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IAddressValidity.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IAddressValidity.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'addressStr',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IAddressValidity.ResponseBody',
                type: 'tuple',
                components: [
                  { name: 'isValid', internalType: 'bool', type: 'bool' },
                  {
                    name: 'standardAddress',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'standardAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_redemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'rejectInvalidRedemption',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_minter', internalType: 'address', type: 'address' },
    ],
    name: 'removeAlwaysAllowedMinterForAgent',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
      { name: '_maxMintingFeeBIPS', internalType: 'uint256', type: 'uint256' },
      { name: '_executor', internalType: 'address payable', type: 'address' },
    ],
    name: 'reserveCollateral',
    outputs: [
      {
        name: '_collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_amountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfClose',
    outputs: [
      { name: '_closedAmountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'selfMint',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_coreVaultManager', internalType: 'address', type: 'address' },
    ],
    name: 'setCoreVaultManager',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_minimumAmountLeftBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setCoreVaultMinimumAmountLeftBIPS',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_minimumRedeemLots', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCoreVaultMinimumRedeemLots',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_nativeAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setCoreVaultNativeAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_redemptionFeeBIPS', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCoreVaultRedemptionFeeBIPS',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_transferTimeExtensionSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setCoreVaultTransferTimeExtensionSeconds',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_value', internalType: 'uint256', type: 'uint256' }],
    name: 'setRedemptionPaymentExtensionSeconds',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'startLiquidation',
    outputs: [
      { name: '_liquidationStartTs', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'switchVaultCollateral',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_amountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferToCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'transfersEmergencyPaused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'transfersEmergencyPausedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IConfirmedBlockHeightExists.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IConfirmedBlockHeightExists.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IConfirmedBlockHeightExists.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'queryWindow',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IConfirmedBlockHeightExists.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'numberOfConfirmations',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
      {
        name: '_collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'unstickMinting',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IConfirmedBlockHeightExists.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IConfirmedBlockHeightExists.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IConfirmedBlockHeightExists.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'queryWindow',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IConfirmedBlockHeightExists.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'numberOfConfirmations',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'updateCurrentBlock',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'upgradeAgentVaultAndPool',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'upgradeWNatContract',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAssetManagerController
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAssetManagerControllerAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_assetManager', internalType: 'address', type: 'address' },
    ],
    name: 'assetManagerExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getAssetManagers',
    outputs: [
      { name: '', internalType: 'contract IAssetManager[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAssetManagerEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAssetManagerEventsAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'feeBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mintingVaultCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mintingPoolCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'freeCollateralLots',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentAvailable',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AgentCollateralTypeChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'destroyAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentDestroyAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AgentDestroyed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'validAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentSettingChangeAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AgentSettingChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'creationData',
        internalType: 'struct IAssetManagerEvents.AgentVaultCreationData',
        type: 'tuple',
        components: [
          { name: 'collateralPool', internalType: 'address', type: 'address' },
          {
            name: 'collateralPoolToken',
            internalType: 'address',
            type: 'address',
          },
          { name: 'underlyingAddress', internalType: 'string', type: 'string' },
          {
            name: 'vaultCollateralToken',
            internalType: 'address',
            type: 'address',
          },
          { name: 'poolWNatToken', internalType: 'address', type: 'address' },
          { name: 'feeBIPS', internalType: 'uint256', type: 'uint256' },
          {
            name: 'poolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingVaultCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintingPoolCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'buyFAssetByAgentFactorBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'poolExitCollateralRatioBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'redemptionPoolFeeShareBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
    ],
    name: 'AgentVaultCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'exitAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AvailableAgentExitAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'AvailableAgentExited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'collateralToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'minCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'safetyMinCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralRatiosChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'reservedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralReservationDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'firstUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executorFeeNatWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralReserved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'directPricePair',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'assetFtsoSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'tokenFtsoSymbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'minCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'safetyMinCollateralRatioBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralTypeAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'collateralClass',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'collateralToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CollateralTypeDeprecated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ContractChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'underlyingBlockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'underlyingBlockTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'updatedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CurrentUnderlyingBlockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'transactionHash2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'DuplicatePaymentConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'dustUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DustChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'EmergencyPauseCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'EmergencyPauseTransfersCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pausedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EmergencyPauseTransfersTriggered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'pausedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EmergencyPauseTriggered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FullLiquidationStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'IllegalPaymentConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'LiquidationEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidPoolCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidationPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LiquidationStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'mintedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'agentFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintingExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateralReservationId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'reservedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MintingPaymentDefault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'withdrawalAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PoolTokenRedemptionAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paidVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedeemedInCollateral',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'redeemedVaultCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'redeemedPoolCollateralWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionDefault',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'RedemptionPaymentBlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'failureReason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'RedemptionPaymentFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'spentUnderlyingUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'RedemptionPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionPoolFeeMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'redemptionAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRejected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'remainingLots',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRequestIncomplete',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'firstUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lastUnderlyingTimestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executorFeeNatWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ticketValueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionTicketCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RedemptionTicketDeleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'redemptionTicketId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ticketValueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RedemptionTicketUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SelfClose',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'mintFromFreeUnderlying',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'mintedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'depositedAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'poolFeeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SelfMint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'SettingArrayChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SettingChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'underlyingBalanceUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'requiredBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceTooLow',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'depositedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnderlyingBalanceToppedUp',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UnderlyingWithdrawalAnnounced',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'UnderlyingWithdrawalCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'announcementId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'spentUBA',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'transactionHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'UnderlyingWithdrawalConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'withdrawalAllowedAt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VaultCollateralWithdrawalAnnounced',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBalanceDecreasingTransaction
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBalanceDecreasingTransactionAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBalanceDecreasingTransactionVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBalanceDecreasingTransactionVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IBalanceDecreasingTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyBalanceDecreasingTransaction',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICChainStake
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const icChainStakeAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerCacheCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerChanged',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'stakesOf',
    outputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakesOfAt',
    outputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICChainVotePower
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const icChainVotePowerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerCacheCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerChanged',
  },
  {
    type: 'function',
    inputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'stakesOf',
    outputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakesOfAt',
    outputs: [
      { name: '_accounts', internalType: 'address[]', type: 'address[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IClaimSetupManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iClaimSetupManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'recipients',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'AllowedClaimRecipientsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validFromRewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorFeeValueChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executors',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegationAccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
        indexed: false,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'DelegationAccountUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ExecutorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validFromRewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutorUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'registerExecutorFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RegisterExecutorFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'excessAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetExecutorsExcessAmountRefunded',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'accountToDelegationAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'allowedClaimRecipients',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegatees', internalType: 'address[]', type: 'address[]' },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'claimExecutors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_bips', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'delegateGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'disableDelegationAccount',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'enableDelegationAccount',
    outputs: [
      {
        name: '',
        internalType: 'contract IDelegationAccount',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getDelegationAccountData',
    outputs: [
      {
        name: '_delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
      },
      { name: '_enabled', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorCurrentFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executor', internalType: 'address', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getExecutorFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorInfo',
    outputs: [
      { name: '_registered', internalType: 'bool', type: 'bool' },
      { name: '_currentFeeValue', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorScheduledFeeValueChanges',
    outputs: [
      { name: '_feeValue', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_validFromEpoch', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_fixed', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_start', internalType: 'uint256', type: 'uint256' },
      { name: '_end', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredExecutors',
    outputs: [
      {
        name: '_registeredExecutors',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_totalLength', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_executor', internalType: 'address', type: 'address' },
    ],
    name: 'isClaimExecutor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feeValue', internalType: 'uint256', type: 'uint256' }],
    name: 'registerExecutor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeDelegationAt',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setAllowedClaimRecipients',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
      { name: '_enableDelegationAccount', internalType: 'bool', type: 'bool' },
    ],
    name: 'setAutoClaiming',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalToken',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'unregisterExecutor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_feeValue', internalType: 'uint256', type: 'uint256' }],
    name: 'updateExecutorFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IConfirmedBlockHeightExists
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iConfirmedBlockHeightExistsAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IConfirmedBlockHeightExistsVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iConfirmedBlockHeightExistsVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IConfirmedBlockHeightExists.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IConfirmedBlockHeightExists.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IConfirmedBlockHeightExists.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'queryWindow',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IConfirmedBlockHeightExists.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'numberOfConfirmations',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyConfirmedBlockHeightExists',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICoreVaultClient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCoreVaultClientAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'redeemer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymentAddress',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'CoreVaultRedemptionRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ReturnFromCoreVaultCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'receivedUnderlyingUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'remintedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReturnFromCoreVaultConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'requestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'paymentReference',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ReturnFromCoreVaultRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'remintedUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultDefaulted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'agentVault',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'transferRedemptionRequestId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'valueUBA',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransferToCoreVaultSuccessful',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'cancelReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_payment',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
      { name: '_agentVault', internalType: 'address', type: 'address' },
    ],
    name: 'confirmReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'coreVaultAvailableAmount',
    outputs: [
      {
        name: '_immediatelyAvailableUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_totalAvailableUBA', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_agentVault', internalType: 'address', type: 'address' }],
    name: 'maximumTransferToCoreVault',
    outputs: [
      { name: '_maximumTransferUBA', internalType: 'uint256', type: 'uint256' },
      {
        name: '_minimumLeftAmountUBA',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
      {
        name: '_redeemerUnderlyingAddress',
        internalType: 'string',
        type: 'string',
      },
    ],
    name: 'redeemFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_lots', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestReturnFromCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_agentVault', internalType: 'address', type: 'address' },
      { name: '_amountUBA', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferToCoreVault',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ICoreVaultClientSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iCoreVaultClientSettingsAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultMinimumAmountLeftBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultMinimumRedeemLots',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultNativeAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultRedemptionFeeBIPS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCoreVaultTransferTimeExtensionSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_coreVaultManager', internalType: 'address', type: 'address' },
    ],
    name: 'setCoreVaultManager',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_minimumAmountLeftBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setCoreVaultMinimumAmountLeftBIPS',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_minimumRedeemLots', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCoreVaultMinimumRedeemLots',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_nativeAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setCoreVaultNativeAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_redemptionFeeBIPS', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCoreVaultRedemptionFeeBIPS',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_transferTimeExtensionSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setCoreVaultTransferTimeExtensionSeconds',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDelegationAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDelegationAccountAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'bips',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateFtso',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'DelegateGovernance',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutorFeePaid',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalTokenTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'manager',
        internalType: 'contract IClaimSetupManager',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Initialize',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RevokeFtso',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'UndelegateAllFtso' },
  { type: 'event', anonymous: false, inputs: [], name: 'UndelegateGovernance' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'WithdrawToOwner',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDiamondLoupe
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDiamondLoupeAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_functionSelector', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'facetAddress',
    outputs: [
      { name: 'facetAddress_', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'facetAddresses',
    outputs: [
      { name: 'facetAddresses_', internalType: 'address[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_facet', internalType: 'address', type: 'address' }],
    name: 'facetFunctionSelectors',
    outputs: [
      {
        name: 'facetFunctionSelectors_',
        internalType: 'bytes4[]',
        type: 'bytes4[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'facets',
    outputs: [
      {
        name: 'facets_',
        internalType: 'struct IDiamondLoupe.Facet[]',
        type: 'tuple[]',
        components: [
          { name: 'facetAddress', internalType: 'address', type: 'address' },
          {
            name: 'functionSelectors',
            internalType: 'bytes4[]',
            type: 'bytes4[]',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDistributionToDelegators
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iDistributionToDelegatorsAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'whoClaimed',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sentTo',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccountClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'theAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'confirmed', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'AccountOptOut',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'entitlementStartTs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'EntitlementStart',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'useGoodRandom',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'maxWaitForGoodRandomSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UseGoodRandomSet',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwners', internalType: 'address[]', type: 'address[]' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'autoClaim',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'claim',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_month', internalType: 'uint256', type: 'uint256' }],
    name: 'getClaimableAmount',
    outputs: [{ name: '_amountWei', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getClaimableAmountOf',
    outputs: [{ name: '_amountWei', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getClaimableMonths',
    outputs: [
      { name: '_startMonth', internalType: 'uint256', type: 'uint256' },
      { name: '_endMonth', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentMonth',
    outputs: [
      { name: '_currentMonth', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getMonthToExpireNext',
    outputs: [
      { name: '_monthToExpireNext', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nextClaimableMonth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'optOutOfAirdrop',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEVMTransaction
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ievmTransactionAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEVMTransactionVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ievmTransactionVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IEVMTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IEVMTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IEVMTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'requiredConfirmations',
                    internalType: 'uint16',
                    type: 'uint16',
                  },
                  { name: 'provideInput', internalType: 'bool', type: 'bool' },
                  { name: 'listEvents', internalType: 'bool', type: 'bool' },
                  {
                    name: 'logIndices',
                    internalType: 'uint32[]',
                    type: 'uint32[]',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IEVMTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  { name: 'timestamp', internalType: 'uint64', type: 'uint64' },
                  {
                    name: 'sourceAddress',
                    internalType: 'address',
                    type: 'address',
                  },
                  { name: 'isDeployment', internalType: 'bool', type: 'bool' },
                  {
                    name: 'receivingAddress',
                    internalType: 'address',
                    type: 'address',
                  },
                  { name: 'value', internalType: 'uint256', type: 'uint256' },
                  { name: 'input', internalType: 'bytes', type: 'bytes' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'events',
                    internalType: 'struct IEVMTransaction.Event[]',
                    type: 'tuple[]',
                    components: [
                      {
                        name: 'logIndex',
                        internalType: 'uint32',
                        type: 'uint32',
                      },
                      {
                        name: 'emitterAddress',
                        internalType: 'address',
                        type: 'address',
                      },
                      {
                        name: 'topics',
                        internalType: 'bytes32[]',
                        type: 'bytes32[]',
                      },
                      { name: 'data', internalType: 'bytes', type: 'bytes' },
                      { name: 'removed', internalType: 'bool', type: 'bool' },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyEVMTransaction',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEntityManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iEntityManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxNodeIdsPerEntity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxNodeIdsPerEntitySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
    ],
    name: 'NodeIdRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
    ],
    name: 'NodeIdUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'part1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'part2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PublicKeyRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'part1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'part2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PublicKeyUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SigningPolicyAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SigningPolicyAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitSignaturesAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitSignaturesAddressRegistrationConfirmed',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmDelegationAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSigningPolicyAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSubmitAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSubmitSignaturesAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getDelegationAddressOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegationAddressOfAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getNodeIdsOf',
    outputs: [{ name: '', internalType: 'bytes20[]', type: 'bytes20[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getNodeIdsOfAt',
    outputs: [{ name: '', internalType: 'bytes20[]', type: 'bytes20[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getPublicKeyOf',
    outputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPublicKeyOfAt',
    outputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getVoterAddresses',
    outputs: [
      {
        name: '_addresses',
        internalType: 'struct IEntityManager.VoterAddresses',
        type: 'tuple',
        components: [
          { name: 'submitAddress', internalType: 'address', type: 'address' },
          {
            name: 'submitSignaturesAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'signingPolicyAddress',
            internalType: 'address',
            type: 'address',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterAddressesAt',
    outputs: [
      {
        name: '_addresses',
        internalType: 'struct IEntityManager.VoterAddresses',
        type: 'tuple',
        components: [
          { name: 'submitAddress', internalType: 'address', type: 'address' },
          {
            name: 'submitSignaturesAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'signingPolicyAddress',
            internalType: 'address',
            type: 'address',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegationAddress', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForDelegationAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForNodeId',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_part1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_part2', internalType: 'bytes32', type: 'bytes32' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForPublicKey',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSigningPolicyAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_submitAddress', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSubmitAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSubmitSignaturesAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegationAddress', internalType: 'address', type: 'address' },
    ],
    name: 'proposeDelegationAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'proposeSigningPolicyAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_submitAddress', internalType: 'address', type: 'address' },
    ],
    name: 'proposeSubmitAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'proposeSubmitSignaturesAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_certificateRaw', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerNodeId',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_part1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_part2', internalType: 'bytes32', type: 'bytes32' },
      { name: '_verificationData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerPublicKey',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_nodeId', internalType: 'bytes20', type: 'bytes20' }],
    name: 'unregisterNodeId',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'unregisterPublicKey',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFastUpdateIncentiveManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFastUpdateIncentiveManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'rangeIncrease',
        internalType: 'Range',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'sampleSizeIncrease',
        internalType: 'SampleSize',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'offerAmount',
        internalType: 'Fee',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'IncentiveOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'feedConfigurations',
        internalType: 'struct IFastUpdatesConfiguration.FeedConfiguration[]',
        type: 'tuple[]',
        components: [
          { name: 'feedId', internalType: 'bytes21', type: 'bytes21' },
          { name: 'rewardBandValue', internalType: 'uint32', type: 'uint32' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InflationRewardsOffered',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getBaseScale',
    outputs: [{ name: '', internalType: 'Scale', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentSampleSizeIncreasePrice',
    outputs: [{ name: '', internalType: 'Fee', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getExpectedSampleSize',
    outputs: [{ name: '', internalType: 'SampleSize', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getIncentiveDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPrecision',
    outputs: [{ name: '', internalType: 'Precision', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRange',
    outputs: [{ name: '', internalType: 'Range', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getScale',
    outputs: [{ name: '', internalType: 'Scale', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_offer',
        internalType: 'struct IFastUpdateIncentiveManager.IncentiveOffer',
        type: 'tuple',
        components: [
          { name: 'rangeIncrease', internalType: 'Range', type: 'uint256' },
          { name: 'rangeLimit', internalType: 'Range', type: 'uint256' },
        ],
      },
    ],
    name: 'offerIncentive',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rangeIncreaseLimit',
    outputs: [{ name: '', internalType: 'Range', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rangeIncreasePrice',
    outputs: [{ name: '', internalType: 'Fee', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'sampleIncreaseLimit',
    outputs: [{ name: '', internalType: 'SampleSize', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFastUpdater
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFastUpdaterAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'FastUpdateFeedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingRoundId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes21', type: 'bytes21', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'decimals', internalType: 'int8', type: 'int8', indexed: false },
    ],
    name: 'FastUpdateFeedReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'feeds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'decimals',
        internalType: 'int8[]',
        type: 'int8[]',
        indexed: false,
      },
    ],
    name: 'FastUpdateFeeds',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'FastUpdateFeedsSubmitted',
  },
  {
    type: 'function',
    inputs: [{ name: '_blockNum', internalType: 'uint256', type: 'uint256' }],
    name: 'blockScoreCutoff',
    outputs: [{ name: '_cutoff', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'currentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'currentScoreCutoff',
    outputs: [{ name: '_cutoff', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'currentSortitionWeight',
    outputs: [{ name: '_weight', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'fetchAllCurrentFeeds',
    outputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
      { name: '_feeds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'fetchCurrentFeeds',
    outputs: [
      { name: '_feeds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_historySize', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'numberOfUpdates',
    outputs: [
      { name: '_noOfUpdates', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'numberOfUpdatesInBlock',
    outputs: [
      { name: '_noOfUpdates', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submissionWindow',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_updates',
        internalType: 'struct IFastUpdater.FastUpdates',
        type: 'tuple',
        components: [
          { name: 'sortitionBlock', internalType: 'uint256', type: 'uint256' },
          {
            name: 'sortitionCredential',
            internalType: 'struct SortitionCredential',
            type: 'tuple',
            components: [
              { name: 'replicate', internalType: 'uint256', type: 'uint256' },
              {
                name: 'gamma',
                internalType: 'struct G1Point',
                type: 'tuple',
                components: [
                  { name: 'x', internalType: 'uint256', type: 'uint256' },
                  { name: 'y', internalType: 'uint256', type: 'uint256' },
                ],
              },
              { name: 'c', internalType: 'uint256', type: 'uint256' },
              { name: 's', internalType: 'uint256', type: 'uint256' },
            ],
          },
          { name: 'deltas', internalType: 'bytes', type: 'bytes' },
          {
            name: 'signature',
            internalType: 'struct IFastUpdater.Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
        ],
      },
    ],
    name: 'submitUpdates',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFastUpdatesConfiguration
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFastUpdatesConfigurationAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      {
        name: 'rewardBandValue',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'inflationShare',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeedAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeedRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      {
        name: 'rewardBandValue',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'inflationShare',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeedUpdated',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFeedConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct IFastUpdatesConfiguration.FeedConfiguration[]',
        type: 'tuple[]',
        components: [
          { name: 'feedId', internalType: 'bytes21', type: 'bytes21' },
          { name: 'rewardBandValue', internalType: 'uint32', type: 'uint32' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'getFeedId',
    outputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFeedIds',
    outputs: [{ name: '', internalType: 'bytes21[]', type: 'bytes21[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedIndex',
    outputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getNumberOfFeeds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getUnusedIndices',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFdcHub
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFdcHubAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AttestationRequest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'fdcConfigurations',
        internalType: 'struct IFdcInflationConfigurations.FdcConfiguration[]',
        type: 'tuple[]',
        components: [
          { name: 'attestationType', internalType: 'bytes32', type: 'bytes32' },
          { name: 'source', internalType: 'bytes32', type: 'bytes32' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
          {
            name: 'minRequestsThreshold',
            internalType: 'uint8',
            type: 'uint8',
          },
          { name: 'mode', internalType: 'uint224', type: 'uint224' },
        ],
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InflationRewardsOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'requestsOffsetSeconds',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'RequestsOffsetSet',
  },
  {
    type: 'function',
    inputs: [],
    name: 'fdcInflationConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'contract IFdcInflationConfigurations',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'fdcRequestFeeConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'contract IFdcRequestFeeConfigurations',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_data', internalType: 'bytes', type: 'bytes' }],
    name: 'requestAttestation',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'requestsOffsetSeconds',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFdcInflationConfigurations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFdcInflationConfigurationsAbi = [
  {
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'getFdcConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct IFdcInflationConfigurations.FdcConfiguration',
        type: 'tuple',
        components: [
          { name: 'attestationType', internalType: 'bytes32', type: 'bytes32' },
          { name: 'source', internalType: 'bytes32', type: 'bytes32' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
          {
            name: 'minRequestsThreshold',
            internalType: 'uint8',
            type: 'uint8',
          },
          { name: 'mode', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFdcConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct IFdcInflationConfigurations.FdcConfiguration[]',
        type: 'tuple[]',
        components: [
          { name: 'attestationType', internalType: 'bytes32', type: 'bytes32' },
          { name: 'source', internalType: 'bytes32', type: 'bytes32' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
          {
            name: 'minRequestsThreshold',
            internalType: 'uint8',
            type: 'uint8',
          },
          { name: 'mode', internalType: 'uint224', type: 'uint224' },
        ],
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFdcRequestFeeConfigurations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFdcRequestFeeConfigurationsAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'attestationType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'source',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'TypeAndSourceFeeRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'attestationType',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'source',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TypeAndSourceFeeSet',
  },
  {
    type: 'function',
    inputs: [{ name: '_data', internalType: 'bytes', type: 'bytes' }],
    name: 'getRequestFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFdcVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFdcVerificationAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'fdcProtocolId',
    outputs: [{ name: '_fdcProtocolId', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'relay',
    outputs: [{ name: '', internalType: 'contract IRelay', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IAddressValidity.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IAddressValidity.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IAddressValidity.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'addressStr',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IAddressValidity.ResponseBody',
                type: 'tuple',
                components: [
                  { name: 'isValid', internalType: 'bool', type: 'bool' },
                  {
                    name: 'standardAddress',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'standardAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyAddressValidity',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IBalanceDecreasingTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IBalanceDecreasingTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressIndicator',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IBalanceDecreasingTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyBalanceDecreasingTransaction',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IConfirmedBlockHeightExists.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IConfirmedBlockHeightExists.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IConfirmedBlockHeightExists.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'queryWindow',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IConfirmedBlockHeightExists.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'numberOfConfirmations',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'lowestQueryWindowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyConfirmedBlockHeightExists',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IEVMTransaction.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IEVMTransaction.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IEVMTransaction.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'requiredConfirmations',
                    internalType: 'uint16',
                    type: 'uint16',
                  },
                  { name: 'provideInput', internalType: 'bool', type: 'bool' },
                  { name: 'listEvents', internalType: 'bool', type: 'bool' },
                  {
                    name: 'logIndices',
                    internalType: 'uint32[]',
                    type: 'uint32[]',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IEVMTransaction.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  { name: 'timestamp', internalType: 'uint64', type: 'uint64' },
                  {
                    name: 'sourceAddress',
                    internalType: 'address',
                    type: 'address',
                  },
                  { name: 'isDeployment', internalType: 'bool', type: 'bool' },
                  {
                    name: 'receivingAddress',
                    internalType: 'address',
                    type: 'address',
                  },
                  { name: 'value', internalType: 'uint256', type: 'uint256' },
                  { name: 'input', internalType: 'bytes', type: 'bytes' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                  {
                    name: 'events',
                    internalType: 'struct IEVMTransaction.Event[]',
                    type: 'tuple[]',
                    components: [
                      {
                        name: 'logIndex',
                        internalType: 'uint32',
                        type: 'uint32',
                      },
                      {
                        name: 'emitterAddress',
                        internalType: 'address',
                        type: 'address',
                      },
                      {
                        name: 'topics',
                        internalType: 'bytes32[]',
                        type: 'bytes32[]',
                      },
                      { name: 'data', internalType: 'bytes', type: 'bytes' },
                      { name: 'removed', internalType: 'bool', type: 'bool' },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyEVMTransaction',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyPayment',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IReferencedPaymentNonexistence.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IReferencedPaymentNonexistence.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'destinationAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'amount', internalType: 'uint256', type: 'uint256' },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'checkSourceAddresses',
                    internalType: 'bool',
                    type: 'bool',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyReferencedPaymentNonexistence',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IWeb2Json.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IWeb2Json.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IWeb2Json.RequestBody',
                type: 'tuple',
                components: [
                  { name: 'url', internalType: 'string', type: 'string' },
                  {
                    name: 'httpMethod',
                    internalType: 'string',
                    type: 'string',
                  },
                  { name: 'headers', internalType: 'string', type: 'string' },
                  {
                    name: 'queryParams',
                    internalType: 'string',
                    type: 'string',
                  },
                  { name: 'body', internalType: 'string', type: 'string' },
                  {
                    name: 'postProcessJq',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'abiSignature',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IWeb2Json.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'abiEncodedData',
                    internalType: 'bytes',
                    type: 'bytes',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyWeb2Json',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFeeCalculator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFeeCalculatorAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'calculateFeeByIds',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'calculateFeeByIndices',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlareAssetRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlareAssetRegistryAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'allAssetTypes',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'allAssets',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_assetType', internalType: 'bytes32', type: 'bytes32' }],
    name: 'allAssetsOfType',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_assetType', internalType: 'bytes32', type: 'bytes32' }],
    name: 'allAssetsOfTypeWithSymbols',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'allAssetsWithSymbols',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'string[]', type: 'string[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'symbol', internalType: 'string', type: 'string' }],
    name: 'assetBySymbol',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_token', internalType: 'address', type: 'address' }],
    name: 'assetType',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nameHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getAttribute',
    outputs: [
      { name: 'defined', internalType: 'bool', type: 'bool' },
      { name: 'value', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'incentivePoolFor',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'isFlareAsset',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'maxDelegatesByPercent',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'supportsFtsoDelegation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlareContractRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlareContractRegistryAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getAllContracts',
    outputs: [
      { name: '_names', internalType: 'string[]', type: 'string[]' },
      { name: '_addresses', internalType: 'address[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_nameHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getContractAddressByHash',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_name', internalType: 'string', type: 'string' }],
    name: 'getContractAddressByName',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nameHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getContractAddressesByHash',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_names', internalType: 'string[]', type: 'string[]' }],
    name: 'getContractAddressesByName',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlareDaemonize
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlareDaemonizeAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'daemonize',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getContractName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'switchToFallbackMode',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlareSystemsCalculator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlareSystemsCalculatorAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationFeeBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'wNatWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'wNatCappedWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'nodeIds',
        internalType: 'bytes20[]',
        type: 'bytes20[]',
        indexed: false,
      },
      {
        name: 'nodeWeights',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'VoterRegistrationInfo',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNoRewardsDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNonPunishableDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNonPunishableDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNatCapPPM',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFlareSystemsManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFlareSystemsManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'RandomAcquisitionStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'startVotingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'RewardEpochStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardsHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'noOfWeightBasedClaims',
        internalType: 'struct IFlareSystemsManager.NumberOfWeightBasedClaims[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardManagerId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'noOfWeightBasedClaims',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'RewardsSigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'SignUptimeVoteEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'SigningPolicySigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'uptimeVoteHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'UptimeVoteSigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeIds',
        internalType: 'bytes20[]',
        type: 'bytes20[]',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'UptimeVoteSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'votePowerBlock',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'VotePowerBlockSelected',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstRewardEpochStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstVotingRoundStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentVotingEpochId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSeed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStartVotingRoundId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotePowerBlock',
    outputs: [
      { name: '_votePowerBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterRegistrationData',
    outputs: [
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_enabled', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'isVoterRegistrationEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_newSigningPolicyHash',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signNewSigningPolicy',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_noOfWeightBasedClaims',
        internalType: 'struct IFlareSystemsManager.NumberOfWeightBasedClaims[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardManagerId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'noOfWeightBasedClaims',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      { name: '_rewardsHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_uptimeVoteHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signUptimeVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'submitUptimeVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'votingEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtso
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'natTurnout',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lowNatTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LowTurnout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'endTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceEpochInitializedOnFtso',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardedFtso',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'lowIQRRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'highIQRRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lowElasticBandRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'highElasticBandRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'finalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votePowerNat',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votePowerAsset',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceRevealed',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPrice',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceDetails',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_priceTimestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_priceFinalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
      },
      {
        name: '_lastPriceEpochFinalizationTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lastPriceEpochFinalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceFromTrustedProviders',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceWithDecimals',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceWithDecimalsFromTrustedProviders',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getEpochPriceForVoter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPriceEpochConfiguration',
    outputs: [
      { name: '_firstEpochStartTs', internalType: 'uint256', type: 'uint256' },
      {
        name: '_submitPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_revealPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPriceEpochData',
    outputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_epochSubmitEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_epochRevealEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_fallbackMode', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoFeedDecimals
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoFeedDecimalsAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      { name: 'decimals', internalType: 'int8', type: 'int8', indexed: false },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
    ],
    name: 'DecimalsChanged',
  },
  {
    type: 'function',
    inputs: [],
    name: 'decimalsUpdateOffset',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'defaultDecimals',
    outputs: [{ name: '', internalType: 'int8', type: 'int8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getCurrentDecimals',
    outputs: [{ name: '', internalType: 'int8', type: 'int8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedIds', internalType: 'bytes', type: 'bytes' }],
    name: 'getCurrentDecimalsBulk',
    outputs: [{ name: '_decimals', internalType: 'bytes', type: 'bytes' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedId', internalType: 'bytes21', type: 'bytes21' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDecimals',
    outputs: [{ name: '', internalType: 'int8', type: 'int8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes', type: 'bytes' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDecimalsBulk',
    outputs: [{ name: '_decimals', internalType: 'bytes', type: 'bytes' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getScheduledDecimalsChanges',
    outputs: [
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      {
        name: '_validFromEpochId',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_fixed', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoFeedIdConverter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoFeedIdConverterAbi = [
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedCategoryAndName',
    outputs: [
      { name: '_category', internalType: 'uint8', type: 'uint8' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    stateMutability: 'pure',
  },
  {
    type: 'function',
    inputs: [
      { name: '_category', internalType: 'uint8', type: 'uint8' },
      { name: '_name', internalType: 'string', type: 'string' },
    ],
    name: 'getFeedId',
    outputs: [{ name: '', internalType: 'bytes21', type: 'bytes21' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoFeedPublisher
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoFeedPublisherAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes21', type: 'bytes21', indexed: true },
      { name: 'value', internalType: 'int32', type: 'int32', indexed: false },
      {
        name: 'turnoutBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: 'decimals', internalType: 'int8', type: 'int8', indexed: false },
    ],
    name: 'FtsoFeedPublished',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feedsHistorySize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'ftsoProtocolId',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getCurrentFeed',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoFeedPublisher.Feed',
        type: 'tuple',
        components: [
          { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
          { name: 'id', internalType: 'bytes21', type: 'bytes21' },
          { name: 'value', internalType: 'int32', type: 'int32' },
          { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
          { name: 'decimals', internalType: 'int8', type: 'int8' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedId', internalType: 'bytes21', type: 'bytes21' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFeed',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoFeedPublisher.Feed',
        type: 'tuple',
        components: [
          { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
          { name: 'id', internalType: 'bytes21', type: 'bytes21' },
          { name: 'value', internalType: 'int32', type: 'int32' },
          { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
          { name: 'decimals', internalType: 'int8', type: 'int8' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proofs',
        internalType: 'struct IFtsoFeedPublisher.FeedWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct IFtsoFeedPublisher.Feed',
            type: 'tuple',
            components: [
              { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
              { name: 'id', internalType: 'bytes21', type: 'bytes21' },
              { name: 'value', internalType: 'int32', type: 'int32' },
              { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
              { name: 'decimals', internalType: 'int8', type: 'int8' },
            ],
          },
        ],
      },
    ],
    name: 'publish',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoGenesis
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoGenesisAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_wNatVP', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revealPriceSubmitter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wNatVotePowerCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoInflationConfigurations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoInflationConfigurationsAbi = [
  {
    type: 'function',
    inputs: [{ name: '_index', internalType: 'uint256', type: 'uint256' }],
    name: 'getFtsoConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoInflationConfigurations.FtsoConfiguration',
        type: 'tuple',
        components: [
          { name: 'feedIds', internalType: 'bytes', type: 'bytes' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
          {
            name: 'minRewardedTurnoutBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'primaryBandRewardSharePPM',
            internalType: 'uint24',
            type: 'uint24',
          },
          {
            name: 'secondaryBandWidthPPMs',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'mode', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsoConfigurations',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoInflationConfigurations.FtsoConfiguration[]',
        type: 'tuple[]',
        components: [
          { name: 'feedIds', internalType: 'bytes', type: 'bytes' },
          { name: 'inflationShare', internalType: 'uint24', type: 'uint24' },
          {
            name: 'minRewardedTurnoutBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'primaryBandRewardSharePPM',
            internalType: 'uint24',
            type: 'uint24',
          },
          {
            name: 'secondaryBandWidthPPMs',
            internalType: 'bytes',
            type: 'bytes',
          },
          { name: 'mode', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccruingUnearnedRewardsFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftso',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DistributingRewardsFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'fallbackMode',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'FallbackMode',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftso',
        internalType: 'contract IIFtso',
        type: 'address',
        indexed: false,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'failingType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'FinalizingPriceEpochFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftso',
        internalType: 'contract IIFtso',
        type: 'address',
        indexed: false,
      },
      { name: 'add', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FtsoAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftso',
        internalType: 'contract IIFtso',
        type: 'address',
        indexed: false,
      },
      {
        name: 'fallbackMode',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'FtsoFallbackMode',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftso',
        internalType: 'contract IIFtso',
        type: 'address',
        indexed: false,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InitializingCurrentEpochStateForRevealFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'chosenFtso',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceEpochFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votepowerBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardEpochFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'useGoodRandom',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'maxWaitForGoodRandomSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UseGoodRandomSet',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceEpochData',
    outputs: [
      { name: '_priceEpochId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_priceEpochStartTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_priceEpochEndTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_priceEpochRevealEndTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_currentTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceEpochId',
    outputs: [
      { name: '_priceEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFallbackMode',
    outputs: [
      { name: '_fallbackMode', internalType: 'bool', type: 'bool' },
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
      { name: '_ftsoInFallbackMode', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsos',
    outputs: [
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPriceEpochConfiguration',
    outputs: [
      {
        name: '_firstPriceEpochStartTs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_priceEpochDurationSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_revealEpochDurationSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochConfiguration',
    outputs: [
      {
        name: '_firstRewardEpochStartTs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_rewardEpochDurationSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochToExpireNext',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRewardEpochVotePowerBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoManagerGenesis
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoManagerGenesisAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceEpochId',
    outputs: [
      { name: '_priceEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoRegistryAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getAllCurrentPrices',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoRegistry.PriceInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'ftsoIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    name: 'getCurrentPrice',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getCurrentPrice',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_assetIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getCurrentPriceWithDecimals',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    name: 'getCurrentPriceWithDecimals',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'getCurrentPricesByIndices',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoRegistry.PriceInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'ftsoIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbols', internalType: 'string[]', type: 'string[]' }],
    name: 'getCurrentPricesBySymbols',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoRegistry.PriceInfo[]',
        type: 'tuple[]',
        components: [
          { name: 'ftsoIndex', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'uint256', type: 'uint256' },
          { name: 'decimals', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getFtso',
    outputs: [
      {
        name: '_activeFtsoAddress',
        internalType: 'contract IIFtso',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    name: 'getFtsoBySymbol',
    outputs: [
      {
        name: '_activeFtsoAddress',
        internalType: 'contract IIFtso',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    name: 'getFtsoIndex',
    outputs: [
      { name: '_assetIndex', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getFtsoSymbol',
    outputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'getFtsos',
    outputs: [
      {
        name: '_ftsos',
        internalType: 'contract IFtsoGenesis[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedFtsos',
    outputs: [
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedIndices',
    outputs: [
      {
        name: '_supportedIndices',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedIndicesAndFtsos',
    outputs: [
      {
        name: '_supportedIndices',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedIndicesAndSymbols',
    outputs: [
      {
        name: '_supportedIndices',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_supportedSymbols', internalType: 'string[]', type: 'string[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedIndicesSymbolsAndFtsos',
    outputs: [
      {
        name: '_supportedIndices',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_supportedSymbols', internalType: 'string[]', type: 'string[]' },
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedSymbols',
    outputs: [
      { name: '_supportedSymbols', internalType: 'string[]', type: 'string[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedSymbolsAndFtsos',
    outputs: [
      { name: '_supportedSymbols', internalType: 'string[]', type: 'string[]' },
      { name: '_ftsos', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoRegistryGenesis
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoRegistryGenesisAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'getFtsos',
    outputs: [
      {
        name: '_ftsos',
        internalType: 'contract IFtsoGenesis[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoRewardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoRewardManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'dataProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'validFromEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FeePercentageChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftsoRewardManager',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FtsoRewardManagerActivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ftsoRewardManager',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'FtsoRewardManagerDeactivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'dataProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'whoClaimed',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sentTo',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardClaimsEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardClaimsExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'ftso', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addresses',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'rewards',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'UnearnedRewardsAccrued',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwners', internalType: 'address[]', type: 'address[]' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'autoClaim',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'claim',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_dataProviders', internalType: 'address[]', type: 'address[]' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'claimFromDataProviders',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochs', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'claimReward',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_dataProviders', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'claimRewardFromDataProviders',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
      { name: '_dataProvider', internalType: 'address', type: 'address' },
      { name: '_claimer', internalType: 'address', type: 'address' },
    ],
    name: 'getClaimedReward',
    outputs: [
      { name: '_claimed', internalType: 'bool', type: 'bool' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    name: 'getDataProviderCurrentFeePercentage',
    outputs: [
      { name: '_feePercentageBIPS', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDataProviderFeePercentage',
    outputs: [
      { name: '_feePercentageBIPS', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    name: 'getDataProviderPerformanceInfo',
    outputs: [
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_votePowerIgnoringRevocation',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    name: 'getDataProviderScheduledFeePercentageChanges',
    outputs: [
      {
        name: '_feePercentageBIPS',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_validFromEpoch', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_fixed', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getEpochReward',
    outputs: [
      { name: '_totalReward', internalType: 'uint256', type: 'uint256' },
      { name: '_claimedReward', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getEpochsWithClaimableRewards',
    outputs: [
      { name: '_startEpochId', internalType: 'uint256', type: 'uint256' },
      { name: '_endEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'getEpochsWithUnclaimedRewards',
    outputs: [
      { name: '_epochIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getInitialRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochToExpireNext',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRewardEpochVotePowerBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStateOfRewards',
    outputs: [
      { name: '_dataProviders', internalType: 'address[]', type: 'address[]' },
      { name: '_rewardAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_claimed', internalType: 'bool[]', type: 'bool[]' },
      { name: '_claimable', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
      { name: '_dataProviders', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'getStateOfRewardsFromDataProviders',
    outputs: [
      { name: '_rewardAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_claimed', internalType: 'bool[]', type: 'bool[]' },
      { name: '_claimable', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'nextClaimableRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feePercentageBIPS', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDataProviderFeePercentage',
    outputs: [
      { name: '_validFromEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFtsoRewardOffersManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFtsoRewardOffersManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      { name: 'feedIds', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'decimals',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'minRewardedTurnoutBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'primaryBandRewardSharePPM',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'secondaryBandWidthPPMs',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      { name: 'mode', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'InflationRewardsOffered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'valueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinimalRewardsOfferValueSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'feedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: false,
      },
      { name: 'decimals', internalType: 'int8', type: 'int8', indexed: false },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'minRewardedTurnoutBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'primaryBandRewardSharePPM',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'secondaryBandWidthPPM',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'claimBackAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RewardsOffered',
  },
  {
    type: 'function',
    inputs: [],
    name: 'minimalRewardsOfferValueWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nextRewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_offers',
        internalType: 'struct IFtsoRewardOffersManager.Offer[]',
        type: 'tuple[]',
        components: [
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          { name: 'feedId', internalType: 'bytes21', type: 'bytes21' },
          {
            name: 'minRewardedTurnoutBIPS',
            internalType: 'uint16',
            type: 'uint16',
          },
          {
            name: 'primaryBandRewardSharePPM',
            internalType: 'uint24',
            type: 'uint24',
          },
          {
            name: 'secondaryBandWidthPPM',
            internalType: 'uint24',
            type: 'uint24',
          },
          {
            name: 'claimBackAddress',
            internalType: 'address',
            type: 'address',
          },
        ],
      },
    ],
    name: 'offerRewards',
    outputs: [],
    stateMutability: 'payable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGenericRewardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGenericRewardManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'recipients',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'AllowedClaimRecipientsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardOwner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executors',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sentTo',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardManager',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RewardManagerActivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardManager',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RewardManagerDeactivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addresses',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'rewards',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'allowedClaimRecipients',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardAmount', internalType: 'uint256', type: 'uint256' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'claim',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'claimExecutors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
    ],
    name: 'getStateOfRewards',
    outputs: [
      { name: '_totalReward', internalType: 'uint256', type: 'uint256' },
      { name: '_claimedReward', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setAllowedClaimRecipients',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernanceSettings
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernanceSettingsAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getExecutors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getGovernanceAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getTimelock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_address', internalType: 'address', type: 'address' }],
    name: 'isExecutor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernanceVotePower
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernanceVotePowerAbi = [
  {
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOfAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getDelegateOfAtNow',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IGovernor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iGovernorAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'accept', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'voteTimes',
        internalType: 'uint256[2]',
        type: 'uint256[2]',
        indexed: false,
      },
      {
        name: 'executionTimes',
        internalType: 'uint256[2]',
        type: 'uint256[2]',
        indexed: false,
      },
      {
        name: 'votePowerBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'circulatingSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'votePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'forVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'againstVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
      { name: '_v', internalType: 'uint8', type: 'uint8' },
      { name: '_r', internalType: 'bytes32', type: 'bytes32' },
      { name: '_s', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
      { name: '_reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_targets', internalType: 'address[]', type: 'address[]' },
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalInfo',
    outputs: [
      { name: '_proposer', internalType: 'address', type: 'address' },
      { name: '_accept', internalType: 'bool', type: 'bool' },
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_voteStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_voteEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_execStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_execEndTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_circulatingSupply', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalVotes',
    outputs: [
      { name: '_for', internalType: 'uint256', type: 'uint256' },
      { name: '_against', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIAddressUpdatable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiAddressUpdatableAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_contractNameHashes',
        internalType: 'bytes32[]',
        type: 'bytes32[]',
      },
      {
        name: '_contractAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'updateContractAddresses',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIAddressUpdater
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiAddressUpdaterAbi = [
  {
    type: 'function',
    inputs: [{ name: '_name', internalType: 'string', type: 'string' }],
    name: 'getContractAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_nameHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getContractAddressByHash',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_names', internalType: 'string[]', type: 'string[]' }],
    name: 'getContractAddresses',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nameHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'getContractAddressesByHash',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getContractNamesAndAddresses',
    outputs: [
      { name: '_contractNames', internalType: 'string[]', type: 'string[]' },
      {
        name: '_contractAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIClaimSetupManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiClaimSetupManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'recipients',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'AllowedClaimRecipientsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validFromRewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorFeeValueChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'executors',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorsChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'DelegationAccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
        indexed: false,
      },
      { name: 'enabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'DelegationAccountUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ExecutorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'validFromRewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExecutorUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MinFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'registerExecutorFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RegisterExecutorFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'excessAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SetExecutorsExcessAmountRefunded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'libraryAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'SetLibraryAddress',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'accountToDelegationAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'allowedClaimRecipients',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegatees', internalType: 'address[]', type: 'address[]' },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executor', internalType: 'address', type: 'address' },
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address', type: 'address' },
    ],
    name: 'checkExecutorAndAllowedRecipient',
    outputs: [],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'claimExecutors',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_bips', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'delegateGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'disableDelegationAccount',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'enableDelegationAccount',
    outputs: [
      {
        name: '',
        internalType: 'contract IDelegationAccount',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executor', internalType: 'address', type: 'address' },
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'getAutoClaimAddressesAndExecutorFee',
    outputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_executorFeeValue', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getDelegationAccountData',
    outputs: [
      {
        name: '_delegationAccount',
        internalType: 'contract IDelegationAccount',
        type: 'address',
      },
      { name: '_enabled', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorCurrentFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executor', internalType: 'address', type: 'address' },
      { name: '_rewardEpoch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getExecutorFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorInfo',
    outputs: [
      { name: '_registered', internalType: 'bool', type: 'bool' },
      { name: '_currentFeeValue', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_executor', internalType: 'address', type: 'address' }],
    name: 'getExecutorScheduledFeeValueChanges',
    outputs: [
      { name: '_feeValue', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_validFromEpoch', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_fixed', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_start', internalType: 'uint256', type: 'uint256' },
      { name: '_end', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredExecutors',
    outputs: [
      {
        name: '_registeredExecutors',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_totalLength', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_executor', internalType: 'address', type: 'address' },
    ],
    name: 'isClaimExecutor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feeValue', internalType: 'uint256', type: 'uint256' }],
    name: 'registerExecutor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeDelegationAt',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setAllowedClaimRecipients',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
      { name: '_enableDelegationAccount', internalType: 'bool', type: 'bool' },
    ],
    name: 'setAutoClaiming',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_libraryAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setLibraryAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_maxFeeValueWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxFeeValueWei',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_minFeeValueWei', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinFeeValueWei',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_registerExecutorFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'setRegisterExecutorFeeValueWei',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalToken',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateGovernance',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'unregisterExecutor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_feeValue', internalType: 'uint256', type: 'uint256' }],
    name: 'updateExecutorFeeValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNat',
    outputs: [{ name: '', internalType: 'contract IWNat', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IICleanable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiCleanableAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'cleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_cleanerContract', internalType: 'address', type: 'address' },
    ],
    name: 'setCleanerContract',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCleanupBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IICleanupBlockNumberManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiCleanupBlockNumberManagerAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCleanUpBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IICustomFeed
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiCustomFeedAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'calculateFee',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feedId',
    outputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentFeed',
    outputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'int8', type: 'int8' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'payable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIEntityManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiEntityManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegationAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxNodeIdsPerEntity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxNodeIdsPerEntitySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
    ],
    name: 'NodeIdRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
    ],
    name: 'NodeIdUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'part1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'part2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PublicKeyRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'part1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'part2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'PublicKeyUnregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SigningPolicyAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SigningPolicyAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitAddressRegistrationConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitSignaturesAddressProposed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SubmitSignaturesAddressRegistrationConfirmed',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmDelegationAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSigningPolicyAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSubmitAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'confirmSubmitSignaturesAddressRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getDelegationAddressOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegationAddressOfAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegationAddresses',
    outputs: [
      {
        name: '_delegationAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getNodeIds',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[][]', type: 'bytes20[][]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getNodeIdsOf',
    outputs: [{ name: '', internalType: 'bytes20[]', type: 'bytes20[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getNodeIdsOfAt',
    outputs: [{ name: '', internalType: 'bytes20[]', type: 'bytes20[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getPublicKeyOf',
    outputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPublicKeyOfAt',
    outputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPublicKeys',
    outputs: [
      { name: '_parts1', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: '_parts2', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSigningPolicyAddresses',
    outputs: [
      {
        name: '_signingPolicyAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSubmitAddresses',
    outputs: [
      {
        name: '_submitAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSubmitSignaturesAddresses',
    outputs: [
      {
        name: '_submitSignaturesAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getVoterAddresses',
    outputs: [
      {
        name: '_addresses',
        internalType: 'struct IEntityManager.VoterAddresses',
        type: 'tuple',
        components: [
          { name: 'submitAddress', internalType: 'address', type: 'address' },
          {
            name: 'submitSignaturesAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'signingPolicyAddress',
            internalType: 'address',
            type: 'address',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterAddressesAt',
    outputs: [
      {
        name: '_addresses',
        internalType: 'struct IEntityManager.VoterAddresses',
        type: 'tuple',
        components: [
          { name: 'submitAddress', internalType: 'address', type: 'address' },
          {
            name: 'submitSignaturesAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'signingPolicyAddress',
            internalType: 'address',
            type: 'address',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegationAddress', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForDelegationAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForNodeId',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_part1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_part2', internalType: 'bytes32', type: 'bytes32' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForPublicKey',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSigningPolicyAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_submitAddress', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSubmitAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterForSubmitSignaturesAddress',
    outputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegationAddress', internalType: 'address', type: 'address' },
    ],
    name: 'proposeDelegationAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'proposeSigningPolicyAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_submitAddress', internalType: 'address', type: 'address' },
    ],
    name: 'proposeSubmitAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'proposeSubmitSignaturesAddress',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_certificateRaw', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerNodeId',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_part1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_part2', internalType: 'bytes32', type: 'bytes32' },
      { name: '_verificationData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerPublicKey',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_nodeId', internalType: 'bytes20', type: 'bytes20' }],
    name: 'unregisterNodeId',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'unregisterPublicKey',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFastUpdaterView
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFastUpdaterViewAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'fetchCurrentFeeds',
    outputs: [
      { name: '_feeds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFlareSystemsCalculator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFlareSystemsCalculatorAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'delegationAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'delegationFeeBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'wNatWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'wNatCappedWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'nodeIds',
        internalType: 'bytes20[]',
        type: 'bytes20[]',
        indexed: false,
      },
      {
        name: 'nodeWeights',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'VoterRegistrationInfo',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'calculateBurnFactorPPM',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_votePowerBlockNumber',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'calculateRegistrationWeight',
    outputs: [
      { name: '_registrationWeight', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNoRewardsDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNonPunishableDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicySignNonPunishableDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNatCapPPM',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFlareSystemsManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFlareSystemsManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
    ],
    name: 'ClosingExpiredRewardEpochFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'RandomAcquisitionStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'startVotingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'RewardEpochStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardsHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'noOfWeightBasedClaims',
        internalType: 'struct IFlareSystemsManager.NumberOfWeightBasedClaims[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardManagerId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'noOfWeightBasedClaims',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'RewardsSigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'blockNumber',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'SettingCleanUpBlockNumberFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'SignUptimeVoteEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'SigningPolicySigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
    ],
    name: 'TriggeringVoterRegistrationFailed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'uptimeVoteHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'thresholdReached',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'UptimeVoteSigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeIds',
        internalType: 'bytes20[]',
        type: 'bytes20[]',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'UptimeVoteSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'votePowerBlock',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'VotePowerBlockSelected',
  },
  {
    type: 'function',
    inputs: [],
    name: 'currentRewardEpochExpectedEndTs',
    outputs: [
      {
        name: '_currentRewardEpochExpectedEndTs',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstRewardEpochStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstVotingRoundStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentVotingEpochId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getRandomAcquisitionInfo',
    outputs: [
      {
        name: '_randomAcquisitionStartTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_randomAcquisitionStartBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_randomAcquisitionEndTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_randomAcquisitionEndBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getRewardEpochStartInfo',
    outputs: [
      { name: '_rewardEpochStartTs', internalType: 'uint64', type: 'uint64' },
      {
        name: '_rewardEpochStartBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getRewardsSignInfo',
    outputs: [
      { name: '_rewardsSignStartTs', internalType: 'uint64', type: 'uint64' },
      {
        name: '_rewardsSignStartBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
      { name: '_rewardsSignEndTs', internalType: 'uint64', type: 'uint64' },
      { name: '_rewardsSignEndBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSeed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getSigningPolicySignInfo',
    outputs: [
      {
        name: '_signingPolicySignStartTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_signingPolicySignStartBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_signingPolicySignEndTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_signingPolicySignEndBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStartVotingRoundId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getThreshold',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getUptimeVoteSignStartInfo',
    outputs: [
      {
        name: '_uptimeVoteSignStartTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_uptimeVoteSignStartBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotePowerBlock',
    outputs: [
      { name: '_votePowerBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterRegistrationData',
    outputs: [
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_enabled', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoterRewardsSignInfo',
    outputs: [
      { name: '_rewardsSignTs', internalType: 'uint64', type: 'uint64' },
      { name: '_rewardsSignBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoterSigningPolicySignInfo',
    outputs: [
      { name: '_signingPolicySignTs', internalType: 'uint64', type: 'uint64' },
      {
        name: '_signingPolicySignBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoterUptimeVoteSignInfo',
    outputs: [
      { name: '_uptimeVoteSignTs', internalType: 'uint64', type: 'uint64' },
      { name: '_uptimeVoteSignBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getVoterUptimeVoteSubmitInfo',
    outputs: [
      { name: '_uptimeVoteSubmitTs', internalType: 'uint64', type: 'uint64' },
      {
        name: '_uptimeVoteSubmitBlock',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'isVoterRegistrationEnabled',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'lastInitializedVotingRoundId',
    outputs: [
      {
        name: '_lastInitializedVotingRoundId',
        internalType: 'uint32',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'newSigningPolicyInitializationStartSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'newSigningPolicyMinNumberOfVotingRoundsDelay',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
      { name: '_rewardManagerId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'noOfWeightBasedClaims',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'noOfWeightBasedClaimsHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'randomAcquisitionMaxDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'randomAcquisitionMaxDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardEpochIdToExpireNext',
    outputs: [
      {
        name: '_rewardEpochIdToExpireNext',
        internalType: 'uint24',
        type: 'uint24',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardExpiryOffsetSeconds',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'rewardsHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_newSigningPolicyHash',
        internalType: 'bytes32',
        type: 'bytes32',
      },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signNewSigningPolicy',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_noOfWeightBasedClaims',
        internalType: 'struct IFlareSystemsManager.NumberOfWeightBasedClaims[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardManagerId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'noOfWeightBasedClaims',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
      { name: '_rewardsHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_uptimeVoteHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'signUptimeVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicyMinNumberOfVoters',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'signingPolicyThresholdPPM',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      {
        name: '_signature',
        internalType: 'struct IFlareSystemsManager.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'submitUptimeVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submitUptimeVoteMinDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submitUptimeVoteMinDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'uptimeVoteHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'voterRegistrationMinDurationBlocks',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'voterRegistrationMinDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'votingEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFtso
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFtsoAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'natTurnout',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lowNatTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LowTurnout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'endTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceEpochInitializedOnFtso',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'rewardedFtso',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'lowIQRRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'highIQRRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'lowElasticBandRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'highElasticBandRewardPrice',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'finalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'price',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votePowerNat',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votePowerAsset',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PriceRevealed',
  },
  {
    type: 'function',
    inputs: [
      { name: '_firstEpochStartTs', internalType: 'uint256', type: 'uint256' },
      {
        name: '_submitPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_revealPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'activateFtso',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_maxVotePowerNatThresholdFraction',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_maxVotePowerAssetThresholdFraction',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lowAssetUSDThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_highAssetUSDThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_highAssetTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lowNatTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_elasticBandRewardBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_elasticBandWidthPPM',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_trustedAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'configureEpochs',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'deactivateFtso',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'epochsConfiguration',
    outputs: [
      {
        name: '_maxVotePowerNatThresholdFraction',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_maxVotePowerAssetThresholdFraction',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lowAssetUSDThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_highAssetUSDThreshold',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_highAssetTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lowNatTurnoutThresholdBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_elasticBandRewardBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_elasticBandWidthPPM',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_trustedAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'fallbackFinalizePriceEpoch',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_returnRewardData', internalType: 'bool', type: 'bool' },
    ],
    name: 'finalizePriceEpoch',
    outputs: [
      {
        name: '_eligibleAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_natWeights', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_totalNatWeight', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'forceFinalizePriceEpoch',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'ftsoManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getAsset',
    outputs: [
      { name: '', internalType: 'contract IIVPToken', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getAssetFtsos',
    outputs: [
      { name: '', internalType: 'contract IIFtso[]', type: 'address[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPrice',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceDetails',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_priceTimestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_priceFinalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
      },
      {
        name: '_lastPriceEpochFinalizationTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_lastPriceEpochFinalizationType',
        internalType: 'enum IFtso.PriceFinalizationType',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceFromTrustedProviders',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceWithDecimals',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentPriceWithDecimalsFromTrustedProviders',
    outputs: [
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint256', type: 'uint256' },
      {
        name: '_assetPriceUsdDecimals',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochPrice',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'getEpochPriceForVoter',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPriceEpochConfiguration',
    outputs: [
      { name: '_firstEpochStartTs', internalType: 'uint256', type: 'uint256' },
      {
        name: '_submitPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_revealPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getPriceEpochData',
    outputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_epochSubmitEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_epochRevealEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_fallbackMode', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getVoteWeightingParameters',
    outputs: [
      {
        name: '_assets',
        internalType: 'contract IIVPToken[]',
        type: 'address[]',
      },
      {
        name: '_assetMultipliers',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_totalVotePowerNat', internalType: 'uint256', type: 'uint256' },
      {
        name: '_totalVotePowerAsset',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_assetWeightRatio', internalType: 'uint256', type: 'uint256' },
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_circulatingSupplyNat',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_fallbackMode', internalType: 'bool', type: 'bool' },
    ],
    name: 'initializeCurrentEpochStateForReveal',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_price', internalType: 'uint256', type: 'uint256' },
      { name: '_wNatVP', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revealPriceSubmitter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_asset', internalType: 'contract IIVPToken', type: 'address' },
    ],
    name: 'setAsset',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_assetFtsos',
        internalType: 'contract IIFtso[]',
        type: 'address[]',
      },
    ],
    name: 'setAssetFtsos',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setVotePowerBlock',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_initialPriceUSD', internalType: 'uint256', type: 'uint256' },
      {
        name: '_initialPriceTimestamp',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'updateInitialPrice',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNat',
    outputs: [
      { name: '', internalType: 'contract IIVPToken', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wNatVotePowerCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFtsoFeedPublisher
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFtsoFeedPublisherAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      { name: 'id', internalType: 'bytes21', type: 'bytes21', indexed: true },
      { name: 'value', internalType: 'int32', type: 'int32', indexed: false },
      {
        name: 'turnoutBIPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      { name: 'decimals', internalType: 'int8', type: 'int8', indexed: false },
    ],
    name: 'FtsoFeedPublished',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feedsHistorySize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'ftsoProtocolId',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getCurrentFeed',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoFeedPublisher.Feed',
        type: 'tuple',
        components: [
          { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
          { name: 'id', internalType: 'bytes21', type: 'bytes21' },
          { name: 'value', internalType: 'int32', type: 'int32' },
          { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
          { name: 'decimals', internalType: 'int8', type: 'int8' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedId', internalType: 'bytes21', type: 'bytes21' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getFeed',
    outputs: [
      {
        name: '',
        internalType: 'struct IFtsoFeedPublisher.Feed',
        type: 'tuple',
        components: [
          { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
          { name: 'id', internalType: 'bytes21', type: 'bytes21' },
          { name: 'value', internalType: 'int32', type: 'int32' },
          { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
          { name: 'decimals', internalType: 'int8', type: 'int8' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proofs',
        internalType: 'struct IFtsoFeedPublisher.FeedWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct IFtsoFeedPublisher.Feed',
            type: 'tuple',
            components: [
              { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
              { name: 'id', internalType: 'bytes21', type: 'bytes21' },
              { name: 'value', internalType: 'int32', type: 'int32' },
              { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
              { name: 'decimals', internalType: 'int8', type: 'int8' },
            ],
          },
        ],
      },
    ],
    name: 'publish',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_feeds',
        internalType: 'struct IFtsoFeedPublisher.Feed[]',
        type: 'tuple[]',
        components: [
          { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
          { name: 'id', internalType: 'bytes21', type: 'bytes21' },
          { name: 'value', internalType: 'int32', type: 'int32' },
          { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
          { name: 'decimals', internalType: 'int8', type: 'int8' },
        ],
      },
    ],
    name: 'publishFeeds',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIFtsoManagerProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiFtsoManagerProxyAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'fastUpdater',
    outputs: [
      { name: '', internalType: 'contract IIFastUpdaterView', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'fastUpdatesConfiguration',
    outputs: [
      {
        name: '',
        internalType: 'contract IFastUpdatesConfiguration',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'flareSystemsManager',
    outputs: [
      {
        name: '',
        internalType: 'contract IFlareSystemsManager',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'relay',
    outputs: [{ name: '', internalType: 'contract IRelay', type: 'address' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIGovernanceVotePower
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiGovernanceVotePowerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'fromDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'toDelegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegate',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'previousBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newBalance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DelegateVotesChanged',
  },
  {
    type: 'function',
    inputs: [{ name: '_to', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getDelegateOfAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getDelegateOfAtNow',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'ownerToken',
    outputs: [{ name: '', internalType: 'contract IVPToken', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'pChainStakeMirror',
    outputs: [
      {
        name: '',
        internalType: 'contract IPChainStakeMirror',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_cleanerContract', internalType: 'address', type: 'address' },
    ],
    name: 'setCleanerContract',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCleanupBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_fromBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_toBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateAtTokenTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIGovernorProposer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiGovernorProposerAbi = [
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isProposer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IINodePossessionVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiNodePossessionVerifierAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_certificateRaw', internalType: 'bytes', type: 'bytes' },
      { name: '_signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyNodePossession',
    outputs: [],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIPollingFoundation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiPollingFoundationAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'targets',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'values',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'calldatas',
        internalType: 'bytes[]',
        type: 'bytes[]',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      { name: 'accept', internalType: 'bool', type: 'bool', indexed: false },
      {
        name: 'voteTimes',
        internalType: 'uint256[2]',
        type: 'uint256[2]',
        indexed: false,
      },
      {
        name: 'executionTimes',
        internalType: 'uint256[2]',
        type: 'uint256[2]',
        indexed: false,
      },
      {
        name: 'votePowerBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'circulatingSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'votePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'reason',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'forVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'againstVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
      { name: '_v', internalType: 'uint8', type: 'uint8' },
      { name: '_r', internalType: 'bytes32', type: 'bytes32' },
      { name: '_s', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'castVoteBySig',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
      { name: '_reason', internalType: 'string', type: 'string' },
    ],
    name: 'castVoteWithReason',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_targets', internalType: 'address[]', type: 'address[]' },
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalInfo',
    outputs: [
      { name: '_proposer', internalType: 'address', type: 'address' },
      { name: '_accept', internalType: 'bool', type: 'bool' },
      { name: '_votePowerBlock', internalType: 'uint256', type: 'uint256' },
      { name: '_voteStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_voteEndTime', internalType: 'uint256', type: 'uint256' },
      { name: '_execStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_execEndTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_circulatingSupply', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalVotes',
    outputs: [
      { name: '_for', internalType: 'uint256', type: 'uint256' },
      { name: '_against', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isProposer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_targets', internalType: 'address[]', type: 'address[]' },
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_calldatas', internalType: 'bytes[]', type: 'bytes[]' },
      { name: '_description', internalType: 'string', type: 'string' },
      {
        name: '_settings',
        internalType: 'struct IGovernor.GovernorSettings',
        type: 'tuple',
        components: [
          { name: 'accept', internalType: 'bool', type: 'bool' },
          {
            name: 'votingDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'votingPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'vpBlockPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'thresholdConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'majorityConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'executionDelaySeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'executionPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      {
        name: '_settings',
        internalType:
          'struct IIPollingFoundation.GovernorSettingsWithoutExecParams',
        type: 'tuple',
        components: [
          { name: 'accept', internalType: 'bool', type: 'bool' },
          { name: 'votingStartTs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'votingPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'vpBlockPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'thresholdConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'majorityConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      { name: '', internalType: 'enum IGovernor.ProposalState', type: 'uint8' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIPollingManagementGroup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiPollingManagementGroupAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMaintainer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MaintainerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'removedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'voteStartTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voteEndTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'eligibleMembers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      { name: 'accept', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ManagementGroupProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingDelaySeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votingPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposalFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterNotChilledEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNotRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterEligibleProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNonParticipatingProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeForDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'proxyVoter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProxyVoterSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'forVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'againstVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'function',
    inputs: [],
    name: 'addMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'canPropose',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votersToAdd', internalType: 'address[]', type: 'address[]' },
      { name: '_votersToRemove', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'changeManagementGroupMembers',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getLastProposal',
    outputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalDescription',
    outputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalInfo',
    outputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_proposer', internalType: 'address', type: 'address' },
      { name: '_accept', internalType: 'bool', type: 'bool' },
      { name: '_voteStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_voteEndTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_noOfEligibleMembers',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalVotes',
    outputs: [
      { name: '_for', internalType: 'uint256', type: 'uint256' },
      { name: '_against', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      {
        name: '_settings',
        internalType: 'struct IIPollingManagementGroup.ProposalSettings',
        type: 'tuple',
        components: [
          { name: 'accept', internalType: 'bool', type: 'bool' },
          { name: 'votingStartTs', internalType: 'uint256', type: 'uint256' },
          {
            name: 'votingPeriodSeconds',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'thresholdConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'majorityConditionBIPS',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
    name: 'proposeWithSettings',
    outputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'removeMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votingDelaySeconds', internalType: 'uint256', type: 'uint256' },
      {
        name: '_votingPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_proposalFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_addAfterRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_addAfterNotChilledEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterNotRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterEligibleProposals',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterNonParticipatingProposals',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_removeForDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setParameters',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proxyVoter', internalType: 'address', type: 'address' }],
    name: 'setProxyVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      {
        name: '',
        internalType: 'enum IPollingManagementGroup.ProposalState',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIPublicKeyVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiPublicKeyVerifierAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_part1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_part2', internalType: 'bytes32', type: 'bytes32' },
      { name: 'verificationData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verifyPublicKey',
    outputs: [],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIRNat
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iirNatAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      { name: 'disabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ClaimingPermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      { name: 'disabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'DistributionPermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'libraryAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LibraryAddressSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ProjectAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ProjectUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rNatAccount',
        internalType: 'contract IRNatAccount',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RNatAccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsAssigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'recipients',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'amounts',
        internalType: 'uint128[]',
        type: 'uint128[]',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsUnassigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'UnassignedRewardsWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'UnclaimedRewardsUnassigned',
  },
  {
    type: 'function',
    inputs: [
      { name: '_names', internalType: 'string[]', type: 'string[]' },
      { name: '_distributors', internalType: 'address[]', type: 'address[]' },
      {
        name: '_currentMonthDistributionEnabledList',
        internalType: 'bool[]',
        type: 'bool[]',
      },
    ],
    name: 'addProjects',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_projectIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_amountsWei', internalType: 'uint128[]', type: 'uint128[]' },
    ],
    name: 'assignRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimRewards',
    outputs: [
      { name: '_claimedRewardsWei', internalType: 'uint128', type: 'uint128' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'disableClaiming',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'disableDistribution',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amountsWei', internalType: 'uint128[]', type: 'uint128[]' },
    ],
    name: 'distributeRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstMonthStartTs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getBalancesOf',
    outputs: [
      { name: '_wNatBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_rNatBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_lockedBalance', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'getClaimableRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentMonth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'getOwnerRewardsInfo',
    outputs: [
      { name: '_assignedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimable', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectInfo',
    outputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_distributor', internalType: 'address', type: 'address' },
      {
        name: '_currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_distributionDisabled', internalType: 'bool', type: 'bool' },
      { name: '_claimingDisabled', internalType: 'bool', type: 'bool' },
      {
        name: '_totalAssignedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalDistributedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalClaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalUnassignedUnclaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_monthsWithRewards',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getProjectRewardsInfo',
    outputs: [
      { name: '_assignedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_distributedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimedRewards', internalType: 'uint128', type: 'uint128' },
      {
        name: '_unassignedUnclaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getProjectsBasicInfo',
    outputs: [
      { name: '_names', internalType: 'string[]', type: 'string[]' },
      { name: '_claimingDisabled', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getProjectsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getRNatAccount',
    outputs: [
      { name: '', internalType: 'contract IRNatAccount', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardsInfo',
    outputs: [
      {
        name: '_totalAssignableRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalAssignedRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalClaimedRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalWithdrawnRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalWithdrawnAssignableRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalToken',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_months', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'unassignRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_distributor', internalType: 'address', type: 'address' },
      {
        name: '_currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
      },
    ],
    name: 'updateProject',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNat',
    outputs: [{ name: '', internalType: 'contract IWNat', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint128', type: 'uint128' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_wrap', internalType: 'bool', type: 'bool' }],
    name: 'withdrawAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIRNatAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iirNatAccountAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executors',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalTokenTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'wrap', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FundsWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rNat',
        internalType: 'contract IRNat',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockedAmountBurned',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_rNat', internalType: 'contract IRNat', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_firstMonthStartTs', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lockedBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rNat',
    outputs: [{ name: '', internalType: 'contract IRNat', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rNatBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_wNat', internalType: 'contract IWNat', type: 'address' },
      { name: '_months', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'receiveRewards',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'receivedRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_claimSetupManager',
        internalType: 'contract IIClaimSetupManager',
        type: 'address',
      },
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_wNat', internalType: 'contract IWNat', type: 'address' },
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalToken',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_wNat', internalType: 'contract IWNat', type: 'address' },
    ],
    name: 'wNatBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_wNat', internalType: 'contract IWNat', type: 'address' },
      { name: '_firstMonthStartTs', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint128', type: 'uint128' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_wNat', internalType: 'contract IWNat', type: 'address' },
      { name: '_firstMonthStartTs', internalType: 'uint256', type: 'uint256' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'withdrawAll',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'withdrawnRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIRelay
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiRelayAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'protocolId',
        internalType: 'uint8',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'votingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'isSecureRandom',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'merkleRoot',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ProtocolMessageRelayed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'startVotingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'threshold',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'seed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voters',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'weights',
        internalType: 'uint16[]',
        type: 'uint16[]',
        indexed: false,
      },
      {
        name: 'signingPolicyBytes',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'SigningPolicyInitialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SigningPolicyRelayed',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feeCollectionAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRandomNumber',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRandomNumberHistorical',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getVotingRoundId',
    outputs: [
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_relayMessage', internalType: 'bytes', type: 'bytes' },
      {
        name: '_config',
        internalType: 'struct IRelay.RelayGovernanceConfig',
        type: 'tuple',
        components: [
          { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'chainId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'newFeeConfigs',
            internalType: 'struct IRelay.FeeConfig[]',
            type: 'tuple[]',
            components: [
              { name: 'protocolId', internalType: 'uint8', type: 'uint8' },
              { name: 'feeInWei', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'governanceFeeSetup',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'lastInitializedRewardEpochData',
    outputs: [
      {
        name: '_lastInitializedRewardEpoch',
        internalType: 'uint32',
        type: 'uint32',
      },
      {
        name: '_startingVotingRoundIdForLastInitializedRewardEpoch',
        internalType: 'uint32',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'merkleRoots',
    outputs: [
      { name: '_merkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_protocolId', internalType: 'uint256', type: 'uint256' }],
    name: 'protocolFeeInWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'relay',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_signingPolicy',
        internalType: 'struct IIRelay.SigningPolicy',
        type: 'tuple',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          {
            name: 'startVotingRoundId',
            internalType: 'uint32',
            type: 'uint32',
          },
          { name: 'threshold', internalType: 'uint16', type: 'uint16' },
          { name: 'seed', internalType: 'uint256', type: 'uint256' },
          { name: 'voters', internalType: 'address[]', type: 'address[]' },
          { name: 'weights', internalType: 'uint16[]', type: 'uint16[]' },
        ],
      },
    ],
    name: 'setSigningPolicy',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startingVotingRoundIds',
    outputs: [
      {
        name: '_startingVotingRoundId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'toSigningPolicyHash',
    outputs: [
      { name: '_signingPolicyHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
      { name: '_leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: '_proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'verify',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_relayMessage', internalType: 'bytes', type: 'bytes' },
      { name: '_messageHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'verifyCustomSignature',
    outputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIRewardEpochSwitchoverTrigger
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiRewardEpochSwitchoverTriggerAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_currentRewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_currentRewardEpochExpectedEndTs',
        internalType: 'uint64',
        type: 'uint64',
      },
      {
        name: '_rewardEpochDurationSeconds',
        internalType: 'uint64',
        type: 'uint64',
      },
    ],
    name: 'triggerRewardEpochSwitchover',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIRewardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiRewardManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'claimType',
        internalType: 'enum RewardsV2Interface.ClaimType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint120',
        type: 'uint120',
        indexed: false,
      },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RewardClaimsEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RewardClaimsExpired',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwners', internalType: 'address[]', type: 'address[]' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'autoClaim',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'claim',
    outputs: [
      { name: '_rewardAmountWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_msgSender', internalType: 'address', type: 'address' },
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'claimProxy',
    outputs: [
      { name: '_rewardAmountWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'cleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'closeExpiredRewardEpoch',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstClaimableRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getInitialRewardEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getNextClaimableRewardEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochIdToExpireNext',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochIdsWithClaimableRewards',
    outputs: [
      { name: '_startEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_endEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getRewardEpochTotals',
    outputs: [
      { name: '_totalRewardsWei', internalType: 'uint256', type: 'uint256' },
      {
        name: '_totalInflationRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_initialisedRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_claimedRewardsWei', internalType: 'uint256', type: 'uint256' },
      { name: '_burnedRewardsWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getStateOfRewards',
    outputs: [
      {
        name: '_rewardStates',
        internalType: 'struct RewardsV2Interface.RewardState[][]',
        type: 'tuple[][]',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          {
            name: 'claimType',
            internalType: 'enum RewardsV2Interface.ClaimType',
            type: 'uint8',
          },
          { name: 'initialised', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getStateOfRewardsAt',
    outputs: [
      {
        name: '_rewardStates',
        internalType: 'struct RewardsV2Interface.RewardState[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          {
            name: 'claimType',
            internalType: 'enum RewardsV2Interface.ClaimType',
            type: 'uint8',
          },
          { name: 'initialised', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getTotals',
    outputs: [
      { name: '_totalRewardsWei', internalType: 'uint256', type: 'uint256' },
      {
        name: '_totalInflationRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_totalClaimedWei', internalType: 'uint256', type: 'uint256' },
      { name: '_totalBurnedWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_claimType',
        internalType: 'enum RewardsV2Interface.ClaimType',
        type: 'uint8',
      },
    ],
    name: 'getUnclaimedRewardState',
    outputs: [
      {
        name: '_state',
        internalType: 'struct IRewardManager.UnclaimedRewardState',
        type: 'tuple',
        components: [
          { name: 'initialised', internalType: 'bool', type: 'bool' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          { name: 'weight', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'initialiseWeightBasedClaims',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'noOfInitialisedWeightBasedClaims',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_inflation', internalType: 'bool', type: 'bool' },
    ],
    name: 'receiveRewards',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardManagerId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IISubmission
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiSubmissionAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'NewVotingRoundInitiated',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQuality',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQualityAndTimestamp',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_submit1Addresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      {
        name: '_submit2Addresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      {
        name: '_submit3Addresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      {
        name: '_submitSignaturesAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'initNewVotingRound',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit1',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit2',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit3',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_data', internalType: 'bytes', type: 'bytes' }],
    name: 'submitAndPass',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submitSignatures',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIVPContract
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iivpContractAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Delegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegatee',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'votePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Revoke',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'cleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
      { name: '_bips', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateExplicit',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'delegatesOf',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegatesOfAt',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'delegationModeOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'isReplacement',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'ownerToken',
    outputs: [{ name: '', internalType: 'contract IVPToken', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeDelegationAt',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_cleanerContract', internalType: 'address', type: 'address' },
    ],
    name: 'setCleanerContract',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCleanupBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'undelegateAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'undelegateAllExplicit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'undelegatedVotePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'undelegatedVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_fromBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_toBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateAtTokenTransfer',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_balance', internalType: 'uint256', type: 'uint256' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtIgnoringRevocation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIVPToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iivpTokenAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegatees', internalType: 'address[]', type: 'address[]' },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'cleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_bips', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateExplicit',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'delegatesOf',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegatesOfAt',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'delegationModeOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'governanceVotePower',
    outputs: [
      {
        name: '',
        internalType: 'contract IGovernanceVotePower',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'readVotePowerContract',
    outputs: [
      { name: '', internalType: 'contract IVPContractEvents', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeDelegationAt',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_cleanerContract', internalType: 'address', type: 'address' },
    ],
    name: 'setCleanerContract',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCleanupBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_cleanupBlockNumberManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setCleanupBlockNumberManager',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_governanceVotePower',
        internalType: 'contract IIGovernanceVotePower',
        type: 'address',
      },
    ],
    name: 'setGovernanceVotePower',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'undelegateAllExplicit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'undelegatedVotePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'undelegatedVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtIgnoringRevocation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'writeVotePowerContract',
    outputs: [
      { name: '', internalType: 'contract IVPContractEvents', type: 'address' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIVoterRegistrationTrigger
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiVoterRegistrationTriggerAbi = [
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'triggerVoterRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIVoterRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iiVoterRegistryAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'untilRewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BeneficiaryChilled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'publicKeyPart1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'publicKeyPart2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'registrationWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoterRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'VoterRemoved',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'bytes20', type: 'bytes20' },
    ],
    name: 'chilledUntilRewardEpochId',
    outputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createSigningPolicySnapshot',
    outputs: [
      {
        name: '_signingPolicyAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      {
        name: '_normalisedWeights',
        internalType: 'uint16[]',
        type: 'uint16[]',
      },
      { name: '_normalisedWeightsSum', internalType: 'uint16', type: 'uint16' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getNumberOfRegisteredVoters',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'getPublicKeyAndNormalisedWeight',
    outputs: [
      { name: '_publicKeyPart1', internalType: 'bytes32', type: 'bytes32' },
      { name: '_publicKeyPart2', internalType: 'bytes32', type: 'bytes32' },
      { name: '_normalisedWeight', internalType: 'uint16', type: 'uint16' },
      {
        name: '_normalisedWeightsSumOfVotersWithPublicKeys',
        internalType: 'uint16',
        type: 'uint16',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredDelegationAddresses',
    outputs: [
      {
        name: '_delegationAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredNodeIds',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[][]', type: 'bytes20[][]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredPublicKeys',
    outputs: [
      { name: '_parts1', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: '_parts2', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredSigningPolicyAddresses',
    outputs: [
      {
        name: '_signingPolicyAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredSubmitAddresses',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredSubmitSignaturesAddresses',
    outputs: [
      {
        name: '_signingPolicyAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredVoters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredVotersAndNormalisedWeights',
    outputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      {
        name: '_normalisedWeights',
        internalType: 'uint16[]',
        type: 'uint16[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredVotersAndRegistrationWeights',
    outputs: [
      { name: '_voters', internalType: 'address[]', type: 'address[]' },
      {
        name: '_registrationWeights',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterNormalisedWeight',
    outputs: [
      { name: '_normalisedWeight', internalType: 'uint16', type: 'uint16' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterRegistrationWeight',
    outputs: [
      { name: '_registrationWeight', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
      {
        name: '_signingPolicyAddress',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'getVoterWithNormalisedWeight',
    outputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_normalisedWeight', internalType: 'uint16', type: 'uint16' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getWeightsSums',
    outputs: [
      { name: '_weightsSum', internalType: 'uint128', type: 'uint128' },
      { name: '_normalisedWeightsSum', internalType: 'uint16', type: 'uint16' },
      {
        name: '_normalisedWeightsSumOfVotersWithPublicKeys',
        internalType: 'uint16',
        type: 'uint16',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoterRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'maxVoters',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'newSigningPolicyInitializationStartBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'publicKeyRequired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_signature',
        internalType: 'struct IVoterRegistry.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'registerVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setNewSigningPolicyInitializationStartBlockNumber',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'systemRegistration',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IIncreaseManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iIncreaseManagerAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getIncentiveDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IJsonApi
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iJsonApiAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IJsonApiVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iJsonApiVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IJsonApi.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IJsonApi.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IJsonApi.RequestBody',
                type: 'tuple',
                components: [
                  { name: 'url', internalType: 'string', type: 'string' },
                  {
                    name: 'postprocessJq',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'abi_signature',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IJsonApi.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'abi_encoded_data',
                    internalType: 'bytes',
                    type: 'bytes',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyJsonApi',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPChainStakeMirror
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipChainStakeMirrorAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxUpdatesPerBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxUpdatesPerBlockSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'pChainTxId',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'StakeConfirmed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeEnded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'txHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'amountWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerCacheCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerChanged',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_txId', internalType: 'bytes32', type: 'bytes32' },
      { name: '_inputAddress', internalType: 'bytes20', type: 'bytes20' },
    ],
    name: 'isActiveStakeMirrored',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_stakeData',
        internalType: 'struct IPChainStakeMirrorVerifier.PChainStake',
        type: 'tuple',
        components: [
          { name: 'txId', internalType: 'bytes32', type: 'bytes32' },
          { name: 'stakingType', internalType: 'uint8', type: 'uint8' },
          { name: 'inputAddress', internalType: 'bytes20', type: 'bytes20' },
          { name: 'nodeId', internalType: 'bytes20', type: 'bytes20' },
          { name: 'startTime', internalType: 'uint64', type: 'uint64' },
          { name: 'endTime', internalType: 'uint64', type: 'uint64' },
          { name: 'weight', internalType: 'uint64', type: 'uint64' },
        ],
      },
      { name: '_merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'mirrorStake',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'stakesOf',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakesOfAt',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_nodeId', internalType: 'bytes20', type: 'bytes20' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPChainStakeMirrorMultiSigVoting
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipChainStakeMirrorMultiSigVotingAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'nodeIds',
        internalType: 'bytes20[]',
        type: 'bytes20[]',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorValidatorUptimeVoteSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'merkleRoot',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorVoteSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voters',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorVotersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'merkleRoot',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorVotingFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorVotingReset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PChainStakeMirrorVotingThresholdSet',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getEpochConfiguration',
    outputs: [
      { name: '_firstEpochStartTs', internalType: 'uint256', type: 'uint256' },
      {
        name: '_epochDurationSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getMerkleRoot',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getVoters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getVotes',
    outputs: [
      {
        name: '',
        internalType: 'struct IPChainStakeMirrorMultiSigVoting.PChainVotes[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'votes', internalType: 'address[]', type: 'address[]' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getVotingThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'shouldVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
    ],
    name: 'submitValidatorUptimeVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_merkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'submitVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPChainStakeMirrorVerifier
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipChainStakeMirrorVerifierAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPChainVotePower
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ipChainVotePowerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerCacheCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VotePowerChanged',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'batchVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'stakesOf',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakesOfAt',
    outputs: [
      { name: '_nodeIds', internalType: 'bytes20[]', type: 'bytes20[]' },
      { name: '_amounts', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_nodeId', internalType: 'bytes20', type: 'bytes20' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'bytes20', type: 'bytes20' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtCached',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPayment
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPaymentAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPaymentVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPaymentVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IPayment.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IPayment.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IPayment.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'transactionId',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'inUtxo', internalType: 'uint256', type: 'uint256' },
                  { name: 'utxo', internalType: 'uint256', type: 'uint256' },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IPayment.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'blockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'blockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'sourceAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'receivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'intendedReceivingAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'spentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedSpentAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'receivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'intendedReceivedAmount',
                    internalType: 'int256',
                    type: 'int256',
                  },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'oneToOne', internalType: 'bool', type: 'bool' },
                  { name: 'status', internalType: 'uint8', type: 'uint8' },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyPayment',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPollingFtso
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPollingFtsoAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'voteStartTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voteEndTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'eligibleMembers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'FtsoProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMaintainer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MaintainerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'removedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingDelaySeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votingPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposalFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterNotChilledEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNotRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterEligibleProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNonParticipatingProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeForDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'proxyVoter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProxyVoterSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'forVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'againstVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'function',
    inputs: [],
    name: 'addMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'canPropose',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_providersToAdd', internalType: 'address[]', type: 'address[]' },
      {
        name: '_providersToRemove',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'changeManagementGroupMembers',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getLastProposal',
    outputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getManagementGroupMembers',
    outputs: [{ name: '_list', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalDescription',
    outputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalInfo',
    outputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_proposer', internalType: 'address', type: 'address' },
      { name: '_voteStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_voteEndTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_noOfEligibleMembers',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalVotes',
    outputs: [
      { name: '_for', internalType: 'uint256', type: 'uint256' },
      { name: '_against', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'removeMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votingDelaySeconds', internalType: 'uint256', type: 'uint256' },
      {
        name: '_votingPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_proposalFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_addAfterRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_addAfterNotChilledEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterNotRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterEligibleProposals',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_removeAfterNonParticipatingProposals',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_removeForDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setParameters',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proxyVoter', internalType: 'address', type: 'address' }],
    name: 'setProxyVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      {
        name: '',
        internalType: 'enum IPollingFtso.ProposalState',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPollingManagementGroup
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPollingManagementGroupAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newMaintainer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'MaintainerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'addedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'removedMember',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ManagementGroupMemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'proposer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'voteStartTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voteEndTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'eligibleMembers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      { name: 'accept', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ManagementGroupProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'votingDelaySeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'votingPeriodSeconds',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'proposalFeeValueWei',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'addAfterNotChilledEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNotRewardedEpochs',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterEligibleProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeAfterNonParticipatingProposals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'removeForDays',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ProposalCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'proxyVoter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'ProxyVoterSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'proposalId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'support', internalType: 'uint8', type: 'uint8', indexed: false },
      {
        name: 'forVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'againstVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoteCast',
  },
  {
    type: 'function',
    inputs: [],
    name: 'addMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_account', internalType: 'address', type: 'address' }],
    name: 'canPropose',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancel',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_support', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'castVote',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getLastProposal',
    outputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_description', internalType: 'string', type: 'string' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalDescription',
    outputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalInfo',
    outputs: [
      { name: '_description', internalType: 'string', type: 'string' },
      { name: '_proposer', internalType: 'address', type: 'address' },
      { name: '_accept', internalType: 'bool', type: 'bool' },
      { name: '_voteStartTime', internalType: 'uint256', type: 'uint256' },
      { name: '_voteEndTime', internalType: 'uint256', type: 'uint256' },
      {
        name: '_thresholdConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_majorityConditionBIPS',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_noOfEligibleMembers',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalVotes',
    outputs: [
      { name: '_for', internalType: 'uint256', type: 'uint256' },
      { name: '_against', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_proposalId', internalType: 'uint256', type: 'uint256' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'hasVoted',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'isMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_description', internalType: 'string', type: 'string' }],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'removeMember',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proxyVoter', internalType: 'address', type: 'address' }],
    name: 'setProxyVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'state',
    outputs: [
      {
        name: '',
        internalType: 'enum IPollingManagementGroup.ProposalState',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPriceSubmitter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPriceSubmitterAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'submitter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'hash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'HashSubmitted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'epochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'ftsos',
        internalType: 'contract IFtsoGenesis[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'prices',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'random',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PricesRevealed',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsoManager',
    outputs: [
      {
        name: '',
        internalType: 'contract IFtsoManagerGenesis',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsoRegistry',
    outputs: [
      {
        name: '',
        internalType: 'contract IFtsoRegistryGenesis',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_epochId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRandom',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getVoterWhitelister',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_ftsoIndices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_prices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_random', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revealPrices',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_epochId', internalType: 'uint256', type: 'uint256' },
      { name: '_hash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'submitHash',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'voterWhitelistBitmap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRNat
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irNatAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      { name: 'disabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ClaimingPermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectIds',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      { name: 'disabled', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'DistributionPermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ProjectAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'distributor',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ProjectUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rNatAccount',
        internalType: 'contract IRNatAccount',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'RNatAccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsAssigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'recipients',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'amounts',
        internalType: 'uint128[]',
        type: 'uint128[]',
        indexed: false,
      },
    ],
    name: 'RewardsDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'RewardsUnassigned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'UnassignedRewardsWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'projectId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'month',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'UnclaimedRewardsUnassigned',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'claimRewards',
    outputs: [
      { name: '_claimedRewardsWei', internalType: 'uint128', type: 'uint128' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_recipients', internalType: 'address[]', type: 'address[]' },
      { name: '_amountsWei', internalType: 'uint128[]', type: 'uint128[]' },
    ],
    name: 'distributeRewards',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstMonthStartTs',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getBalancesOf',
    outputs: [
      { name: '_wNatBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_rNatBalance', internalType: 'uint256', type: 'uint256' },
      { name: '_lockedBalance', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'getClaimableRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentMonth',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
      { name: '_owner', internalType: 'address', type: 'address' },
    ],
    name: 'getOwnerRewardsInfo',
    outputs: [
      { name: '_assignedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimable', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_projectId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProjectInfo',
    outputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_distributor', internalType: 'address', type: 'address' },
      {
        name: '_currentMonthDistributionEnabled',
        internalType: 'bool',
        type: 'bool',
      },
      { name: '_distributionDisabled', internalType: 'bool', type: 'bool' },
      { name: '_claimingDisabled', internalType: 'bool', type: 'bool' },
      {
        name: '_totalAssignedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalDistributedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalClaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_totalUnassignedUnclaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
      {
        name: '_monthsWithRewards',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_projectId', internalType: 'uint256', type: 'uint256' },
      { name: '_month', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getProjectRewardsInfo',
    outputs: [
      { name: '_assignedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_distributedRewards', internalType: 'uint128', type: 'uint128' },
      { name: '_claimedRewards', internalType: 'uint128', type: 'uint128' },
      {
        name: '_unassignedUnclaimedRewards',
        internalType: 'uint128',
        type: 'uint128',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getProjectsBasicInfo',
    outputs: [
      { name: '_names', internalType: 'string[]', type: 'string[]' },
      { name: '_claimingDisabled', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getProjectsCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'getRNatAccount',
    outputs: [
      { name: '', internalType: 'contract IRNatAccount', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardsInfo',
    outputs: [
      {
        name: '_totalAssignableRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalAssignedRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalClaimedRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalWithdrawnRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_totalWithdrawnAssignableRewards',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_executors', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setClaimExecutors',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'contract IERC20', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExternalToken',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'wNat',
    outputs: [{ name: '', internalType: 'contract IWNat', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_amount', internalType: 'uint128', type: 'uint128' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_wrap', internalType: 'bool', type: 'bool' }],
    name: 'withdrawAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRNatAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const irNatAccountAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'executors',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'ClaimExecutorsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'ExternalTokenTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'wrap', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'FundsWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'rNat',
        internalType: 'contract IRNat',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockedAmountBurned',
  },
  {
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rNat',
    outputs: [{ name: '', internalType: 'contract IRNat', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'receivedRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'withdrawnRewards',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRandomProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRandomProviderAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQuality',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQualityAndTimestamp',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRedemptionTimeExtension
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRedemptionTimeExtensionAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'redemptionPaymentExtensionSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_value', internalType: 'uint256', type: 'uint256' }],
    name: 'setRedemptionPaymentExtensionSeconds',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IReferencedPaymentNonexistence
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iReferencedPaymentNonexistenceAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IReferencedPaymentNonexistenceVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iReferencedPaymentNonexistenceVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IReferencedPaymentNonexistence.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IReferencedPaymentNonexistence.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'deadlineTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'destinationAddressHash',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'amount', internalType: 'uint256', type: 'uint256' },
                  {
                    name: 'standardPaymentReference',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'checkSourceAddresses',
                    internalType: 'bool',
                    type: 'bool',
                  },
                  {
                    name: 'sourceAddressesRoot',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType:
                  'struct IReferencedPaymentNonexistence.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'minimalBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockNumber',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                  {
                    name: 'firstOverflowBlockTimestamp',
                    internalType: 'uint64',
                    type: 'uint64',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyReferencedPaymentNonexistence',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRelay
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRelayAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'protocolId',
        internalType: 'uint8',
        type: 'uint8',
        indexed: true,
      },
      {
        name: 'votingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: true,
      },
      {
        name: 'isSecureRandom',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'merkleRoot',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
    ],
    name: 'ProtocolMessageRelayed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'startVotingRoundId',
        internalType: 'uint32',
        type: 'uint32',
        indexed: false,
      },
      {
        name: 'threshold',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'seed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'voters',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'weights',
        internalType: 'uint16[]',
        type: 'uint16[]',
        indexed: false,
      },
      {
        name: 'signingPolicyBytes',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: false,
      },
    ],
    name: 'SigningPolicyInitialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'SigningPolicyRelayed',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feeCollectionAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRandomNumber',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRandomNumberHistorical',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_timestamp', internalType: 'uint256', type: 'uint256' }],
    name: 'getVotingRoundId',
    outputs: [
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_relayMessage', internalType: 'bytes', type: 'bytes' },
      {
        name: '_config',
        internalType: 'struct IRelay.RelayGovernanceConfig',
        type: 'tuple',
        components: [
          { name: 'descriptionHash', internalType: 'bytes32', type: 'bytes32' },
          { name: 'chainId', internalType: 'uint256', type: 'uint256' },
          {
            name: 'newFeeConfigs',
            internalType: 'struct IRelay.FeeConfig[]',
            type: 'tuple[]',
            components: [
              { name: 'protocolId', internalType: 'uint8', type: 'uint8' },
              { name: 'feeInWei', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'governanceFeeSetup',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isFinalized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'lastInitializedRewardEpochData',
    outputs: [
      {
        name: '_lastInitializedRewardEpoch',
        internalType: 'uint32',
        type: 'uint32',
      },
      {
        name: '_startingVotingRoundIdForLastInitializedRewardEpoch',
        internalType: 'uint32',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'merkleRoots',
    outputs: [
      { name: '_merkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_protocolId', internalType: 'uint256', type: 'uint256' }],
    name: 'protocolFeeInWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'relay',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'startingVotingRoundIds',
    outputs: [
      {
        name: '_startingVotingRoundId',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'toSigningPolicyHash',
    outputs: [
      { name: '_signingPolicyHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_protocolId', internalType: 'uint256', type: 'uint256' },
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
      { name: '_leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: '_proof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'verify',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_relayMessage', internalType: 'bytes', type: 'bytes' },
      { name: '_messageHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'verifyCustomSignature',
    outputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRewardManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRewardManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
      {
        name: 'claimType',
        internalType: 'enum RewardsV2Interface.ClaimType',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint120',
        type: 'uint120',
        indexed: false,
      },
    ],
    name: 'RewardClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RewardClaimsEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RewardClaimsExpired',
  },
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwners', internalType: 'address[]', type: 'address[]' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'autoClaim',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'claim',
    outputs: [
      { name: '_rewardAmountWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'cleanupBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstClaimableRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getInitialRewardEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getNextClaimableRewardEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochIdToExpireNext',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochIdsWithClaimableRewards',
    outputs: [
      { name: '_startEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_endEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getRewardEpochTotals',
    outputs: [
      { name: '_totalRewardsWei', internalType: 'uint256', type: 'uint256' },
      {
        name: '_totalInflationRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: '_initialisedRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_claimedRewardsWei', internalType: 'uint256', type: 'uint256' },
      { name: '_burnedRewardsWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getStateOfRewards',
    outputs: [
      {
        name: '_rewardStates',
        internalType: 'struct RewardsV2Interface.RewardState[][]',
        type: 'tuple[][]',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          {
            name: 'claimType',
            internalType: 'enum RewardsV2Interface.ClaimType',
            type: 'uint8',
          },
          { name: 'initialised', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getStateOfRewardsAt',
    outputs: [
      {
        name: '_rewardStates',
        internalType: 'struct RewardsV2Interface.RewardState[]',
        type: 'tuple[]',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          {
            name: 'claimType',
            internalType: 'enum RewardsV2Interface.ClaimType',
            type: 'uint8',
          },
          { name: 'initialised', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getTotals',
    outputs: [
      { name: '_totalRewardsWei', internalType: 'uint256', type: 'uint256' },
      {
        name: '_totalInflationRewardsWei',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_totalClaimedWei', internalType: 'uint256', type: 'uint256' },
      { name: '_totalBurnedWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      {
        name: '_claimType',
        internalType: 'enum RewardsV2Interface.ClaimType',
        type: 'uint8',
      },
    ],
    name: 'getUnclaimedRewardState',
    outputs: [
      {
        name: '_state',
        internalType: 'struct IRewardManager.UnclaimedRewardState',
        type: 'tuple',
        components: [
          { name: 'initialised', internalType: 'bool', type: 'bool' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          { name: 'weight', internalType: 'uint128', type: 'uint128' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'initialiseWeightBasedClaims',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'noOfInitialisedWeightBasedClaims',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardManagerId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISubmission
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSubmissionAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [],
    name: 'NewVotingRoundInitiated',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandom',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQuality',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRandomWithQualityAndTimestamp',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit1',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit2',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submit3',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_data', internalType: 'bytes', type: 'bytes' }],
    name: 'submitAndPass',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'submitSignatures',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITypeTemplate
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTypeTemplateAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITypeTemplateVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTypeTemplateVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct ITypeTemplate.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct ITypeTemplate.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct ITypeTemplate.RequestBody',
                type: 'tuple',
                components: [
                  {
                    name: 'bytes32Field',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  { name: 'boolField', internalType: 'bool', type: 'bool' },
                  {
                    name: 'requestSubstruct1',
                    internalType: 'struct ITypeTemplate.RequestSubstruct1',
                    type: 'tuple',
                    components: [
                      {
                        name: 'templateStructField',
                        internalType: 'bytes32',
                        type: 'bytes32',
                      },
                      {
                        name: 'uintArrayField',
                        internalType: 'uint256[]',
                        type: 'uint256[]',
                      },
                      {
                        name: 'boolArrayField',
                        internalType: 'bool[]',
                        type: 'bool[]',
                      },
                    ],
                  },
                  {
                    name: 'requestSubstruct2Array',
                    internalType: 'struct ITypeTemplate.RequestSubstruct2[]',
                    type: 'tuple[]',
                    components: [
                      {
                        name: 'templateStructField',
                        internalType: 'bytes32',
                        type: 'bytes32',
                      },
                      {
                        name: 'intArrayField',
                        internalType: 'int256[]',
                        type: 'int256[]',
                      },
                      {
                        name: 'boolArrayField',
                        internalType: 'bool[]',
                        type: 'bool[]',
                      },
                    ],
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct ITypeTemplate.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'templateResponseField',
                    internalType: 'bytes32',
                    type: 'bytes32',
                  },
                  {
                    name: 'responseSubstruct1Array',
                    internalType: 'struct ITypeTemplate.ResponseSubstruct1[]',
                    type: 'tuple[]',
                    components: [
                      {
                        name: 'templateStructField',
                        internalType: 'bytes32',
                        type: 'bytes32',
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyTypeTemplate',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVPContractEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ivpContractEventsAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'priorVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'newVotePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Delegate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'delegator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'delegatee',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'votePower',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'blockNumber',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Revoke',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVPToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ivpTokenAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_delegatees', internalType: 'address[]', type: 'address[]' },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchDelegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_bips', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegate',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegateExplicit',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'delegatesOf',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'delegatesOfAt',
    outputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_bips', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_count', internalType: 'uint256', type: 'uint256' },
      { name: '_delegationMode', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_who', internalType: 'address', type: 'address' }],
    name: 'delegationModeOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'governanceVotePower',
    outputs: [
      {
        name: '',
        internalType: 'contract IGovernanceVotePower',
        type: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'readVotePowerContract',
    outputs: [
      { name: '', internalType: 'contract IVPContractEvents', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_who', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeDelegationAt',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalSupplyAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'totalVotePower',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'totalVotePowerAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'undelegateAll',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_delegateAddresses',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
    name: 'undelegateAllExplicit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'undelegatedVotePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'undelegatedVotePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
    ],
    name: 'votePowerFromTo',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerFromToAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'votePowerOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAt',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePowerOfAtIgnoringRevocation',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'writeVotePowerContract',
    outputs: [
      { name: '', internalType: 'contract IVPContractEvents', type: 'address' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IValidatorRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iValidatorRegistryAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'dataProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'nodeId',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'pChainPublicKey',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'DataProviderRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'dataProvider',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DataProviderUnregistered',
  },
  {
    type: 'function',
    inputs: [{ name: '_nodeId', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getDataProviderForNodeId',
    outputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_pChainPublicKey', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getDataProviderForPChainPublicKey',
    outputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_dataProvider', internalType: 'address', type: 'address' },
    ],
    name: 'getDataProviderInfo',
    outputs: [
      { name: '_nodeId', internalType: 'string', type: 'string' },
      { name: '_pChainPublicKey', internalType: 'string', type: 'string' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_nodeId', internalType: 'string', type: 'string' },
      { name: '_pChainPublicKey', internalType: 'string', type: 'string' },
    ],
    name: 'registerDataProvider',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [],
    name: 'unregisterDataProvider',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IValidatorRewardOffersManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iValidatorRewardOffersManagerAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'InflationRewardsOffered',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVoterPreRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVoterPreRegistryAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'VoterPreRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'VoterRegistrationFailed',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getPreRegisteredVoters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_voter', internalType: 'address', type: 'address' },
    ],
    name: 'isVoterPreRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_signature',
        internalType: 'struct IVoterRegistry.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'preRegisterVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVoterRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVoterRegistryAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beneficiary',
        internalType: 'bytes20',
        type: 'bytes20',
        indexed: true,
      },
      {
        name: 'untilRewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BeneficiaryChilled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: true,
      },
      {
        name: 'signingPolicyAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'submitAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'submitSignaturesAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'publicKeyPart1',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'publicKeyPart2',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: false,
      },
      {
        name: 'registrationWeight',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoterRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardEpochId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'VoterRemoved',
  },
  {
    type: 'function',
    inputs: [
      { name: '_beneficiary', internalType: 'bytes20', type: 'bytes20' },
    ],
    name: 'chilledUntilRewardEpochId',
    outputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getNumberOfRegisteredVoters',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRegisteredVoters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isVoterRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'maxVoters',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'newSigningPolicyInitializationStartBlockNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'publicKeyRequired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      {
        name: '_signature',
        internalType: 'struct IVoterRegistry.Signature',
        type: 'tuple',
        components: [
          { name: 'v', internalType: 'uint8', type: 'uint8' },
          { name: 'r', internalType: 'bytes32', type: 'bytes32' },
          { name: 's', internalType: 'bytes32', type: 'bytes32' },
        ],
      },
    ],
    name: 'registerVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IVoterWhitelister
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iVoterWhitelisterAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'untilRewardEpoch',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoterChilled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'ftsoIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoterRemovedFromWhitelist',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'ftsoIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'VoterWhitelisted',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'chilledUntilRewardEpoch',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'defaultMaxVotersForFtso',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getFtsoWhitelistedPriceProviders',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_symbol', internalType: 'string', type: 'string' }],
    name: 'getFtsoWhitelistedPriceProvidersBySymbol',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'maxVotersForFtso',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'requestFullVoterWhitelisting',
    outputs: [
      {
        name: '_supportedIndices',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_success', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_ftsoIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'requestWhitelistingVoter',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWNat
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iwNatAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_recipient', internalType: 'address', type: 'address' }],
    name: 'depositTo',
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawFrom',
    outputs: [],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWNatDelegationFee
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iwNatDelegationFeeAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'voter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'value', internalType: 'uint16', type: 'uint16', indexed: false },
      {
        name: 'validFromEpochId',
        internalType: 'uint24',
        type: 'uint24',
        indexed: false,
      },
    ],
    name: 'FeePercentageChanged',
  },
  {
    type: 'function',
    inputs: [],
    name: 'defaultFeePercentageBIPS',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'feePercentageUpdateOffset',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getVoterCurrentFeePercentage',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_voter', internalType: 'address', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoterFeePercentage',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_voter', internalType: 'address', type: 'address' }],
    name: 'getVoterScheduledFeePercentageChanges',
    outputs: [
      {
        name: '_feePercentageBIPS',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      {
        name: '_validFromEpochId',
        internalType: 'uint256[]',
        type: 'uint256[]',
      },
      { name: '_fixed', internalType: 'bool[]', type: 'bool[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feePercentageBIPS', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'setVoterFeePercentage',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'nonpayable',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWeb2Json
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iWeb2JsonAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWeb2JsonVerification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iWeb2JsonVerificationAbi = [
  {
    type: 'function',
    inputs: [
      {
        name: '_proof',
        internalType: 'struct IWeb2Json.Proof',
        type: 'tuple',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'data',
            internalType: 'struct IWeb2Json.Response',
            type: 'tuple',
            components: [
              {
                name: 'attestationType',
                internalType: 'bytes32',
                type: 'bytes32',
              },
              { name: 'sourceId', internalType: 'bytes32', type: 'bytes32' },
              { name: 'votingRound', internalType: 'uint64', type: 'uint64' },
              {
                name: 'lowestUsedTimestamp',
                internalType: 'uint64',
                type: 'uint64',
              },
              {
                name: 'requestBody',
                internalType: 'struct IWeb2Json.RequestBody',
                type: 'tuple',
                components: [
                  { name: 'url', internalType: 'string', type: 'string' },
                  {
                    name: 'httpMethod',
                    internalType: 'string',
                    type: 'string',
                  },
                  { name: 'headers', internalType: 'string', type: 'string' },
                  {
                    name: 'queryParams',
                    internalType: 'string',
                    type: 'string',
                  },
                  { name: 'body', internalType: 'string', type: 'string' },
                  {
                    name: 'postProcessJq',
                    internalType: 'string',
                    type: 'string',
                  },
                  {
                    name: 'abiSignature',
                    internalType: 'string',
                    type: 'string',
                  },
                ],
              },
              {
                name: 'responseBody',
                internalType: 'struct IWeb2Json.ResponseBody',
                type: 'tuple',
                components: [
                  {
                    name: 'abiEncodedData',
                    internalType: 'bytes',
                    type: 'bytes',
                  },
                ],
              },
            ],
          },
        ],
      },
    ],
    name: 'verifyWeb2Json',
    outputs: [{ name: '_proved', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ProtocolsV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const protocolsV2InterfaceAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'firstRewardEpochStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'firstVotingRoundStartTs',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentRewardEpochId',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getCurrentVotingEpochId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getStartVotingRoundId',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardEpochId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVotePowerBlock',
    outputs: [
      { name: '_votePowerBlock', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'rewardEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'votingEpochDurationSeconds',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RandomNumberV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const randomNumberV2InterfaceAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'getRandomNumber',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_votingRoundId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRandomNumberHistorical',
    outputs: [
      { name: '_randomNumber', internalType: 'uint256', type: 'uint256' },
      { name: '_isSecureRandom', internalType: 'bool', type: 'bool' },
      { name: '_randomTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RedemptionRequestInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const redemptionRequestInfoAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RedemptionTicketInfo
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const redemptionTicketInfoAbi = [] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RewardsV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const rewardsV2InterfaceAbi = [
  {
    type: 'function',
    inputs: [],
    name: 'active',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
      { name: '_recipient', internalType: 'address payable', type: 'address' },
      { name: '_rewardEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_wrap', internalType: 'bool', type: 'bool' },
      {
        name: '_proofs',
        internalType: 'struct RewardsV2Interface.RewardClaimWithProof[]',
        type: 'tuple[]',
        components: [
          { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct RewardsV2Interface.RewardClaim',
            type: 'tuple',
            components: [
              { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
              { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
              { name: 'amount', internalType: 'uint120', type: 'uint120' },
              {
                name: 'claimType',
                internalType: 'enum RewardsV2Interface.ClaimType',
                type: 'uint8',
              },
            ],
          },
        ],
      },
    ],
    name: 'claim',
    outputs: [
      { name: '_rewardAmountWei', internalType: 'uint256', type: 'uint256' },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getNextClaimableRewardEpochId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getRewardEpochIdsWithClaimableRewards',
    outputs: [
      { name: '_startEpochId', internalType: 'uint24', type: 'uint24' },
      { name: '_endEpochId', internalType: 'uint24', type: 'uint24' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_rewardOwner', internalType: 'address', type: 'address' },
    ],
    name: 'getStateOfRewards',
    outputs: [
      {
        name: '_rewardStates',
        internalType: 'struct RewardsV2Interface.RewardState[][]',
        type: 'tuple[][]',
        components: [
          { name: 'rewardEpochId', internalType: 'uint24', type: 'uint24' },
          { name: 'beneficiary', internalType: 'bytes20', type: 'bytes20' },
          { name: 'amount', internalType: 'uint120', type: 'uint120' },
          {
            name: 'claimType',
            internalType: 'enum RewardsV2Interface.ClaimType',
            type: 'uint8',
          },
          { name: 'initialised', internalType: 'bool', type: 'bool' },
        ],
      },
    ],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestFtsoV2Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testFtsoV2InterfaceAbi = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldFeedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
      {
        name: 'newFeedId',
        internalType: 'bytes21',
        type: 'bytes21',
        indexed: true,
      },
    ],
    name: 'FeedIdChanged',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'calculateFeeById',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'calculateFeeByIds',
    outputs: [{ name: '_fee', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedById',
    outputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'int8', type: 'int8' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [{ name: '_feedId', internalType: 'bytes21', type: 'bytes21' }],
    name: 'getFeedByIdInWei',
    outputs: [
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFeedIdChanges',
    outputs: [
      {
        name: '_feedIdChanges',
        internalType: 'struct TestFtsoV2Interface.FeedIdChange[]',
        type: 'tuple[]',
        components: [
          { name: 'oldFeedId', internalType: 'bytes21', type: 'bytes21' },
          { name: 'newFeedId', internalType: 'bytes21', type: 'bytes21' },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'getFeedsById',
    outputs: [
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_decimals', internalType: 'int8[]', type: 'int8[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    name: 'getFeedsByIdInWei',
    outputs: [
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_timestamp', internalType: 'uint64', type: 'uint64' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getFtsoProtocolId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [],
    name: 'getSupportedFeedIds',
    outputs: [
      { name: '_feedIds', internalType: 'bytes21[]', type: 'bytes21[]' },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    inputs: [
      {
        name: '_feedData',
        internalType: 'struct TestFtsoV2Interface.FeedDataWithProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'body',
            internalType: 'struct TestFtsoV2Interface.FeedData',
            type: 'tuple',
            components: [
              { name: 'votingRoundId', internalType: 'uint32', type: 'uint32' },
              { name: 'id', internalType: 'bytes21', type: 'bytes21' },
              { name: 'value', internalType: 'int32', type: 'int32' },
              { name: 'turnoutBIPS', internalType: 'uint16', type: 'uint16' },
              { name: 'decimals', internalType: 'int8', type: 'int8' },
            ],
          },
        ],
      },
    ],
    name: 'verifyFeedData',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    stateMutability: 'view',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__
 */
export const useReadFtsoV2Interface = /*#__PURE__*/ createUseReadContract({
  abi: ftsoV2InterfaceAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"calculateFeeById"`
 */
export const useReadFtsoV2InterfaceCalculateFeeById =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'calculateFeeById',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"calculateFeeByIds"`
 */
export const useReadFtsoV2InterfaceCalculateFeeByIds =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'calculateFeeByIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedIdChanges"`
 */
export const useReadFtsoV2InterfaceGetFeedIdChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedIdChanges',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFtsoProtocolId"`
 */
export const useReadFtsoV2InterfaceGetFtsoProtocolId =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFtsoProtocolId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getSupportedFeedIds"`
 */
export const useReadFtsoV2InterfaceGetSupportedFeedIds =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getSupportedFeedIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"verifyFeedData"`
 */
export const useReadFtsoV2InterfaceVerifyFeedData =
  /*#__PURE__*/ createUseReadContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'verifyFeedData',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__
 */
export const useWriteFtsoV2Interface = /*#__PURE__*/ createUseWriteContract({
  abi: ftsoV2InterfaceAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedById"`
 */
export const useWriteFtsoV2InterfaceGetFeedById =
  /*#__PURE__*/ createUseWriteContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedById',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedByIdInWei"`
 */
export const useWriteFtsoV2InterfaceGetFeedByIdInWei =
  /*#__PURE__*/ createUseWriteContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedByIdInWei',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsById"`
 */
export const useWriteFtsoV2InterfaceGetFeedsById =
  /*#__PURE__*/ createUseWriteContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedsById',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsByIdInWei"`
 */
export const useWriteFtsoV2InterfaceGetFeedsByIdInWei =
  /*#__PURE__*/ createUseWriteContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedsByIdInWei',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__
 */
export const useSimulateFtsoV2Interface =
  /*#__PURE__*/ createUseSimulateContract({ abi: ftsoV2InterfaceAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedById"`
 */
export const useSimulateFtsoV2InterfaceGetFeedById =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedById',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedByIdInWei"`
 */
export const useSimulateFtsoV2InterfaceGetFeedByIdInWei =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedByIdInWei',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsById"`
 */
export const useSimulateFtsoV2InterfaceGetFeedsById =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedsById',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsByIdInWei"`
 */
export const useSimulateFtsoV2InterfaceGetFeedsByIdInWei =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ftsoV2InterfaceAbi,
    functionName: 'getFeedsByIdInWei',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__
 */
export const useWatchFtsoV2InterfaceEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: ftsoV2InterfaceAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ftsoV2InterfaceAbi}__ and `eventName` set to `"FeedIdChanged"`
 */
export const useWatchFtsoV2InterfaceFeedIdChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ftsoV2InterfaceAbi,
    eventName: 'FeedIdChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAddressBinderAbi}__
 */
export const useReadIAddressBinder = /*#__PURE__*/ createUseReadContract({
  abi: iAddressBinderAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"cAddressToPAddress"`
 */
export const useReadIAddressBinderCAddressToPAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAddressBinderAbi,
    functionName: 'cAddressToPAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"pAddressToCAddress"`
 */
export const useReadIAddressBinderPAddressToCAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAddressBinderAbi,
    functionName: 'pAddressToCAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAddressBinderAbi}__
 */
export const useWriteIAddressBinder = /*#__PURE__*/ createUseWriteContract({
  abi: iAddressBinderAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"registerAddresses"`
 */
export const useWriteIAddressBinderRegisterAddresses =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAddressBinderAbi,
    functionName: 'registerAddresses',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useWriteIAddressBinderRegisterPublicKey =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAddressBinderAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAddressBinderAbi}__
 */
export const useSimulateIAddressBinder =
  /*#__PURE__*/ createUseSimulateContract({ abi: iAddressBinderAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"registerAddresses"`
 */
export const useSimulateIAddressBinderRegisterAddresses =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAddressBinderAbi,
    functionName: 'registerAddresses',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAddressBinderAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useSimulateIAddressBinderRegisterPublicKey =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAddressBinderAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAddressBinderAbi}__
 */
export const useWatchIAddressBinderEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iAddressBinderAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAddressBinderAbi}__ and `eventName` set to `"AddressesRegistered"`
 */
export const useWatchIAddressBinderAddressesRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAddressBinderAbi,
    eventName: 'AddressesRegistered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAddressValidityVerificationAbi}__
 */
export const useReadIAddressValidityVerification =
  /*#__PURE__*/ createUseReadContract({ abi: iAddressValidityVerificationAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAddressValidityVerificationAbi}__ and `functionName` set to `"verifyAddressValidity"`
 */
export const useReadIAddressValidityVerificationVerifyAddressValidity =
  /*#__PURE__*/ createUseReadContract({
    abi: iAddressValidityVerificationAbi,
    functionName: 'verifyAddressValidity',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__
 */
export const useReadIAgentAlwaysAllowedMinters =
  /*#__PURE__*/ createUseReadContract({ abi: iAgentAlwaysAllowedMintersAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__ and `functionName` set to `"alwaysAllowedMintersForAgent"`
 */
export const useReadIAgentAlwaysAllowedMintersAlwaysAllowedMintersForAgent =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentAlwaysAllowedMintersAbi,
    functionName: 'alwaysAllowedMintersForAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__
 */
export const useWriteIAgentAlwaysAllowedMinters =
  /*#__PURE__*/ createUseWriteContract({ abi: iAgentAlwaysAllowedMintersAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__ and `functionName` set to `"addAlwaysAllowedMinterForAgent"`
 */
export const useWriteIAgentAlwaysAllowedMintersAddAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAgentAlwaysAllowedMintersAbi,
    functionName: 'addAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__ and `functionName` set to `"removeAlwaysAllowedMinterForAgent"`
 */
export const useWriteIAgentAlwaysAllowedMintersRemoveAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAgentAlwaysAllowedMintersAbi,
    functionName: 'removeAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__
 */
export const useSimulateIAgentAlwaysAllowedMinters =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAgentAlwaysAllowedMintersAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__ and `functionName` set to `"addAlwaysAllowedMinterForAgent"`
 */
export const useSimulateIAgentAlwaysAllowedMintersAddAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAgentAlwaysAllowedMintersAbi,
    functionName: 'addAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentAlwaysAllowedMintersAbi}__ and `functionName` set to `"removeAlwaysAllowedMinterForAgent"`
 */
export const useSimulateIAgentAlwaysAllowedMintersRemoveAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAgentAlwaysAllowedMintersAbi,
    functionName: 'removeAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__
 */
export const useReadIAgentOwnerRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iAgentOwnerRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getAgentDescription"`
 */
export const useReadIAgentOwnerRegistryGetAgentDescription =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getAgentDescription',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getAgentIconUrl"`
 */
export const useReadIAgentOwnerRegistryGetAgentIconUrl =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getAgentIconUrl',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getAgentName"`
 */
export const useReadIAgentOwnerRegistryGetAgentName =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getAgentName',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getAgentTermsOfUseUrl"`
 */
export const useReadIAgentOwnerRegistryGetAgentTermsOfUseUrl =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getAgentTermsOfUseUrl',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getManagementAddress"`
 */
export const useReadIAgentOwnerRegistryGetManagementAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getManagementAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"getWorkAddress"`
 */
export const useReadIAgentOwnerRegistryGetWorkAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'getWorkAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `functionName` set to `"isWhitelisted"`
 */
export const useReadIAgentOwnerRegistryIsWhitelisted =
  /*#__PURE__*/ createUseReadContract({
    abi: iAgentOwnerRegistryAbi,
    functionName: 'isWhitelisted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__
 */
export const useWatchIAgentOwnerRegistryEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iAgentOwnerRegistryAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `eventName` set to `"AgentDataChanged"`
 */
export const useWatchIAgentOwnerRegistryAgentDataChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentOwnerRegistryAbi,
    eventName: 'AgentDataChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `eventName` set to `"Whitelisted"`
 */
export const useWatchIAgentOwnerRegistryWhitelistedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentOwnerRegistryAbi,
    eventName: 'Whitelisted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `eventName` set to `"WhitelistingRevoked"`
 */
export const useWatchIAgentOwnerRegistryWhitelistingRevokedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentOwnerRegistryAbi,
    eventName: 'WhitelistingRevoked',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentOwnerRegistryAbi}__ and `eventName` set to `"WorkAddressChanged"`
 */
export const useWatchIAgentOwnerRegistryWorkAddressChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentOwnerRegistryAbi,
    eventName: 'WorkAddressChanged',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentPingAbi}__
 */
export const useWriteIAgentPing = /*#__PURE__*/ createUseWriteContract({
  abi: iAgentPingAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentPingAbi}__ and `functionName` set to `"agentPing"`
 */
export const useWriteIAgentPingAgentPing = /*#__PURE__*/ createUseWriteContract(
  { abi: iAgentPingAbi, functionName: 'agentPing' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAgentPingAbi}__ and `functionName` set to `"agentPingResponse"`
 */
export const useWriteIAgentPingAgentPingResponse =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAgentPingAbi,
    functionName: 'agentPingResponse',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentPingAbi}__
 */
export const useSimulateIAgentPing = /*#__PURE__*/ createUseSimulateContract({
  abi: iAgentPingAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentPingAbi}__ and `functionName` set to `"agentPing"`
 */
export const useSimulateIAgentPingAgentPing =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAgentPingAbi,
    functionName: 'agentPing',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAgentPingAbi}__ and `functionName` set to `"agentPingResponse"`
 */
export const useSimulateIAgentPingAgentPingResponse =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAgentPingAbi,
    functionName: 'agentPingResponse',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentPingAbi}__
 */
export const useWatchIAgentPingEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iAgentPingAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentPingAbi}__ and `eventName` set to `"AgentPing"`
 */
export const useWatchIAgentPingAgentPingEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentPingAbi,
    eventName: 'AgentPing',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAgentPingAbi}__ and `eventName` set to `"AgentPingResponse"`
 */
export const useWatchIAgentPingAgentPingResponseEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAgentPingAbi,
    eventName: 'AgentPingResponse',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__
 */
export const useReadIAssetManager = /*#__PURE__*/ createUseReadContract({
  abi: iAssetManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"agentRedemptionQueue"`
 */
export const useReadIAssetManagerAgentRedemptionQueue =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'agentRedemptionQueue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"alwaysAllowedMintersForAgent"`
 */
export const useReadIAssetManagerAlwaysAllowedMintersForAgent =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'alwaysAllowedMintersForAgent',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"assetManagerController"`
 */
export const useReadIAssetManagerAssetManagerController =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'assetManagerController',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"assetMintingDecimals"`
 */
export const useReadIAssetManagerAssetMintingDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'assetMintingDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"assetMintingGranularityUBA"`
 */
export const useReadIAssetManagerAssetMintingGranularityUba =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'assetMintingGranularityUBA',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"collateralReservationFee"`
 */
export const useReadIAssetManagerCollateralReservationFee =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'collateralReservationFee',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"collateralReservationInfo"`
 */
export const useReadIAssetManagerCollateralReservationInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'collateralReservationInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"controllerAttached"`
 */
export const useReadIAssetManagerControllerAttached =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'controllerAttached',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"coreVaultAvailableAmount"`
 */
export const useReadIAssetManagerCoreVaultAvailableAmount =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'coreVaultAvailableAmount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"currentUnderlyingBlock"`
 */
export const useReadIAssetManagerCurrentUnderlyingBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'currentUnderlyingBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"emergencyPaused"`
 */
export const useReadIAssetManagerEmergencyPaused =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'emergencyPaused',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"emergencyPausedUntil"`
 */
export const useReadIAssetManagerEmergencyPausedUntil =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'emergencyPausedUntil',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"fAsset"`
 */
export const useReadIAssetManagerFAsset = /*#__PURE__*/ createUseReadContract({
  abi: iAssetManagerAbi,
  functionName: 'fAsset',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"facetAddress"`
 */
export const useReadIAssetManagerFacetAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'facetAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"facetAddresses"`
 */
export const useReadIAssetManagerFacetAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'facetAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"facetFunctionSelectors"`
 */
export const useReadIAssetManagerFacetFunctionSelectors =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'facetFunctionSelectors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"facets"`
 */
export const useReadIAssetManagerFacets = /*#__PURE__*/ createUseReadContract({
  abi: iAssetManagerAbi,
  functionName: 'facets',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentFullPoolCollateral"`
 */
export const useReadIAssetManagerGetAgentFullPoolCollateral =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentFullPoolCollateral',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentFullVaultCollateral"`
 */
export const useReadIAssetManagerGetAgentFullVaultCollateral =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentFullVaultCollateral',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentInfo"`
 */
export const useReadIAssetManagerGetAgentInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentLiquidationFactorsAndMaxAmount"`
 */
export const useReadIAssetManagerGetAgentLiquidationFactorsAndMaxAmount =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentLiquidationFactorsAndMaxAmount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentMinPoolCollateralRatioBIPS"`
 */
export const useReadIAssetManagerGetAgentMinPoolCollateralRatioBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentMinPoolCollateralRatioBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentMinVaultCollateralRatioBIPS"`
 */
export const useReadIAssetManagerGetAgentMinVaultCollateralRatioBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentMinVaultCollateralRatioBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentSetting"`
 */
export const useReadIAssetManagerGetAgentSetting =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentSetting',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentVaultCollateralToken"`
 */
export const useReadIAssetManagerGetAgentVaultCollateralToken =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentVaultCollateralToken',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAgentVaultOwner"`
 */
export const useReadIAssetManagerGetAgentVaultOwner =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAgentVaultOwner',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAllAgents"`
 */
export const useReadIAssetManagerGetAllAgents =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAllAgents',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAvailableAgentsDetailedList"`
 */
export const useReadIAssetManagerGetAvailableAgentsDetailedList =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAvailableAgentsDetailedList',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getAvailableAgentsList"`
 */
export const useReadIAssetManagerGetAvailableAgentsList =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getAvailableAgentsList',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCollateralPool"`
 */
export const useReadIAssetManagerGetCollateralPool =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCollateralPool',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCollateralType"`
 */
export const useReadIAssetManagerGetCollateralType =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCollateralType',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCollateralTypes"`
 */
export const useReadIAssetManagerGetCollateralTypes =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCollateralTypes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultManager"`
 */
export const useReadIAssetManagerGetCoreVaultManager =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultManager',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultMinimumAmountLeftBIPS"`
 */
export const useReadIAssetManagerGetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultMinimumRedeemLots"`
 */
export const useReadIAssetManagerGetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultNativeAddress"`
 */
export const useReadIAssetManagerGetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultRedemptionFeeBIPS"`
 */
export const useReadIAssetManagerGetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getCoreVaultTransferTimeExtensionSeconds"`
 */
export const useReadIAssetManagerGetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"getSettings"`
 */
export const useReadIAssetManagerGetSettings =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'getSettings',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"isPoolTokenSuffixReserved"`
 */
export const useReadIAssetManagerIsPoolTokenSuffixReserved =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'isPoolTokenSuffixReserved',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"lotSize"`
 */
export const useReadIAssetManagerLotSize = /*#__PURE__*/ createUseReadContract({
  abi: iAssetManagerAbi,
  functionName: 'lotSize',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"maximumTransferToCoreVault"`
 */
export const useReadIAssetManagerMaximumTransferToCoreVault =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'maximumTransferToCoreVault',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"mintingPaused"`
 */
export const useReadIAssetManagerMintingPaused =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'mintingPaused',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"priceReader"`
 */
export const useReadIAssetManagerPriceReader =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'priceReader',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redemptionPaymentExtensionSeconds"`
 */
export const useReadIAssetManagerRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'redemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redemptionQueue"`
 */
export const useReadIAssetManagerRedemptionQueue =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'redemptionQueue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redemptionRequestInfo"`
 */
export const useReadIAssetManagerRedemptionRequestInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'redemptionRequestInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"supportsInterface"`
 */
export const useReadIAssetManagerSupportsInterface =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'supportsInterface',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"transfersEmergencyPaused"`
 */
export const useReadIAssetManagerTransfersEmergencyPaused =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'transfersEmergencyPaused',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"transfersEmergencyPausedUntil"`
 */
export const useReadIAssetManagerTransfersEmergencyPausedUntil =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerAbi,
    functionName: 'transfersEmergencyPausedUntil',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__
 */
export const useWriteIAssetManager = /*#__PURE__*/ createUseWriteContract({
  abi: iAssetManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"addAlwaysAllowedMinterForAgent"`
 */
export const useWriteIAssetManagerAddAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'addAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"agentPing"`
 */
export const useWriteIAssetManagerAgentPing =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'agentPing',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"agentPingResponse"`
 */
export const useWriteIAssetManagerAgentPingResponse =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'agentPingResponse',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceAgentPoolTokenRedemption"`
 */
export const useWriteIAssetManagerAnnounceAgentPoolTokenRedemption =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceAgentPoolTokenRedemption',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceAgentSettingUpdate"`
 */
export const useWriteIAssetManagerAnnounceAgentSettingUpdate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceAgentSettingUpdate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceDestroyAgent"`
 */
export const useWriteIAssetManagerAnnounceDestroyAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceDestroyAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceExitAvailableAgentList"`
 */
export const useWriteIAssetManagerAnnounceExitAvailableAgentList =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceExitAvailableAgentList',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceUnderlyingWithdrawal"`
 */
export const useWriteIAssetManagerAnnounceUnderlyingWithdrawal =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceVaultCollateralWithdrawal"`
 */
export const useWriteIAssetManagerAnnounceVaultCollateralWithdrawal =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'announceVaultCollateralWithdrawal',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"cancelReturnFromCoreVault"`
 */
export const useWriteIAssetManagerCancelReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'cancelReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"cancelUnderlyingWithdrawal"`
 */
export const useWriteIAssetManagerCancelUnderlyingWithdrawal =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'cancelUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmRedemptionPayment"`
 */
export const useWriteIAssetManagerConfirmRedemptionPayment =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmRedemptionPayment',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmReturnFromCoreVault"`
 */
export const useWriteIAssetManagerConfirmReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmTopupPayment"`
 */
export const useWriteIAssetManagerConfirmTopupPayment =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmTopupPayment',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmUnderlyingWithdrawal"`
 */
export const useWriteIAssetManagerConfirmUnderlyingWithdrawal =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"convertDustToTicket"`
 */
export const useWriteIAssetManagerConvertDustToTicket =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'convertDustToTicket',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"createAgentVault"`
 */
export const useWriteIAssetManagerCreateAgentVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'createAgentVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"destroyAgent"`
 */
export const useWriteIAssetManagerDestroyAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'destroyAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"doublePaymentChallenge"`
 */
export const useWriteIAssetManagerDoublePaymentChallenge =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'doublePaymentChallenge',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"endLiquidation"`
 */
export const useWriteIAssetManagerEndLiquidation =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'endLiquidation',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"executeAgentSettingUpdate"`
 */
export const useWriteIAssetManagerExecuteAgentSettingUpdate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'executeAgentSettingUpdate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"executeMinting"`
 */
export const useWriteIAssetManagerExecuteMinting =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'executeMinting',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"exitAvailableAgentList"`
 */
export const useWriteIAssetManagerExitAvailableAgentList =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'exitAvailableAgentList',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"finishRedemptionWithoutPayment"`
 */
export const useWriteIAssetManagerFinishRedemptionWithoutPayment =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'finishRedemptionWithoutPayment',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"freeBalanceNegativeChallenge"`
 */
export const useWriteIAssetManagerFreeBalanceNegativeChallenge =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'freeBalanceNegativeChallenge',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"illegalPaymentChallenge"`
 */
export const useWriteIAssetManagerIllegalPaymentChallenge =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'illegalPaymentChallenge',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"liquidate"`
 */
export const useWriteIAssetManagerLiquidate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'liquidate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"makeAgentAvailable"`
 */
export const useWriteIAssetManagerMakeAgentAvailable =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'makeAgentAvailable',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"mintFromFreeUnderlying"`
 */
export const useWriteIAssetManagerMintFromFreeUnderlying =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'mintFromFreeUnderlying',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"mintingPaymentDefault"`
 */
export const useWriteIAssetManagerMintingPaymentDefault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'mintingPaymentDefault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redeem"`
 */
export const useWriteIAssetManagerRedeem = /*#__PURE__*/ createUseWriteContract(
  { abi: iAssetManagerAbi, functionName: 'redeem' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redeemFromCoreVault"`
 */
export const useWriteIAssetManagerRedeemFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'redeemFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redemptionPaymentDefault"`
 */
export const useWriteIAssetManagerRedemptionPaymentDefault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'redemptionPaymentDefault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"rejectInvalidRedemption"`
 */
export const useWriteIAssetManagerRejectInvalidRedemption =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'rejectInvalidRedemption',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"removeAlwaysAllowedMinterForAgent"`
 */
export const useWriteIAssetManagerRemoveAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'removeAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"requestReturnFromCoreVault"`
 */
export const useWriteIAssetManagerRequestReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'requestReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"reserveCollateral"`
 */
export const useWriteIAssetManagerReserveCollateral =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'reserveCollateral',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"selfClose"`
 */
export const useWriteIAssetManagerSelfClose =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'selfClose',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"selfMint"`
 */
export const useWriteIAssetManagerSelfMint =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'selfMint',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultManager"`
 */
export const useWriteIAssetManagerSetCoreVaultManager =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultManager',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultMinimumAmountLeftBIPS"`
 */
export const useWriteIAssetManagerSetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultMinimumRedeemLots"`
 */
export const useWriteIAssetManagerSetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultNativeAddress"`
 */
export const useWriteIAssetManagerSetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultRedemptionFeeBIPS"`
 */
export const useWriteIAssetManagerSetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultTransferTimeExtensionSeconds"`
 */
export const useWriteIAssetManagerSetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setRedemptionPaymentExtensionSeconds"`
 */
export const useWriteIAssetManagerSetRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'setRedemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"startLiquidation"`
 */
export const useWriteIAssetManagerStartLiquidation =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'startLiquidation',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"switchVaultCollateral"`
 */
export const useWriteIAssetManagerSwitchVaultCollateral =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'switchVaultCollateral',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"transferToCoreVault"`
 */
export const useWriteIAssetManagerTransferToCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'transferToCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"unstickMinting"`
 */
export const useWriteIAssetManagerUnstickMinting =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'unstickMinting',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"updateCurrentBlock"`
 */
export const useWriteIAssetManagerUpdateCurrentBlock =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'updateCurrentBlock',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"upgradeAgentVaultAndPool"`
 */
export const useWriteIAssetManagerUpgradeAgentVaultAndPool =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'upgradeAgentVaultAndPool',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"upgradeWNatContract"`
 */
export const useWriteIAssetManagerUpgradeWNatContract =
  /*#__PURE__*/ createUseWriteContract({
    abi: iAssetManagerAbi,
    functionName: 'upgradeWNatContract',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__
 */
export const useSimulateIAssetManager = /*#__PURE__*/ createUseSimulateContract(
  { abi: iAssetManagerAbi },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"addAlwaysAllowedMinterForAgent"`
 */
export const useSimulateIAssetManagerAddAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'addAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"agentPing"`
 */
export const useSimulateIAssetManagerAgentPing =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'agentPing',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"agentPingResponse"`
 */
export const useSimulateIAssetManagerAgentPingResponse =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'agentPingResponse',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceAgentPoolTokenRedemption"`
 */
export const useSimulateIAssetManagerAnnounceAgentPoolTokenRedemption =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceAgentPoolTokenRedemption',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceAgentSettingUpdate"`
 */
export const useSimulateIAssetManagerAnnounceAgentSettingUpdate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceAgentSettingUpdate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceDestroyAgent"`
 */
export const useSimulateIAssetManagerAnnounceDestroyAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceDestroyAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceExitAvailableAgentList"`
 */
export const useSimulateIAssetManagerAnnounceExitAvailableAgentList =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceExitAvailableAgentList',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceUnderlyingWithdrawal"`
 */
export const useSimulateIAssetManagerAnnounceUnderlyingWithdrawal =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"announceVaultCollateralWithdrawal"`
 */
export const useSimulateIAssetManagerAnnounceVaultCollateralWithdrawal =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'announceVaultCollateralWithdrawal',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"cancelReturnFromCoreVault"`
 */
export const useSimulateIAssetManagerCancelReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'cancelReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"cancelUnderlyingWithdrawal"`
 */
export const useSimulateIAssetManagerCancelUnderlyingWithdrawal =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'cancelUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmRedemptionPayment"`
 */
export const useSimulateIAssetManagerConfirmRedemptionPayment =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmRedemptionPayment',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmReturnFromCoreVault"`
 */
export const useSimulateIAssetManagerConfirmReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmTopupPayment"`
 */
export const useSimulateIAssetManagerConfirmTopupPayment =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmTopupPayment',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"confirmUnderlyingWithdrawal"`
 */
export const useSimulateIAssetManagerConfirmUnderlyingWithdrawal =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'confirmUnderlyingWithdrawal',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"convertDustToTicket"`
 */
export const useSimulateIAssetManagerConvertDustToTicket =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'convertDustToTicket',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"createAgentVault"`
 */
export const useSimulateIAssetManagerCreateAgentVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'createAgentVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"destroyAgent"`
 */
export const useSimulateIAssetManagerDestroyAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'destroyAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"doublePaymentChallenge"`
 */
export const useSimulateIAssetManagerDoublePaymentChallenge =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'doublePaymentChallenge',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"endLiquidation"`
 */
export const useSimulateIAssetManagerEndLiquidation =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'endLiquidation',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"executeAgentSettingUpdate"`
 */
export const useSimulateIAssetManagerExecuteAgentSettingUpdate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'executeAgentSettingUpdate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"executeMinting"`
 */
export const useSimulateIAssetManagerExecuteMinting =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'executeMinting',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"exitAvailableAgentList"`
 */
export const useSimulateIAssetManagerExitAvailableAgentList =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'exitAvailableAgentList',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"finishRedemptionWithoutPayment"`
 */
export const useSimulateIAssetManagerFinishRedemptionWithoutPayment =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'finishRedemptionWithoutPayment',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"freeBalanceNegativeChallenge"`
 */
export const useSimulateIAssetManagerFreeBalanceNegativeChallenge =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'freeBalanceNegativeChallenge',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"illegalPaymentChallenge"`
 */
export const useSimulateIAssetManagerIllegalPaymentChallenge =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'illegalPaymentChallenge',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"liquidate"`
 */
export const useSimulateIAssetManagerLiquidate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'liquidate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"makeAgentAvailable"`
 */
export const useSimulateIAssetManagerMakeAgentAvailable =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'makeAgentAvailable',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"mintFromFreeUnderlying"`
 */
export const useSimulateIAssetManagerMintFromFreeUnderlying =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'mintFromFreeUnderlying',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"mintingPaymentDefault"`
 */
export const useSimulateIAssetManagerMintingPaymentDefault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'mintingPaymentDefault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redeem"`
 */
export const useSimulateIAssetManagerRedeem =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'redeem',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redeemFromCoreVault"`
 */
export const useSimulateIAssetManagerRedeemFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'redeemFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"redemptionPaymentDefault"`
 */
export const useSimulateIAssetManagerRedemptionPaymentDefault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'redemptionPaymentDefault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"rejectInvalidRedemption"`
 */
export const useSimulateIAssetManagerRejectInvalidRedemption =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'rejectInvalidRedemption',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"removeAlwaysAllowedMinterForAgent"`
 */
export const useSimulateIAssetManagerRemoveAlwaysAllowedMinterForAgent =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'removeAlwaysAllowedMinterForAgent',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"requestReturnFromCoreVault"`
 */
export const useSimulateIAssetManagerRequestReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'requestReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"reserveCollateral"`
 */
export const useSimulateIAssetManagerReserveCollateral =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'reserveCollateral',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"selfClose"`
 */
export const useSimulateIAssetManagerSelfClose =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'selfClose',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"selfMint"`
 */
export const useSimulateIAssetManagerSelfMint =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'selfMint',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultManager"`
 */
export const useSimulateIAssetManagerSetCoreVaultManager =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultManager',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultMinimumAmountLeftBIPS"`
 */
export const useSimulateIAssetManagerSetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultMinimumRedeemLots"`
 */
export const useSimulateIAssetManagerSetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultNativeAddress"`
 */
export const useSimulateIAssetManagerSetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultRedemptionFeeBIPS"`
 */
export const useSimulateIAssetManagerSetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setCoreVaultTransferTimeExtensionSeconds"`
 */
export const useSimulateIAssetManagerSetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"setRedemptionPaymentExtensionSeconds"`
 */
export const useSimulateIAssetManagerSetRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'setRedemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"startLiquidation"`
 */
export const useSimulateIAssetManagerStartLiquidation =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'startLiquidation',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"switchVaultCollateral"`
 */
export const useSimulateIAssetManagerSwitchVaultCollateral =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'switchVaultCollateral',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"transferToCoreVault"`
 */
export const useSimulateIAssetManagerTransferToCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'transferToCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"unstickMinting"`
 */
export const useSimulateIAssetManagerUnstickMinting =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'unstickMinting',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"updateCurrentBlock"`
 */
export const useSimulateIAssetManagerUpdateCurrentBlock =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'updateCurrentBlock',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"upgradeAgentVaultAndPool"`
 */
export const useSimulateIAssetManagerUpgradeAgentVaultAndPool =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'upgradeAgentVaultAndPool',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iAssetManagerAbi}__ and `functionName` set to `"upgradeWNatContract"`
 */
export const useSimulateIAssetManagerUpgradeWNatContract =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iAssetManagerAbi,
    functionName: 'upgradeWNatContract',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__
 */
export const useWatchIAssetManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iAssetManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentAvailable"`
 */
export const useWatchIAssetManagerAgentAvailableEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentAvailable',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentCollateralTypeChanged"`
 */
export const useWatchIAssetManagerAgentCollateralTypeChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentCollateralTypeChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentDestroyAnnounced"`
 */
export const useWatchIAssetManagerAgentDestroyAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentDestroyAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentDestroyed"`
 */
export const useWatchIAssetManagerAgentDestroyedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentDestroyed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentPing"`
 */
export const useWatchIAssetManagerAgentPingEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentPing',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentPingResponse"`
 */
export const useWatchIAssetManagerAgentPingResponseEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentPingResponse',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentSettingChangeAnnounced"`
 */
export const useWatchIAssetManagerAgentSettingChangeAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentSettingChangeAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentSettingChanged"`
 */
export const useWatchIAssetManagerAgentSettingChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentSettingChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AgentVaultCreated"`
 */
export const useWatchIAssetManagerAgentVaultCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AgentVaultCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AvailableAgentExitAnnounced"`
 */
export const useWatchIAssetManagerAvailableAgentExitAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AvailableAgentExitAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"AvailableAgentExited"`
 */
export const useWatchIAssetManagerAvailableAgentExitedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'AvailableAgentExited',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CollateralRatiosChanged"`
 */
export const useWatchIAssetManagerCollateralRatiosChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CollateralRatiosChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CollateralReservationDeleted"`
 */
export const useWatchIAssetManagerCollateralReservationDeletedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CollateralReservationDeleted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CollateralReserved"`
 */
export const useWatchIAssetManagerCollateralReservedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CollateralReserved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CollateralTypeAdded"`
 */
export const useWatchIAssetManagerCollateralTypeAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CollateralTypeAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CollateralTypeDeprecated"`
 */
export const useWatchIAssetManagerCollateralTypeDeprecatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CollateralTypeDeprecated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"ContractChanged"`
 */
export const useWatchIAssetManagerContractChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'ContractChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CoreVaultRedemptionRequested"`
 */
export const useWatchIAssetManagerCoreVaultRedemptionRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CoreVaultRedemptionRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"CurrentUnderlyingBlockUpdated"`
 */
export const useWatchIAssetManagerCurrentUnderlyingBlockUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'CurrentUnderlyingBlockUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"DuplicatePaymentConfirmed"`
 */
export const useWatchIAssetManagerDuplicatePaymentConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'DuplicatePaymentConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"DustChanged"`
 */
export const useWatchIAssetManagerDustChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'DustChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"EmergencyPauseCanceled"`
 */
export const useWatchIAssetManagerEmergencyPauseCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'EmergencyPauseCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"EmergencyPauseTransfersCanceled"`
 */
export const useWatchIAssetManagerEmergencyPauseTransfersCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'EmergencyPauseTransfersCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"EmergencyPauseTransfersTriggered"`
 */
export const useWatchIAssetManagerEmergencyPauseTransfersTriggeredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'EmergencyPauseTransfersTriggered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"EmergencyPauseTriggered"`
 */
export const useWatchIAssetManagerEmergencyPauseTriggeredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'EmergencyPauseTriggered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"FullLiquidationStarted"`
 */
export const useWatchIAssetManagerFullLiquidationStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'FullLiquidationStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"IllegalPaymentConfirmed"`
 */
export const useWatchIAssetManagerIllegalPaymentConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'IllegalPaymentConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"LiquidationEnded"`
 */
export const useWatchIAssetManagerLiquidationEndedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'LiquidationEnded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"LiquidationPerformed"`
 */
export const useWatchIAssetManagerLiquidationPerformedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'LiquidationPerformed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"LiquidationStarted"`
 */
export const useWatchIAssetManagerLiquidationStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'LiquidationStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"MintingExecuted"`
 */
export const useWatchIAssetManagerMintingExecutedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'MintingExecuted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"MintingPaymentDefault"`
 */
export const useWatchIAssetManagerMintingPaymentDefaultEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'MintingPaymentDefault',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"PoolTokenRedemptionAnnounced"`
 */
export const useWatchIAssetManagerPoolTokenRedemptionAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'PoolTokenRedemptionAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedeemedInCollateral"`
 */
export const useWatchIAssetManagerRedeemedInCollateralEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedeemedInCollateral',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionDefault"`
 */
export const useWatchIAssetManagerRedemptionDefaultEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionDefault',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionPaymentBlocked"`
 */
export const useWatchIAssetManagerRedemptionPaymentBlockedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionPaymentBlocked',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionPaymentFailed"`
 */
export const useWatchIAssetManagerRedemptionPaymentFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionPaymentFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionPerformed"`
 */
export const useWatchIAssetManagerRedemptionPerformedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionPerformed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionPoolFeeMinted"`
 */
export const useWatchIAssetManagerRedemptionPoolFeeMintedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionPoolFeeMinted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionRejected"`
 */
export const useWatchIAssetManagerRedemptionRejectedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionRejected',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionRequestIncomplete"`
 */
export const useWatchIAssetManagerRedemptionRequestIncompleteEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionRequestIncomplete',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionRequested"`
 */
export const useWatchIAssetManagerRedemptionRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionTicketCreated"`
 */
export const useWatchIAssetManagerRedemptionTicketCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionTicketCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionTicketDeleted"`
 */
export const useWatchIAssetManagerRedemptionTicketDeletedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionTicketDeleted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"RedemptionTicketUpdated"`
 */
export const useWatchIAssetManagerRedemptionTicketUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'RedemptionTicketUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"ReturnFromCoreVaultCancelled"`
 */
export const useWatchIAssetManagerReturnFromCoreVaultCancelledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'ReturnFromCoreVaultCancelled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"ReturnFromCoreVaultConfirmed"`
 */
export const useWatchIAssetManagerReturnFromCoreVaultConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'ReturnFromCoreVaultConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"ReturnFromCoreVaultRequested"`
 */
export const useWatchIAssetManagerReturnFromCoreVaultRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'ReturnFromCoreVaultRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"SelfClose"`
 */
export const useWatchIAssetManagerSelfCloseEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'SelfClose',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"SelfMint"`
 */
export const useWatchIAssetManagerSelfMintEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'SelfMint',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"SettingArrayChanged"`
 */
export const useWatchIAssetManagerSettingArrayChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'SettingArrayChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"SettingChanged"`
 */
export const useWatchIAssetManagerSettingChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'SettingChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"TransferToCoreVaultDefaulted"`
 */
export const useWatchIAssetManagerTransferToCoreVaultDefaultedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'TransferToCoreVaultDefaulted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"TransferToCoreVaultStarted"`
 */
export const useWatchIAssetManagerTransferToCoreVaultStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'TransferToCoreVaultStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"TransferToCoreVaultSuccessful"`
 */
export const useWatchIAssetManagerTransferToCoreVaultSuccessfulEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'TransferToCoreVaultSuccessful',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingBalanceChanged"`
 */
export const useWatchIAssetManagerUnderlyingBalanceChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingBalanceChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingBalanceTooLow"`
 */
export const useWatchIAssetManagerUnderlyingBalanceTooLowEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingBalanceTooLow',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingBalanceToppedUp"`
 */
export const useWatchIAssetManagerUnderlyingBalanceToppedUpEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingBalanceToppedUp',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingWithdrawalAnnounced"`
 */
export const useWatchIAssetManagerUnderlyingWithdrawalAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingWithdrawalAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingWithdrawalCancelled"`
 */
export const useWatchIAssetManagerUnderlyingWithdrawalCancelledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingWithdrawalCancelled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"UnderlyingWithdrawalConfirmed"`
 */
export const useWatchIAssetManagerUnderlyingWithdrawalConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'UnderlyingWithdrawalConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerAbi}__ and `eventName` set to `"VaultCollateralWithdrawalAnnounced"`
 */
export const useWatchIAssetManagerVaultCollateralWithdrawalAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerAbi,
    eventName: 'VaultCollateralWithdrawalAnnounced',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerControllerAbi}__
 */
export const useReadIAssetManagerController =
  /*#__PURE__*/ createUseReadContract({ abi: iAssetManagerControllerAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerControllerAbi}__ and `functionName` set to `"assetManagerExists"`
 */
export const useReadIAssetManagerControllerAssetManagerExists =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerControllerAbi,
    functionName: 'assetManagerExists',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iAssetManagerControllerAbi}__ and `functionName` set to `"getAssetManagers"`
 */
export const useReadIAssetManagerControllerGetAssetManagers =
  /*#__PURE__*/ createUseReadContract({
    abi: iAssetManagerControllerAbi,
    functionName: 'getAssetManagers',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__
 */
export const useWatchIAssetManagerEventsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iAssetManagerEventsAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentAvailable"`
 */
export const useWatchIAssetManagerEventsAgentAvailableEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentAvailable',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentCollateralTypeChanged"`
 */
export const useWatchIAssetManagerEventsAgentCollateralTypeChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentCollateralTypeChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentDestroyAnnounced"`
 */
export const useWatchIAssetManagerEventsAgentDestroyAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentDestroyAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentDestroyed"`
 */
export const useWatchIAssetManagerEventsAgentDestroyedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentDestroyed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentSettingChangeAnnounced"`
 */
export const useWatchIAssetManagerEventsAgentSettingChangeAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentSettingChangeAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentSettingChanged"`
 */
export const useWatchIAssetManagerEventsAgentSettingChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentSettingChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AgentVaultCreated"`
 */
export const useWatchIAssetManagerEventsAgentVaultCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AgentVaultCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AvailableAgentExitAnnounced"`
 */
export const useWatchIAssetManagerEventsAvailableAgentExitAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AvailableAgentExitAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"AvailableAgentExited"`
 */
export const useWatchIAssetManagerEventsAvailableAgentExitedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'AvailableAgentExited',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CollateralRatiosChanged"`
 */
export const useWatchIAssetManagerEventsCollateralRatiosChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CollateralRatiosChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CollateralReservationDeleted"`
 */
export const useWatchIAssetManagerEventsCollateralReservationDeletedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CollateralReservationDeleted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CollateralReserved"`
 */
export const useWatchIAssetManagerEventsCollateralReservedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CollateralReserved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CollateralTypeAdded"`
 */
export const useWatchIAssetManagerEventsCollateralTypeAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CollateralTypeAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CollateralTypeDeprecated"`
 */
export const useWatchIAssetManagerEventsCollateralTypeDeprecatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CollateralTypeDeprecated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"ContractChanged"`
 */
export const useWatchIAssetManagerEventsContractChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'ContractChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"CurrentUnderlyingBlockUpdated"`
 */
export const useWatchIAssetManagerEventsCurrentUnderlyingBlockUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'CurrentUnderlyingBlockUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"DuplicatePaymentConfirmed"`
 */
export const useWatchIAssetManagerEventsDuplicatePaymentConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'DuplicatePaymentConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"DustChanged"`
 */
export const useWatchIAssetManagerEventsDustChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'DustChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"EmergencyPauseCanceled"`
 */
export const useWatchIAssetManagerEventsEmergencyPauseCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'EmergencyPauseCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"EmergencyPauseTransfersCanceled"`
 */
export const useWatchIAssetManagerEventsEmergencyPauseTransfersCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'EmergencyPauseTransfersCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"EmergencyPauseTransfersTriggered"`
 */
export const useWatchIAssetManagerEventsEmergencyPauseTransfersTriggeredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'EmergencyPauseTransfersTriggered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"EmergencyPauseTriggered"`
 */
export const useWatchIAssetManagerEventsEmergencyPauseTriggeredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'EmergencyPauseTriggered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"FullLiquidationStarted"`
 */
export const useWatchIAssetManagerEventsFullLiquidationStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'FullLiquidationStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"IllegalPaymentConfirmed"`
 */
export const useWatchIAssetManagerEventsIllegalPaymentConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'IllegalPaymentConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"LiquidationEnded"`
 */
export const useWatchIAssetManagerEventsLiquidationEndedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'LiquidationEnded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"LiquidationPerformed"`
 */
export const useWatchIAssetManagerEventsLiquidationPerformedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'LiquidationPerformed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"LiquidationStarted"`
 */
export const useWatchIAssetManagerEventsLiquidationStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'LiquidationStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"MintingExecuted"`
 */
export const useWatchIAssetManagerEventsMintingExecutedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'MintingExecuted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"MintingPaymentDefault"`
 */
export const useWatchIAssetManagerEventsMintingPaymentDefaultEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'MintingPaymentDefault',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"PoolTokenRedemptionAnnounced"`
 */
export const useWatchIAssetManagerEventsPoolTokenRedemptionAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'PoolTokenRedemptionAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedeemedInCollateral"`
 */
export const useWatchIAssetManagerEventsRedeemedInCollateralEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedeemedInCollateral',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionDefault"`
 */
export const useWatchIAssetManagerEventsRedemptionDefaultEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionDefault',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionPaymentBlocked"`
 */
export const useWatchIAssetManagerEventsRedemptionPaymentBlockedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionPaymentBlocked',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionPaymentFailed"`
 */
export const useWatchIAssetManagerEventsRedemptionPaymentFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionPaymentFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionPerformed"`
 */
export const useWatchIAssetManagerEventsRedemptionPerformedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionPerformed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionPoolFeeMinted"`
 */
export const useWatchIAssetManagerEventsRedemptionPoolFeeMintedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionPoolFeeMinted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionRejected"`
 */
export const useWatchIAssetManagerEventsRedemptionRejectedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionRejected',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionRequestIncomplete"`
 */
export const useWatchIAssetManagerEventsRedemptionRequestIncompleteEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionRequestIncomplete',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionRequested"`
 */
export const useWatchIAssetManagerEventsRedemptionRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionTicketCreated"`
 */
export const useWatchIAssetManagerEventsRedemptionTicketCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionTicketCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionTicketDeleted"`
 */
export const useWatchIAssetManagerEventsRedemptionTicketDeletedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionTicketDeleted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"RedemptionTicketUpdated"`
 */
export const useWatchIAssetManagerEventsRedemptionTicketUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'RedemptionTicketUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"SelfClose"`
 */
export const useWatchIAssetManagerEventsSelfCloseEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'SelfClose',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"SelfMint"`
 */
export const useWatchIAssetManagerEventsSelfMintEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'SelfMint',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"SettingArrayChanged"`
 */
export const useWatchIAssetManagerEventsSettingArrayChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'SettingArrayChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"SettingChanged"`
 */
export const useWatchIAssetManagerEventsSettingChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'SettingChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingBalanceChanged"`
 */
export const useWatchIAssetManagerEventsUnderlyingBalanceChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingBalanceChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingBalanceTooLow"`
 */
export const useWatchIAssetManagerEventsUnderlyingBalanceTooLowEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingBalanceTooLow',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingBalanceToppedUp"`
 */
export const useWatchIAssetManagerEventsUnderlyingBalanceToppedUpEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingBalanceToppedUp',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingWithdrawalAnnounced"`
 */
export const useWatchIAssetManagerEventsUnderlyingWithdrawalAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingWithdrawalAnnounced',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingWithdrawalCancelled"`
 */
export const useWatchIAssetManagerEventsUnderlyingWithdrawalCancelledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingWithdrawalCancelled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"UnderlyingWithdrawalConfirmed"`
 */
export const useWatchIAssetManagerEventsUnderlyingWithdrawalConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'UnderlyingWithdrawalConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iAssetManagerEventsAbi}__ and `eventName` set to `"VaultCollateralWithdrawalAnnounced"`
 */
export const useWatchIAssetManagerEventsVaultCollateralWithdrawalAnnouncedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iAssetManagerEventsAbi,
    eventName: 'VaultCollateralWithdrawalAnnounced',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iBalanceDecreasingTransactionVerificationAbi}__
 */
export const useReadIBalanceDecreasingTransactionVerification =
  /*#__PURE__*/ createUseReadContract({
    abi: iBalanceDecreasingTransactionVerificationAbi,
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iBalanceDecreasingTransactionVerificationAbi}__ and `functionName` set to `"verifyBalanceDecreasingTransaction"`
 */
export const useReadIBalanceDecreasingTransactionVerificationVerifyBalanceDecreasingTransaction =
  /*#__PURE__*/ createUseReadContract({
    abi: iBalanceDecreasingTransactionVerificationAbi,
    functionName: 'verifyBalanceDecreasingTransaction',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__
 */
export const useReadIcChainStake = /*#__PURE__*/ createUseReadContract({
  abi: icChainStakeAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIcChainStakeBalanceOf = /*#__PURE__*/ createUseReadContract(
  { abi: icChainStakeAbi, functionName: 'balanceOf' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"balanceOfAt"`
 */
export const useReadIcChainStakeBalanceOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'balanceOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIcChainStakeBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"stakesOf"`
 */
export const useReadIcChainStakeStakesOf = /*#__PURE__*/ createUseReadContract({
  abi: icChainStakeAbi,
  functionName: 'stakesOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"stakesOfAt"`
 */
export const useReadIcChainStakeStakesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'stakesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIcChainStakeTotalSupply =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'totalSupply',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalSupplyAt"`
 */
export const useReadIcChainStakeTotalSupplyAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'totalSupplyAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIcChainStakeTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIcChainStakeTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIcChainStakeVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIcChainStakeVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIcChainStakeVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIcChainStakeVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainStakeAbi}__
 */
export const useWriteIcChainStake = /*#__PURE__*/ createUseWriteContract({
  abi: icChainStakeAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useWriteIcChainStakeTotalVotePowerAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: icChainStakeAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIcChainStakeVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainStakeAbi}__
 */
export const useSimulateIcChainStake = /*#__PURE__*/ createUseSimulateContract({
  abi: icChainStakeAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useSimulateIcChainStakeTotalVotePowerAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: icChainStakeAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainStakeAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIcChainStakeVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: icChainStakeAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainStakeAbi}__
 */
export const useWatchIcChainStakeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: icChainStakeAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainStakeAbi}__ and `eventName` set to `"VotePowerCacheCreated"`
 */
export const useWatchIcChainStakeVotePowerCacheCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: icChainStakeAbi,
    eventName: 'VotePowerCacheCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainStakeAbi}__ and `eventName` set to `"VotePowerChanged"`
 */
export const useWatchIcChainStakeVotePowerChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: icChainStakeAbi,
    eventName: 'VotePowerChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__
 */
export const useReadIcChainVotePower = /*#__PURE__*/ createUseReadContract({
  abi: icChainVotePowerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIcChainVotePowerBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"stakesOf"`
 */
export const useReadIcChainVotePowerStakesOf =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'stakesOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"stakesOfAt"`
 */
export const useReadIcChainVotePowerStakesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'stakesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIcChainVotePowerTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIcChainVotePowerTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIcChainVotePowerVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIcChainVotePowerVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIcChainVotePowerVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIcChainVotePowerVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainVotePowerAbi}__
 */
export const useWriteIcChainVotePower = /*#__PURE__*/ createUseWriteContract({
  abi: icChainVotePowerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useWriteIcChainVotePowerTotalVotePowerAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: icChainVotePowerAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIcChainVotePowerVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainVotePowerAbi}__
 */
export const useSimulateIcChainVotePower =
  /*#__PURE__*/ createUseSimulateContract({ abi: icChainVotePowerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useSimulateIcChainVotePowerTotalVotePowerAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: icChainVotePowerAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIcChainVotePowerVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: icChainVotePowerAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainVotePowerAbi}__
 */
export const useWatchIcChainVotePowerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: icChainVotePowerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `eventName` set to `"VotePowerCacheCreated"`
 */
export const useWatchIcChainVotePowerVotePowerCacheCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: icChainVotePowerAbi,
    eventName: 'VotePowerCacheCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link icChainVotePowerAbi}__ and `eventName` set to `"VotePowerChanged"`
 */
export const useWatchIcChainVotePowerVotePowerChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: icChainVotePowerAbi,
    eventName: 'VotePowerChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__
 */
export const useReadIClaimSetupManager = /*#__PURE__*/ createUseReadContract({
  abi: iClaimSetupManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"accountToDelegationAccount"`
 */
export const useReadIClaimSetupManagerAccountToDelegationAccount =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'accountToDelegationAccount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"allowedClaimRecipients"`
 */
export const useReadIClaimSetupManagerAllowedClaimRecipients =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'allowedClaimRecipients',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"claimExecutors"`
 */
export const useReadIClaimSetupManagerClaimExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'claimExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getDelegationAccountData"`
 */
export const useReadIClaimSetupManagerGetDelegationAccountData =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getDelegationAccountData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorCurrentFeeValue"`
 */
export const useReadIClaimSetupManagerGetExecutorCurrentFeeValue =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getExecutorCurrentFeeValue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorFeeValue"`
 */
export const useReadIClaimSetupManagerGetExecutorFeeValue =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getExecutorFeeValue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorInfo"`
 */
export const useReadIClaimSetupManagerGetExecutorInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getExecutorInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorScheduledFeeValueChanges"`
 */
export const useReadIClaimSetupManagerGetExecutorScheduledFeeValueChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getExecutorScheduledFeeValueChanges',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"getRegisteredExecutors"`
 */
export const useReadIClaimSetupManagerGetRegisteredExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'getRegisteredExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"isClaimExecutor"`
 */
export const useReadIClaimSetupManagerIsClaimExecutor =
  /*#__PURE__*/ createUseReadContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'isClaimExecutor',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__
 */
export const useWriteIClaimSetupManager = /*#__PURE__*/ createUseWriteContract({
  abi: iClaimSetupManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useWriteIClaimSetupManagerBatchDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIClaimSetupManagerDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"delegateGovernance"`
 */
export const useWriteIClaimSetupManagerDelegateGovernance =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'delegateGovernance',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"disableDelegationAccount"`
 */
export const useWriteIClaimSetupManagerDisableDelegationAccount =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'disableDelegationAccount',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"enableDelegationAccount"`
 */
export const useWriteIClaimSetupManagerEnableDelegationAccount =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'enableDelegationAccount',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"registerExecutor"`
 */
export const useWriteIClaimSetupManagerRegisterExecutor =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'registerExecutor',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useWriteIClaimSetupManagerRevokeDelegationAt =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useWriteIClaimSetupManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setAutoClaiming"`
 */
export const useWriteIClaimSetupManagerSetAutoClaiming =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setAutoClaiming',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIClaimSetupManagerSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useWriteIClaimSetupManagerTransferExternalToken =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useWriteIClaimSetupManagerUndelegateAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"undelegateGovernance"`
 */
export const useWriteIClaimSetupManagerUndelegateGovernance =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'undelegateGovernance',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"unregisterExecutor"`
 */
export const useWriteIClaimSetupManagerUnregisterExecutor =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'unregisterExecutor',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"updateExecutorFeeValue"`
 */
export const useWriteIClaimSetupManagerUpdateExecutorFeeValue =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'updateExecutorFeeValue',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIClaimSetupManagerWithdraw =
  /*#__PURE__*/ createUseWriteContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__
 */
export const useSimulateIClaimSetupManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iClaimSetupManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useSimulateIClaimSetupManagerBatchDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIClaimSetupManagerDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"delegateGovernance"`
 */
export const useSimulateIClaimSetupManagerDelegateGovernance =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'delegateGovernance',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"disableDelegationAccount"`
 */
export const useSimulateIClaimSetupManagerDisableDelegationAccount =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'disableDelegationAccount',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"enableDelegationAccount"`
 */
export const useSimulateIClaimSetupManagerEnableDelegationAccount =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'enableDelegationAccount',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"registerExecutor"`
 */
export const useSimulateIClaimSetupManagerRegisterExecutor =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'registerExecutor',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useSimulateIClaimSetupManagerRevokeDelegationAt =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useSimulateIClaimSetupManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setAutoClaiming"`
 */
export const useSimulateIClaimSetupManagerSetAutoClaiming =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setAutoClaiming',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIClaimSetupManagerSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useSimulateIClaimSetupManagerTransferExternalToken =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useSimulateIClaimSetupManagerUndelegateAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"undelegateGovernance"`
 */
export const useSimulateIClaimSetupManagerUndelegateGovernance =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'undelegateGovernance',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"unregisterExecutor"`
 */
export const useSimulateIClaimSetupManagerUnregisterExecutor =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'unregisterExecutor',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"updateExecutorFeeValue"`
 */
export const useSimulateIClaimSetupManagerUpdateExecutorFeeValue =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'updateExecutorFeeValue',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIClaimSetupManagerWithdraw =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iClaimSetupManagerAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__
 */
export const useWatchIClaimSetupManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iClaimSetupManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"AllowedClaimRecipientsChanged"`
 */
export const useWatchIClaimSetupManagerAllowedClaimRecipientsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'AllowedClaimRecipientsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"ClaimExecutorFeeValueChanged"`
 */
export const useWatchIClaimSetupManagerClaimExecutorFeeValueChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'ClaimExecutorFeeValueChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"ClaimExecutorsChanged"`
 */
export const useWatchIClaimSetupManagerClaimExecutorsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'ClaimExecutorsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"DelegationAccountCreated"`
 */
export const useWatchIClaimSetupManagerDelegationAccountCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'DelegationAccountCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"DelegationAccountUpdated"`
 */
export const useWatchIClaimSetupManagerDelegationAccountUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'DelegationAccountUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"ExecutorRegistered"`
 */
export const useWatchIClaimSetupManagerExecutorRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'ExecutorRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"ExecutorUnregistered"`
 */
export const useWatchIClaimSetupManagerExecutorUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'ExecutorUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"MaxFeeSet"`
 */
export const useWatchIClaimSetupManagerMaxFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'MaxFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"MinFeeSet"`
 */
export const useWatchIClaimSetupManagerMinFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'MinFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"RegisterExecutorFeeSet"`
 */
export const useWatchIClaimSetupManagerRegisterExecutorFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'RegisterExecutorFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iClaimSetupManagerAbi}__ and `eventName` set to `"SetExecutorsExcessAmountRefunded"`
 */
export const useWatchIClaimSetupManagerSetExecutorsExcessAmountRefundedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iClaimSetupManagerAbi,
    eventName: 'SetExecutorsExcessAmountRefunded',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iConfirmedBlockHeightExistsVerificationAbi}__
 */
export const useReadIConfirmedBlockHeightExistsVerification =
  /*#__PURE__*/ createUseReadContract({
    abi: iConfirmedBlockHeightExistsVerificationAbi,
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iConfirmedBlockHeightExistsVerificationAbi}__ and `functionName` set to `"verifyConfirmedBlockHeightExists"`
 */
export const useReadIConfirmedBlockHeightExistsVerificationVerifyConfirmedBlockHeightExists =
  /*#__PURE__*/ createUseReadContract({
    abi: iConfirmedBlockHeightExistsVerificationAbi,
    functionName: 'verifyConfirmedBlockHeightExists',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__
 */
export const useReadICoreVaultClient = /*#__PURE__*/ createUseReadContract({
  abi: iCoreVaultClientAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"coreVaultAvailableAmount"`
 */
export const useReadICoreVaultClientCoreVaultAvailableAmount =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientAbi,
    functionName: 'coreVaultAvailableAmount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"maximumTransferToCoreVault"`
 */
export const useReadICoreVaultClientMaximumTransferToCoreVault =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientAbi,
    functionName: 'maximumTransferToCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__
 */
export const useWriteICoreVaultClient = /*#__PURE__*/ createUseWriteContract({
  abi: iCoreVaultClientAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"cancelReturnFromCoreVault"`
 */
export const useWriteICoreVaultClientCancelReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientAbi,
    functionName: 'cancelReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"confirmReturnFromCoreVault"`
 */
export const useWriteICoreVaultClientConfirmReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientAbi,
    functionName: 'confirmReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"redeemFromCoreVault"`
 */
export const useWriteICoreVaultClientRedeemFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientAbi,
    functionName: 'redeemFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"requestReturnFromCoreVault"`
 */
export const useWriteICoreVaultClientRequestReturnFromCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientAbi,
    functionName: 'requestReturnFromCoreVault',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"transferToCoreVault"`
 */
export const useWriteICoreVaultClientTransferToCoreVault =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientAbi,
    functionName: 'transferToCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__
 */
export const useSimulateICoreVaultClient =
  /*#__PURE__*/ createUseSimulateContract({ abi: iCoreVaultClientAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"cancelReturnFromCoreVault"`
 */
export const useSimulateICoreVaultClientCancelReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientAbi,
    functionName: 'cancelReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"confirmReturnFromCoreVault"`
 */
export const useSimulateICoreVaultClientConfirmReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientAbi,
    functionName: 'confirmReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"redeemFromCoreVault"`
 */
export const useSimulateICoreVaultClientRedeemFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientAbi,
    functionName: 'redeemFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"requestReturnFromCoreVault"`
 */
export const useSimulateICoreVaultClientRequestReturnFromCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientAbi,
    functionName: 'requestReturnFromCoreVault',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `functionName` set to `"transferToCoreVault"`
 */
export const useSimulateICoreVaultClientTransferToCoreVault =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientAbi,
    functionName: 'transferToCoreVault',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__
 */
export const useWatchICoreVaultClientEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iCoreVaultClientAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"CoreVaultRedemptionRequested"`
 */
export const useWatchICoreVaultClientCoreVaultRedemptionRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'CoreVaultRedemptionRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"ReturnFromCoreVaultCancelled"`
 */
export const useWatchICoreVaultClientReturnFromCoreVaultCancelledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'ReturnFromCoreVaultCancelled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"ReturnFromCoreVaultConfirmed"`
 */
export const useWatchICoreVaultClientReturnFromCoreVaultConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'ReturnFromCoreVaultConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"ReturnFromCoreVaultRequested"`
 */
export const useWatchICoreVaultClientReturnFromCoreVaultRequestedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'ReturnFromCoreVaultRequested',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"TransferToCoreVaultDefaulted"`
 */
export const useWatchICoreVaultClientTransferToCoreVaultDefaultedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'TransferToCoreVaultDefaulted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"TransferToCoreVaultStarted"`
 */
export const useWatchICoreVaultClientTransferToCoreVaultStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'TransferToCoreVaultStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iCoreVaultClientAbi}__ and `eventName` set to `"TransferToCoreVaultSuccessful"`
 */
export const useWatchICoreVaultClientTransferToCoreVaultSuccessfulEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iCoreVaultClientAbi,
    eventName: 'TransferToCoreVaultSuccessful',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__
 */
export const useReadICoreVaultClientSettings =
  /*#__PURE__*/ createUseReadContract({ abi: iCoreVaultClientSettingsAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultManager"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultManager =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultManager',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultMinimumAmountLeftBIPS"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultMinimumRedeemLots"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultNativeAddress"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultRedemptionFeeBIPS"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"getCoreVaultTransferTimeExtensionSeconds"`
 */
export const useReadICoreVaultClientSettingsGetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'getCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__
 */
export const useWriteICoreVaultClientSettings =
  /*#__PURE__*/ createUseWriteContract({ abi: iCoreVaultClientSettingsAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultManager"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultManager =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultManager',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultMinimumAmountLeftBIPS"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultMinimumRedeemLots"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultNativeAddress"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultRedemptionFeeBIPS"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultTransferTimeExtensionSeconds"`
 */
export const useWriteICoreVaultClientSettingsSetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__
 */
export const useSimulateICoreVaultClientSettings =
  /*#__PURE__*/ createUseSimulateContract({ abi: iCoreVaultClientSettingsAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultManager"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultManager =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultManager',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultMinimumAmountLeftBIPS"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultMinimumAmountLeftBips =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultMinimumAmountLeftBIPS',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultMinimumRedeemLots"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultMinimumRedeemLots =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultMinimumRedeemLots',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultNativeAddress"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultNativeAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultNativeAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultRedemptionFeeBIPS"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultRedemptionFeeBips =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultRedemptionFeeBIPS',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iCoreVaultClientSettingsAbi}__ and `functionName` set to `"setCoreVaultTransferTimeExtensionSeconds"`
 */
export const useSimulateICoreVaultClientSettingsSetCoreVaultTransferTimeExtensionSeconds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iCoreVaultClientSettingsAbi,
    functionName: 'setCoreVaultTransferTimeExtensionSeconds',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__
 */
export const useWatchIDelegationAccountEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iDelegationAccountAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"DelegateFtso"`
 */
export const useWatchIDelegationAccountDelegateFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'DelegateFtso',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"DelegateGovernance"`
 */
export const useWatchIDelegationAccountDelegateGovernanceEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'DelegateGovernance',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"ExecutorFeePaid"`
 */
export const useWatchIDelegationAccountExecutorFeePaidEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'ExecutorFeePaid',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"ExternalTokenTransferred"`
 */
export const useWatchIDelegationAccountExternalTokenTransferredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'ExternalTokenTransferred',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"Initialize"`
 */
export const useWatchIDelegationAccountInitializeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'Initialize',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"RevokeFtso"`
 */
export const useWatchIDelegationAccountRevokeFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'RevokeFtso',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"UndelegateAllFtso"`
 */
export const useWatchIDelegationAccountUndelegateAllFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'UndelegateAllFtso',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"UndelegateGovernance"`
 */
export const useWatchIDelegationAccountUndelegateGovernanceEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'UndelegateGovernance',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDelegationAccountAbi}__ and `eventName` set to `"WithdrawToOwner"`
 */
export const useWatchIDelegationAccountWithdrawToOwnerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDelegationAccountAbi,
    eventName: 'WithdrawToOwner',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDiamondLoupeAbi}__
 */
export const useReadIDiamondLoupe = /*#__PURE__*/ createUseReadContract({
  abi: iDiamondLoupeAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDiamondLoupeAbi}__ and `functionName` set to `"facetAddress"`
 */
export const useReadIDiamondLoupeFacetAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iDiamondLoupeAbi,
    functionName: 'facetAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDiamondLoupeAbi}__ and `functionName` set to `"facetAddresses"`
 */
export const useReadIDiamondLoupeFacetAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iDiamondLoupeAbi,
    functionName: 'facetAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDiamondLoupeAbi}__ and `functionName` set to `"facetFunctionSelectors"`
 */
export const useReadIDiamondLoupeFacetFunctionSelectors =
  /*#__PURE__*/ createUseReadContract({
    abi: iDiamondLoupeAbi,
    functionName: 'facetFunctionSelectors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDiamondLoupeAbi}__ and `functionName` set to `"facets"`
 */
export const useReadIDiamondLoupeFacets = /*#__PURE__*/ createUseReadContract({
  abi: iDiamondLoupeAbi,
  functionName: 'facets',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__
 */
export const useReadIDistributionToDelegators =
  /*#__PURE__*/ createUseReadContract({ abi: iDistributionToDelegatorsAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"getClaimableAmount"`
 */
export const useReadIDistributionToDelegatorsGetClaimableAmount =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'getClaimableAmount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"getClaimableAmountOf"`
 */
export const useReadIDistributionToDelegatorsGetClaimableAmountOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'getClaimableAmountOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"getClaimableMonths"`
 */
export const useReadIDistributionToDelegatorsGetClaimableMonths =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'getClaimableMonths',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"getCurrentMonth"`
 */
export const useReadIDistributionToDelegatorsGetCurrentMonth =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'getCurrentMonth',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"getMonthToExpireNext"`
 */
export const useReadIDistributionToDelegatorsGetMonthToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'getMonthToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"nextClaimableMonth"`
 */
export const useReadIDistributionToDelegatorsNextClaimableMonth =
  /*#__PURE__*/ createUseReadContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'nextClaimableMonth',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__
 */
export const useWriteIDistributionToDelegators =
  /*#__PURE__*/ createUseWriteContract({ abi: iDistributionToDelegatorsAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useWriteIDistributionToDelegatorsAutoClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteIDistributionToDelegatorsClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"optOutOfAirdrop"`
 */
export const useWriteIDistributionToDelegatorsOptOutOfAirdrop =
  /*#__PURE__*/ createUseWriteContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'optOutOfAirdrop',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__
 */
export const useSimulateIDistributionToDelegators =
  /*#__PURE__*/ createUseSimulateContract({ abi: iDistributionToDelegatorsAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useSimulateIDistributionToDelegatorsAutoClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateIDistributionToDelegatorsClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `functionName` set to `"optOutOfAirdrop"`
 */
export const useSimulateIDistributionToDelegatorsOptOutOfAirdrop =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iDistributionToDelegatorsAbi,
    functionName: 'optOutOfAirdrop',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__
 */
export const useWatchIDistributionToDelegatorsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDistributionToDelegatorsAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `eventName` set to `"AccountClaimed"`
 */
export const useWatchIDistributionToDelegatorsAccountClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDistributionToDelegatorsAbi,
    eventName: 'AccountClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `eventName` set to `"AccountOptOut"`
 */
export const useWatchIDistributionToDelegatorsAccountOptOutEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDistributionToDelegatorsAbi,
    eventName: 'AccountOptOut',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `eventName` set to `"EntitlementStart"`
 */
export const useWatchIDistributionToDelegatorsEntitlementStartEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDistributionToDelegatorsAbi,
    eventName: 'EntitlementStart',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iDistributionToDelegatorsAbi}__ and `eventName` set to `"UseGoodRandomSet"`
 */
export const useWatchIDistributionToDelegatorsUseGoodRandomSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iDistributionToDelegatorsAbi,
    eventName: 'UseGoodRandomSet',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ievmTransactionVerificationAbi}__
 */
export const useReadIevmTransactionVerification =
  /*#__PURE__*/ createUseReadContract({ abi: ievmTransactionVerificationAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ievmTransactionVerificationAbi}__ and `functionName` set to `"verifyEVMTransaction"`
 */
export const useReadIevmTransactionVerificationVerifyEvmTransaction =
  /*#__PURE__*/ createUseReadContract({
    abi: ievmTransactionVerificationAbi,
    functionName: 'verifyEVMTransaction',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__
 */
export const useReadIEntityManager = /*#__PURE__*/ createUseReadContract({
  abi: iEntityManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getDelegationAddressOf"`
 */
export const useReadIEntityManagerGetDelegationAddressOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getDelegationAddressOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getDelegationAddressOfAt"`
 */
export const useReadIEntityManagerGetDelegationAddressOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getDelegationAddressOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getNodeIdsOf"`
 */
export const useReadIEntityManagerGetNodeIdsOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getNodeIdsOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getNodeIdsOfAt"`
 */
export const useReadIEntityManagerGetNodeIdsOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getNodeIdsOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getPublicKeyOf"`
 */
export const useReadIEntityManagerGetPublicKeyOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getPublicKeyOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getPublicKeyOfAt"`
 */
export const useReadIEntityManagerGetPublicKeyOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getPublicKeyOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterAddresses"`
 */
export const useReadIEntityManagerGetVoterAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterAddressesAt"`
 */
export const useReadIEntityManagerGetVoterAddressesAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterAddressesAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForDelegationAddress"`
 */
export const useReadIEntityManagerGetVoterForDelegationAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForDelegationAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForNodeId"`
 */
export const useReadIEntityManagerGetVoterForNodeId =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForNodeId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForPublicKey"`
 */
export const useReadIEntityManagerGetVoterForPublicKey =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForPublicKey',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForSigningPolicyAddress"`
 */
export const useReadIEntityManagerGetVoterForSigningPolicyAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForSigningPolicyAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForSubmitAddress"`
 */
export const useReadIEntityManagerGetVoterForSubmitAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForSubmitAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"getVoterForSubmitSignaturesAddress"`
 */
export const useReadIEntityManagerGetVoterForSubmitSignaturesAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iEntityManagerAbi,
    functionName: 'getVoterForSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__
 */
export const useWriteIEntityManager = /*#__PURE__*/ createUseWriteContract({
  abi: iEntityManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmDelegationAddressRegistration"`
 */
export const useWriteIEntityManagerConfirmDelegationAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmDelegationAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSigningPolicyAddressRegistration"`
 */
export const useWriteIEntityManagerConfirmSigningPolicyAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSigningPolicyAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSubmitAddressRegistration"`
 */
export const useWriteIEntityManagerConfirmSubmitAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSubmitAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSubmitSignaturesAddressRegistration"`
 */
export const useWriteIEntityManagerConfirmSubmitSignaturesAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSubmitSignaturesAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeDelegationAddress"`
 */
export const useWriteIEntityManagerProposeDelegationAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeDelegationAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSigningPolicyAddress"`
 */
export const useWriteIEntityManagerProposeSigningPolicyAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSigningPolicyAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSubmitAddress"`
 */
export const useWriteIEntityManagerProposeSubmitAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSubmitAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSubmitSignaturesAddress"`
 */
export const useWriteIEntityManagerProposeSubmitSignaturesAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"registerNodeId"`
 */
export const useWriteIEntityManagerRegisterNodeId =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'registerNodeId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useWriteIEntityManagerRegisterPublicKey =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"unregisterNodeId"`
 */
export const useWriteIEntityManagerUnregisterNodeId =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'unregisterNodeId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"unregisterPublicKey"`
 */
export const useWriteIEntityManagerUnregisterPublicKey =
  /*#__PURE__*/ createUseWriteContract({
    abi: iEntityManagerAbi,
    functionName: 'unregisterPublicKey',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__
 */
export const useSimulateIEntityManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iEntityManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmDelegationAddressRegistration"`
 */
export const useSimulateIEntityManagerConfirmDelegationAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmDelegationAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSigningPolicyAddressRegistration"`
 */
export const useSimulateIEntityManagerConfirmSigningPolicyAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSigningPolicyAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSubmitAddressRegistration"`
 */
export const useSimulateIEntityManagerConfirmSubmitAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSubmitAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"confirmSubmitSignaturesAddressRegistration"`
 */
export const useSimulateIEntityManagerConfirmSubmitSignaturesAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'confirmSubmitSignaturesAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeDelegationAddress"`
 */
export const useSimulateIEntityManagerProposeDelegationAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeDelegationAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSigningPolicyAddress"`
 */
export const useSimulateIEntityManagerProposeSigningPolicyAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSigningPolicyAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSubmitAddress"`
 */
export const useSimulateIEntityManagerProposeSubmitAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSubmitAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"proposeSubmitSignaturesAddress"`
 */
export const useSimulateIEntityManagerProposeSubmitSignaturesAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'proposeSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"registerNodeId"`
 */
export const useSimulateIEntityManagerRegisterNodeId =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'registerNodeId',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useSimulateIEntityManagerRegisterPublicKey =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"unregisterNodeId"`
 */
export const useSimulateIEntityManagerUnregisterNodeId =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'unregisterNodeId',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iEntityManagerAbi}__ and `functionName` set to `"unregisterPublicKey"`
 */
export const useSimulateIEntityManagerUnregisterPublicKey =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iEntityManagerAbi,
    functionName: 'unregisterPublicKey',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__
 */
export const useWatchIEntityManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iEntityManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"DelegationAddressProposed"`
 */
export const useWatchIEntityManagerDelegationAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'DelegationAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"DelegationAddressRegistrationConfirmed"`
 */
export const useWatchIEntityManagerDelegationAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'DelegationAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"MaxNodeIdsPerEntitySet"`
 */
export const useWatchIEntityManagerMaxNodeIdsPerEntitySetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'MaxNodeIdsPerEntitySet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"NodeIdRegistered"`
 */
export const useWatchIEntityManagerNodeIdRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'NodeIdRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"NodeIdUnregistered"`
 */
export const useWatchIEntityManagerNodeIdUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'NodeIdUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"PublicKeyRegistered"`
 */
export const useWatchIEntityManagerPublicKeyRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'PublicKeyRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"PublicKeyUnregistered"`
 */
export const useWatchIEntityManagerPublicKeyUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'PublicKeyUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SigningPolicyAddressProposed"`
 */
export const useWatchIEntityManagerSigningPolicyAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SigningPolicyAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SigningPolicyAddressRegistrationConfirmed"`
 */
export const useWatchIEntityManagerSigningPolicyAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SigningPolicyAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SubmitAddressProposed"`
 */
export const useWatchIEntityManagerSubmitAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SubmitAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SubmitAddressRegistrationConfirmed"`
 */
export const useWatchIEntityManagerSubmitAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SubmitAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SubmitSignaturesAddressProposed"`
 */
export const useWatchIEntityManagerSubmitSignaturesAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SubmitSignaturesAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iEntityManagerAbi}__ and `eventName` set to `"SubmitSignaturesAddressRegistrationConfirmed"`
 */
export const useWatchIEntityManagerSubmitSignaturesAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iEntityManagerAbi,
    eventName: 'SubmitSignaturesAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__
 */
export const useReadIFastUpdateIncentiveManager =
  /*#__PURE__*/ createUseReadContract({ abi: iFastUpdateIncentiveManagerAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getBaseScale"`
 */
export const useReadIFastUpdateIncentiveManagerGetBaseScale =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getBaseScale',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getCurrentSampleSizeIncreasePrice"`
 */
export const useReadIFastUpdateIncentiveManagerGetCurrentSampleSizeIncreasePrice =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getCurrentSampleSizeIncreasePrice',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getExpectedSampleSize"`
 */
export const useReadIFastUpdateIncentiveManagerGetExpectedSampleSize =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getExpectedSampleSize',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getIncentiveDuration"`
 */
export const useReadIFastUpdateIncentiveManagerGetIncentiveDuration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getIncentiveDuration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getPrecision"`
 */
export const useReadIFastUpdateIncentiveManagerGetPrecision =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getPrecision',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getRange"`
 */
export const useReadIFastUpdateIncentiveManagerGetRange =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getRange',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"getScale"`
 */
export const useReadIFastUpdateIncentiveManagerGetScale =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'getScale',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"rangeIncreaseLimit"`
 */
export const useReadIFastUpdateIncentiveManagerRangeIncreaseLimit =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'rangeIncreaseLimit',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"rangeIncreasePrice"`
 */
export const useReadIFastUpdateIncentiveManagerRangeIncreasePrice =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'rangeIncreasePrice',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"sampleIncreaseLimit"`
 */
export const useReadIFastUpdateIncentiveManagerSampleIncreaseLimit =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'sampleIncreaseLimit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__
 */
export const useWriteIFastUpdateIncentiveManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iFastUpdateIncentiveManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"offerIncentive"`
 */
export const useWriteIFastUpdateIncentiveManagerOfferIncentive =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'offerIncentive',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__
 */
export const useSimulateIFastUpdateIncentiveManager =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFastUpdateIncentiveManagerAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `functionName` set to `"offerIncentive"`
 */
export const useSimulateIFastUpdateIncentiveManagerOfferIncentive =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFastUpdateIncentiveManagerAbi,
    functionName: 'offerIncentive',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__
 */
export const useWatchIFastUpdateIncentiveManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdateIncentiveManagerAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `eventName` set to `"IncentiveOffered"`
 */
export const useWatchIFastUpdateIncentiveManagerIncentiveOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdateIncentiveManagerAbi,
    eventName: 'IncentiveOffered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdateIncentiveManagerAbi}__ and `eventName` set to `"InflationRewardsOffered"`
 */
export const useWatchIFastUpdateIncentiveManagerInflationRewardsOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdateIncentiveManagerAbi,
    eventName: 'InflationRewardsOffered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__
 */
export const useReadIFastUpdater = /*#__PURE__*/ createUseReadContract({
  abi: iFastUpdaterAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"blockScoreCutoff"`
 */
export const useReadIFastUpdaterBlockScoreCutoff =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'blockScoreCutoff',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"currentRewardEpochId"`
 */
export const useReadIFastUpdaterCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'currentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"currentScoreCutoff"`
 */
export const useReadIFastUpdaterCurrentScoreCutoff =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'currentScoreCutoff',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"currentSortitionWeight"`
 */
export const useReadIFastUpdaterCurrentSortitionWeight =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'currentSortitionWeight',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"numberOfUpdates"`
 */
export const useReadIFastUpdaterNumberOfUpdates =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'numberOfUpdates',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"numberOfUpdatesInBlock"`
 */
export const useReadIFastUpdaterNumberOfUpdatesInBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'numberOfUpdatesInBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"submissionWindow"`
 */
export const useReadIFastUpdaterSubmissionWindow =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdaterAbi,
    functionName: 'submissionWindow',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdaterAbi}__
 */
export const useWriteIFastUpdater = /*#__PURE__*/ createUseWriteContract({
  abi: iFastUpdaterAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"fetchAllCurrentFeeds"`
 */
export const useWriteIFastUpdaterFetchAllCurrentFeeds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFastUpdaterAbi,
    functionName: 'fetchAllCurrentFeeds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"fetchCurrentFeeds"`
 */
export const useWriteIFastUpdaterFetchCurrentFeeds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFastUpdaterAbi,
    functionName: 'fetchCurrentFeeds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"submitUpdates"`
 */
export const useWriteIFastUpdaterSubmitUpdates =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFastUpdaterAbi,
    functionName: 'submitUpdates',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdaterAbi}__
 */
export const useSimulateIFastUpdater = /*#__PURE__*/ createUseSimulateContract({
  abi: iFastUpdaterAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"fetchAllCurrentFeeds"`
 */
export const useSimulateIFastUpdaterFetchAllCurrentFeeds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFastUpdaterAbi,
    functionName: 'fetchAllCurrentFeeds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"fetchCurrentFeeds"`
 */
export const useSimulateIFastUpdaterFetchCurrentFeeds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFastUpdaterAbi,
    functionName: 'fetchCurrentFeeds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `functionName` set to `"submitUpdates"`
 */
export const useSimulateIFastUpdaterSubmitUpdates =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFastUpdaterAbi,
    functionName: 'submitUpdates',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdaterAbi}__
 */
export const useWatchIFastUpdaterEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFastUpdaterAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `eventName` set to `"FastUpdateFeedRemoved"`
 */
export const useWatchIFastUpdaterFastUpdateFeedRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdaterAbi,
    eventName: 'FastUpdateFeedRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `eventName` set to `"FastUpdateFeedReset"`
 */
export const useWatchIFastUpdaterFastUpdateFeedResetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdaterAbi,
    eventName: 'FastUpdateFeedReset',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `eventName` set to `"FastUpdateFeeds"`
 */
export const useWatchIFastUpdaterFastUpdateFeedsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdaterAbi,
    eventName: 'FastUpdateFeeds',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdaterAbi}__ and `eventName` set to `"FastUpdateFeedsSubmitted"`
 */
export const useWatchIFastUpdaterFastUpdateFeedsSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdaterAbi,
    eventName: 'FastUpdateFeedsSubmitted',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__
 */
export const useReadIFastUpdatesConfiguration =
  /*#__PURE__*/ createUseReadContract({ abi: iFastUpdatesConfigurationAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getFeedConfigurations"`
 */
export const useReadIFastUpdatesConfigurationGetFeedConfigurations =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getFeedConfigurations',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getFeedId"`
 */
export const useReadIFastUpdatesConfigurationGetFeedId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getFeedId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getFeedIds"`
 */
export const useReadIFastUpdatesConfigurationGetFeedIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getFeedIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getFeedIndex"`
 */
export const useReadIFastUpdatesConfigurationGetFeedIndex =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getFeedIndex',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getNumberOfFeeds"`
 */
export const useReadIFastUpdatesConfigurationGetNumberOfFeeds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getNumberOfFeeds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `functionName` set to `"getUnusedIndices"`
 */
export const useReadIFastUpdatesConfigurationGetUnusedIndices =
  /*#__PURE__*/ createUseReadContract({
    abi: iFastUpdatesConfigurationAbi,
    functionName: 'getUnusedIndices',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__
 */
export const useWatchIFastUpdatesConfigurationEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdatesConfigurationAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `eventName` set to `"FeedAdded"`
 */
export const useWatchIFastUpdatesConfigurationFeedAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdatesConfigurationAbi,
    eventName: 'FeedAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `eventName` set to `"FeedRemoved"`
 */
export const useWatchIFastUpdatesConfigurationFeedRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdatesConfigurationAbi,
    eventName: 'FeedRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFastUpdatesConfigurationAbi}__ and `eventName` set to `"FeedUpdated"`
 */
export const useWatchIFastUpdatesConfigurationFeedUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFastUpdatesConfigurationAbi,
    eventName: 'FeedUpdated',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcHubAbi}__
 */
export const useReadIFdcHub = /*#__PURE__*/ createUseReadContract({
  abi: iFdcHubAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcHubAbi}__ and `functionName` set to `"fdcInflationConfigurations"`
 */
export const useReadIFdcHubFdcInflationConfigurations =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcHubAbi,
    functionName: 'fdcInflationConfigurations',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcHubAbi}__ and `functionName` set to `"fdcRequestFeeConfigurations"`
 */
export const useReadIFdcHubFdcRequestFeeConfigurations =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcHubAbi,
    functionName: 'fdcRequestFeeConfigurations',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcHubAbi}__ and `functionName` set to `"requestsOffsetSeconds"`
 */
export const useReadIFdcHubRequestsOffsetSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcHubAbi,
    functionName: 'requestsOffsetSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFdcHubAbi}__
 */
export const useWriteIFdcHub = /*#__PURE__*/ createUseWriteContract({
  abi: iFdcHubAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFdcHubAbi}__ and `functionName` set to `"requestAttestation"`
 */
export const useWriteIFdcHubRequestAttestation =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFdcHubAbi,
    functionName: 'requestAttestation',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFdcHubAbi}__
 */
export const useSimulateIFdcHub = /*#__PURE__*/ createUseSimulateContract({
  abi: iFdcHubAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFdcHubAbi}__ and `functionName` set to `"requestAttestation"`
 */
export const useSimulateIFdcHubRequestAttestation =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFdcHubAbi,
    functionName: 'requestAttestation',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcHubAbi}__
 */
export const useWatchIFdcHubEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iFdcHubAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcHubAbi}__ and `eventName` set to `"AttestationRequest"`
 */
export const useWatchIFdcHubAttestationRequestEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcHubAbi,
    eventName: 'AttestationRequest',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcHubAbi}__ and `eventName` set to `"InflationRewardsOffered"`
 */
export const useWatchIFdcHubInflationRewardsOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcHubAbi,
    eventName: 'InflationRewardsOffered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcHubAbi}__ and `eventName` set to `"RequestsOffsetSet"`
 */
export const useWatchIFdcHubRequestsOffsetSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcHubAbi,
    eventName: 'RequestsOffsetSet',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcInflationConfigurationsAbi}__
 */
export const useReadIFdcInflationConfigurations =
  /*#__PURE__*/ createUseReadContract({ abi: iFdcInflationConfigurationsAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcInflationConfigurationsAbi}__ and `functionName` set to `"getFdcConfiguration"`
 */
export const useReadIFdcInflationConfigurationsGetFdcConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcInflationConfigurationsAbi,
    functionName: 'getFdcConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcInflationConfigurationsAbi}__ and `functionName` set to `"getFdcConfigurations"`
 */
export const useReadIFdcInflationConfigurationsGetFdcConfigurations =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcInflationConfigurationsAbi,
    functionName: 'getFdcConfigurations',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcRequestFeeConfigurationsAbi}__
 */
export const useReadIFdcRequestFeeConfigurations =
  /*#__PURE__*/ createUseReadContract({ abi: iFdcRequestFeeConfigurationsAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcRequestFeeConfigurationsAbi}__ and `functionName` set to `"getRequestFee"`
 */
export const useReadIFdcRequestFeeConfigurationsGetRequestFee =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcRequestFeeConfigurationsAbi,
    functionName: 'getRequestFee',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcRequestFeeConfigurationsAbi}__
 */
export const useWatchIFdcRequestFeeConfigurationsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcRequestFeeConfigurationsAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcRequestFeeConfigurationsAbi}__ and `eventName` set to `"TypeAndSourceFeeRemoved"`
 */
export const useWatchIFdcRequestFeeConfigurationsTypeAndSourceFeeRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcRequestFeeConfigurationsAbi,
    eventName: 'TypeAndSourceFeeRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFdcRequestFeeConfigurationsAbi}__ and `eventName` set to `"TypeAndSourceFeeSet"`
 */
export const useWatchIFdcRequestFeeConfigurationsTypeAndSourceFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFdcRequestFeeConfigurationsAbi,
    eventName: 'TypeAndSourceFeeSet',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__
 */
export const useReadIFdcVerification = /*#__PURE__*/ createUseReadContract({
  abi: iFdcVerificationAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"fdcProtocolId"`
 */
export const useReadIFdcVerificationFdcProtocolId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'fdcProtocolId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"relay"`
 */
export const useReadIFdcVerificationRelay = /*#__PURE__*/ createUseReadContract(
  { abi: iFdcVerificationAbi, functionName: 'relay' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyAddressValidity"`
 */
export const useReadIFdcVerificationVerifyAddressValidity =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyAddressValidity',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyBalanceDecreasingTransaction"`
 */
export const useReadIFdcVerificationVerifyBalanceDecreasingTransaction =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyBalanceDecreasingTransaction',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyConfirmedBlockHeightExists"`
 */
export const useReadIFdcVerificationVerifyConfirmedBlockHeightExists =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyConfirmedBlockHeightExists',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyEVMTransaction"`
 */
export const useReadIFdcVerificationVerifyEvmTransaction =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyEVMTransaction',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyPayment"`
 */
export const useReadIFdcVerificationVerifyPayment =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyPayment',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyReferencedPaymentNonexistence"`
 */
export const useReadIFdcVerificationVerifyReferencedPaymentNonexistence =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyReferencedPaymentNonexistence',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFdcVerificationAbi}__ and `functionName` set to `"verifyWeb2Json"`
 */
export const useReadIFdcVerificationVerifyWeb2Json =
  /*#__PURE__*/ createUseReadContract({
    abi: iFdcVerificationAbi,
    functionName: 'verifyWeb2Json',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFeeCalculatorAbi}__
 */
export const useReadIFeeCalculator = /*#__PURE__*/ createUseReadContract({
  abi: iFeeCalculatorAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFeeCalculatorAbi}__ and `functionName` set to `"calculateFeeByIds"`
 */
export const useReadIFeeCalculatorCalculateFeeByIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFeeCalculatorAbi,
    functionName: 'calculateFeeByIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFeeCalculatorAbi}__ and `functionName` set to `"calculateFeeByIndices"`
 */
export const useReadIFeeCalculatorCalculateFeeByIndices =
  /*#__PURE__*/ createUseReadContract({
    abi: iFeeCalculatorAbi,
    functionName: 'calculateFeeByIndices',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__
 */
export const useReadIFlareAssetRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iFlareAssetRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"allAssetTypes"`
 */
export const useReadIFlareAssetRegistryAllAssetTypes =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'allAssetTypes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"allAssets"`
 */
export const useReadIFlareAssetRegistryAllAssets =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'allAssets',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"allAssetsOfType"`
 */
export const useReadIFlareAssetRegistryAllAssetsOfType =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'allAssetsOfType',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"allAssetsOfTypeWithSymbols"`
 */
export const useReadIFlareAssetRegistryAllAssetsOfTypeWithSymbols =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'allAssetsOfTypeWithSymbols',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"allAssetsWithSymbols"`
 */
export const useReadIFlareAssetRegistryAllAssetsWithSymbols =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'allAssetsWithSymbols',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"assetBySymbol"`
 */
export const useReadIFlareAssetRegistryAssetBySymbol =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'assetBySymbol',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"assetType"`
 */
export const useReadIFlareAssetRegistryAssetType =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'assetType',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"getAttribute"`
 */
export const useReadIFlareAssetRegistryGetAttribute =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'getAttribute',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"incentivePoolFor"`
 */
export const useReadIFlareAssetRegistryIncentivePoolFor =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'incentivePoolFor',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"isFlareAsset"`
 */
export const useReadIFlareAssetRegistryIsFlareAsset =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'isFlareAsset',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"maxDelegatesByPercent"`
 */
export const useReadIFlareAssetRegistryMaxDelegatesByPercent =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'maxDelegatesByPercent',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareAssetRegistryAbi}__ and `functionName` set to `"supportsFtsoDelegation"`
 */
export const useReadIFlareAssetRegistrySupportsFtsoDelegation =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareAssetRegistryAbi,
    functionName: 'supportsFtsoDelegation',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__
 */
export const useReadIFlareContractRegistry =
  /*#__PURE__*/ createUseReadContract({ abi: iFlareContractRegistryAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__ and `functionName` set to `"getAllContracts"`
 */
export const useReadIFlareContractRegistryGetAllContracts =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareContractRegistryAbi,
    functionName: 'getAllContracts',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__ and `functionName` set to `"getContractAddressByHash"`
 */
export const useReadIFlareContractRegistryGetContractAddressByHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareContractRegistryAbi,
    functionName: 'getContractAddressByHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__ and `functionName` set to `"getContractAddressByName"`
 */
export const useReadIFlareContractRegistryGetContractAddressByName =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareContractRegistryAbi,
    functionName: 'getContractAddressByName',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__ and `functionName` set to `"getContractAddressesByHash"`
 */
export const useReadIFlareContractRegistryGetContractAddressesByHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareContractRegistryAbi,
    functionName: 'getContractAddressesByHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareContractRegistryAbi}__ and `functionName` set to `"getContractAddressesByName"`
 */
export const useReadIFlareContractRegistryGetContractAddressesByName =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareContractRegistryAbi,
    functionName: 'getContractAddressesByName',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__
 */
export const useReadIFlareDaemonize = /*#__PURE__*/ createUseReadContract({
  abi: iFlareDaemonizeAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__ and `functionName` set to `"getContractName"`
 */
export const useReadIFlareDaemonizeGetContractName =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareDaemonizeAbi,
    functionName: 'getContractName',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__
 */
export const useWriteIFlareDaemonize = /*#__PURE__*/ createUseWriteContract({
  abi: iFlareDaemonizeAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__ and `functionName` set to `"daemonize"`
 */
export const useWriteIFlareDaemonizeDaemonize =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareDaemonizeAbi,
    functionName: 'daemonize',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__ and `functionName` set to `"switchToFallbackMode"`
 */
export const useWriteIFlareDaemonizeSwitchToFallbackMode =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareDaemonizeAbi,
    functionName: 'switchToFallbackMode',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__
 */
export const useSimulateIFlareDaemonize =
  /*#__PURE__*/ createUseSimulateContract({ abi: iFlareDaemonizeAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__ and `functionName` set to `"daemonize"`
 */
export const useSimulateIFlareDaemonizeDaemonize =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareDaemonizeAbi,
    functionName: 'daemonize',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareDaemonizeAbi}__ and `functionName` set to `"switchToFallbackMode"`
 */
export const useSimulateIFlareDaemonizeSwitchToFallbackMode =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareDaemonizeAbi,
    functionName: 'switchToFallbackMode',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__
 */
export const useReadIFlareSystemsCalculator =
  /*#__PURE__*/ createUseReadContract({ abi: iFlareSystemsCalculatorAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNoRewardsDurationBlocks"`
 */
export const useReadIFlareSystemsCalculatorSigningPolicySignNoRewardsDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNoRewardsDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNonPunishableDurationBlocks"`
 */
export const useReadIFlareSystemsCalculatorSigningPolicySignNonPunishableDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNonPunishableDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNonPunishableDurationSeconds"`
 */
export const useReadIFlareSystemsCalculatorSigningPolicySignNonPunishableDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNonPunishableDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__ and `functionName` set to `"wNatCapPPM"`
 */
export const useReadIFlareSystemsCalculatorWNatCapPpm =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsCalculatorAbi,
    functionName: 'wNatCapPPM',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__
 */
export const useWatchIFlareSystemsCalculatorEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFlareSystemsCalculatorAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsCalculatorAbi}__ and `eventName` set to `"VoterRegistrationInfo"`
 */
export const useWatchIFlareSystemsCalculatorVoterRegistrationInfoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsCalculatorAbi,
    eventName: 'VoterRegistrationInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__
 */
export const useReadIFlareSystemsManager = /*#__PURE__*/ createUseReadContract({
  abi: iFlareSystemsManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"firstRewardEpochStartTs"`
 */
export const useReadIFlareSystemsManagerFirstRewardEpochStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'firstRewardEpochStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"firstVotingRoundStartTs"`
 */
export const useReadIFlareSystemsManagerFirstVotingRoundStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'firstVotingRoundStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentRewardEpoch"`
 */
export const useReadIFlareSystemsManagerGetCurrentRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getCurrentRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentRewardEpochId"`
 */
export const useReadIFlareSystemsManagerGetCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getCurrentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentVotingEpochId"`
 */
export const useReadIFlareSystemsManagerGetCurrentVotingEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getCurrentVotingEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getSeed"`
 */
export const useReadIFlareSystemsManagerGetSeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getSeed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getStartVotingRoundId"`
 */
export const useReadIFlareSystemsManagerGetStartVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getStartVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getThreshold"`
 */
export const useReadIFlareSystemsManagerGetThreshold =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getThreshold',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getVotePowerBlock"`
 */
export const useReadIFlareSystemsManagerGetVotePowerBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getVotePowerBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterRegistrationData"`
 */
export const useReadIFlareSystemsManagerGetVoterRegistrationData =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'getVoterRegistrationData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"isVoterRegistrationEnabled"`
 */
export const useReadIFlareSystemsManagerIsVoterRegistrationEnabled =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'isVoterRegistrationEnabled',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"rewardEpochDurationSeconds"`
 */
export const useReadIFlareSystemsManagerRewardEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'rewardEpochDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"votingEpochDurationSeconds"`
 */
export const useReadIFlareSystemsManagerVotingEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'votingEpochDurationSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__
 */
export const useWriteIFlareSystemsManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iFlareSystemsManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signNewSigningPolicy"`
 */
export const useWriteIFlareSystemsManagerSignNewSigningPolicy =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signNewSigningPolicy',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signRewards"`
 */
export const useWriteIFlareSystemsManagerSignRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signUptimeVote"`
 */
export const useWriteIFlareSystemsManagerSignUptimeVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signUptimeVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVote"`
 */
export const useWriteIFlareSystemsManagerSubmitUptimeVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'submitUptimeVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__
 */
export const useSimulateIFlareSystemsManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iFlareSystemsManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signNewSigningPolicy"`
 */
export const useSimulateIFlareSystemsManagerSignNewSigningPolicy =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signNewSigningPolicy',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signRewards"`
 */
export const useSimulateIFlareSystemsManagerSignRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"signUptimeVote"`
 */
export const useSimulateIFlareSystemsManagerSignUptimeVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'signUptimeVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVote"`
 */
export const useSimulateIFlareSystemsManagerSubmitUptimeVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFlareSystemsManagerAbi,
    functionName: 'submitUptimeVote',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__
 */
export const useWatchIFlareSystemsManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFlareSystemsManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"RandomAcquisitionStarted"`
 */
export const useWatchIFlareSystemsManagerRandomAcquisitionStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'RandomAcquisitionStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"RewardEpochStarted"`
 */
export const useWatchIFlareSystemsManagerRewardEpochStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'RewardEpochStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"RewardsSigned"`
 */
export const useWatchIFlareSystemsManagerRewardsSignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'RewardsSigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"SignUptimeVoteEnabled"`
 */
export const useWatchIFlareSystemsManagerSignUptimeVoteEnabledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'SignUptimeVoteEnabled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"SigningPolicySigned"`
 */
export const useWatchIFlareSystemsManagerSigningPolicySignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'SigningPolicySigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"UptimeVoteSigned"`
 */
export const useWatchIFlareSystemsManagerUptimeVoteSignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'UptimeVoteSigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"UptimeVoteSubmitted"`
 */
export const useWatchIFlareSystemsManagerUptimeVoteSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'UptimeVoteSubmitted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFlareSystemsManagerAbi}__ and `eventName` set to `"VotePowerBlockSelected"`
 */
export const useWatchIFlareSystemsManagerVotePowerBlockSelectedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFlareSystemsManagerAbi,
    eventName: 'VotePowerBlockSelected',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__
 */
export const useReadIFtso = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"active"`
 */
export const useReadIFtsoActive = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'active',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentEpochId"`
 */
export const useReadIFtsoGetCurrentEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getCurrentEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentPrice"`
 */
export const useReadIFtsoGetCurrentPrice = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'getCurrentPrice',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentPriceDetails"`
 */
export const useReadIFtsoGetCurrentPriceDetails =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getCurrentPriceDetails',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentPriceFromTrustedProviders"`
 */
export const useReadIFtsoGetCurrentPriceFromTrustedProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getCurrentPriceFromTrustedProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentPriceWithDecimals"`
 */
export const useReadIFtsoGetCurrentPriceWithDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getCurrentPriceWithDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentPriceWithDecimalsFromTrustedProviders"`
 */
export const useReadIFtsoGetCurrentPriceWithDecimalsFromTrustedProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getCurrentPriceWithDecimalsFromTrustedProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadIFtsoGetCurrentRandom = /*#__PURE__*/ createUseReadContract(
  { abi: iFtsoAbi, functionName: 'getCurrentRandom' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getEpochId"`
 */
export const useReadIFtsoGetEpochId = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'getEpochId',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getEpochPrice"`
 */
export const useReadIFtsoGetEpochPrice = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'getEpochPrice',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getEpochPriceForVoter"`
 */
export const useReadIFtsoGetEpochPriceForVoter =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getEpochPriceForVoter',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getPriceEpochConfiguration"`
 */
export const useReadIFtsoGetPriceEpochConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getPriceEpochConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getPriceEpochData"`
 */
export const useReadIFtsoGetPriceEpochData =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoAbi,
    functionName: 'getPriceEpochData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"getRandom"`
 */
export const useReadIFtsoGetRandom = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'getRandom',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIFtsoSymbol = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoAbi}__
 */
export const useWatchIFtsoEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iFtsoAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoAbi}__ and `eventName` set to `"LowTurnout"`
 */
export const useWatchIFtsoLowTurnoutEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoAbi,
    eventName: 'LowTurnout',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoAbi}__ and `eventName` set to `"PriceEpochInitializedOnFtso"`
 */
export const useWatchIFtsoPriceEpochInitializedOnFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoAbi,
    eventName: 'PriceEpochInitializedOnFtso',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoAbi}__ and `eventName` set to `"PriceFinalized"`
 */
export const useWatchIFtsoPriceFinalizedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoAbi,
    eventName: 'PriceFinalized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoAbi}__ and `eventName` set to `"PriceRevealed"`
 */
export const useWatchIFtsoPriceRevealedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoAbi,
    eventName: 'PriceRevealed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__
 */
export const useReadIFtsoFeedDecimals = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoFeedDecimalsAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"decimalsUpdateOffset"`
 */
export const useReadIFtsoFeedDecimalsDecimalsUpdateOffset =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'decimalsUpdateOffset',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"defaultDecimals"`
 */
export const useReadIFtsoFeedDecimalsDefaultDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'defaultDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"getCurrentDecimals"`
 */
export const useReadIFtsoFeedDecimalsGetCurrentDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'getCurrentDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"getCurrentDecimalsBulk"`
 */
export const useReadIFtsoFeedDecimalsGetCurrentDecimalsBulk =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'getCurrentDecimalsBulk',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"getDecimals"`
 */
export const useReadIFtsoFeedDecimalsGetDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'getDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"getDecimalsBulk"`
 */
export const useReadIFtsoFeedDecimalsGetDecimalsBulk =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'getDecimalsBulk',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `functionName` set to `"getScheduledDecimalsChanges"`
 */
export const useReadIFtsoFeedDecimalsGetScheduledDecimalsChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedDecimalsAbi,
    functionName: 'getScheduledDecimalsChanges',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__
 */
export const useWatchIFtsoFeedDecimalsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFtsoFeedDecimalsAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoFeedDecimalsAbi}__ and `eventName` set to `"DecimalsChanged"`
 */
export const useWatchIFtsoFeedDecimalsDecimalsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoFeedDecimalsAbi,
    eventName: 'DecimalsChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedIdConverterAbi}__
 */
export const useReadIFtsoFeedIdConverter = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoFeedIdConverterAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedIdConverterAbi}__ and `functionName` set to `"getFeedCategoryAndName"`
 */
export const useReadIFtsoFeedIdConverterGetFeedCategoryAndName =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedIdConverterAbi,
    functionName: 'getFeedCategoryAndName',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedIdConverterAbi}__ and `functionName` set to `"getFeedId"`
 */
export const useReadIFtsoFeedIdConverterGetFeedId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedIdConverterAbi,
    functionName: 'getFeedId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__
 */
export const useReadIFtsoFeedPublisher = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoFeedPublisherAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"feedsHistorySize"`
 */
export const useReadIFtsoFeedPublisherFeedsHistorySize =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'feedsHistorySize',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"ftsoProtocolId"`
 */
export const useReadIFtsoFeedPublisherFtsoProtocolId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'ftsoProtocolId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"getCurrentFeed"`
 */
export const useReadIFtsoFeedPublisherGetCurrentFeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'getCurrentFeed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"getFeed"`
 */
export const useReadIFtsoFeedPublisherGetFeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'getFeed',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__
 */
export const useWriteIFtsoFeedPublisher = /*#__PURE__*/ createUseWriteContract({
  abi: iFtsoFeedPublisherAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"publish"`
 */
export const useWriteIFtsoFeedPublisherPublish =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'publish',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__
 */
export const useSimulateIFtsoFeedPublisher =
  /*#__PURE__*/ createUseSimulateContract({ abi: iFtsoFeedPublisherAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `functionName` set to `"publish"`
 */
export const useSimulateIFtsoFeedPublisherPublish =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoFeedPublisherAbi,
    functionName: 'publish',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__
 */
export const useWatchIFtsoFeedPublisherEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFtsoFeedPublisherAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoFeedPublisherAbi}__ and `eventName` set to `"FtsoFeedPublished"`
 */
export const useWatchIFtsoFeedPublisherFtsoFeedPublishedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoFeedPublisherAbi,
    eventName: 'FtsoFeedPublished',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__
 */
export const useWriteIFtsoGenesis = /*#__PURE__*/ createUseWriteContract({
  abi: iFtsoGenesisAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__ and `functionName` set to `"revealPriceSubmitter"`
 */
export const useWriteIFtsoGenesisRevealPriceSubmitter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoGenesisAbi,
    functionName: 'revealPriceSubmitter',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__ and `functionName` set to `"wNatVotePowerCached"`
 */
export const useWriteIFtsoGenesisWNatVotePowerCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoGenesisAbi,
    functionName: 'wNatVotePowerCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__
 */
export const useSimulateIFtsoGenesis = /*#__PURE__*/ createUseSimulateContract({
  abi: iFtsoGenesisAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__ and `functionName` set to `"revealPriceSubmitter"`
 */
export const useSimulateIFtsoGenesisRevealPriceSubmitter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoGenesisAbi,
    functionName: 'revealPriceSubmitter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoGenesisAbi}__ and `functionName` set to `"wNatVotePowerCached"`
 */
export const useSimulateIFtsoGenesisWNatVotePowerCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoGenesisAbi,
    functionName: 'wNatVotePowerCached',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoInflationConfigurationsAbi}__
 */
export const useReadIFtsoInflationConfigurations =
  /*#__PURE__*/ createUseReadContract({ abi: iFtsoInflationConfigurationsAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoInflationConfigurationsAbi}__ and `functionName` set to `"getFtsoConfiguration"`
 */
export const useReadIFtsoInflationConfigurationsGetFtsoConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoInflationConfigurationsAbi,
    functionName: 'getFtsoConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoInflationConfigurationsAbi}__ and `functionName` set to `"getFtsoConfigurations"`
 */
export const useReadIFtsoInflationConfigurationsGetFtsoConfigurations =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoInflationConfigurationsAbi,
    functionName: 'getFtsoConfigurations',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__
 */
export const useReadIFtsoManager = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"active"`
 */
export const useReadIFtsoManagerActive = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoManagerAbi,
  functionName: 'active',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getCurrentPriceEpochData"`
 */
export const useReadIFtsoManagerGetCurrentPriceEpochData =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getCurrentPriceEpochData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getCurrentPriceEpochId"`
 */
export const useReadIFtsoManagerGetCurrentPriceEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getCurrentPriceEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getCurrentRewardEpoch"`
 */
export const useReadIFtsoManagerGetCurrentRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getCurrentRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getFallbackMode"`
 */
export const useReadIFtsoManagerGetFallbackMode =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getFallbackMode',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getFtsos"`
 */
export const useReadIFtsoManagerGetFtsos = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoManagerAbi,
  functionName: 'getFtsos',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getPriceEpochConfiguration"`
 */
export const useReadIFtsoManagerGetPriceEpochConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getPriceEpochConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getRewardEpochConfiguration"`
 */
export const useReadIFtsoManagerGetRewardEpochConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getRewardEpochConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getRewardEpochToExpireNext"`
 */
export const useReadIFtsoManagerGetRewardEpochToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getRewardEpochToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `functionName` set to `"getRewardEpochVotePowerBlock"`
 */
export const useReadIFtsoManagerGetRewardEpochVotePowerBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerAbi,
    functionName: 'getRewardEpochVotePowerBlock',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__
 */
export const useWatchIFtsoManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFtsoManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"AccruingUnearnedRewardsFailed"`
 */
export const useWatchIFtsoManagerAccruingUnearnedRewardsFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'AccruingUnearnedRewardsFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"DistributingRewardsFailed"`
 */
export const useWatchIFtsoManagerDistributingRewardsFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'DistributingRewardsFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"FallbackMode"`
 */
export const useWatchIFtsoManagerFallbackModeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'FallbackMode',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"FinalizingPriceEpochFailed"`
 */
export const useWatchIFtsoManagerFinalizingPriceEpochFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'FinalizingPriceEpochFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"FtsoAdded"`
 */
export const useWatchIFtsoManagerFtsoAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'FtsoAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"FtsoFallbackMode"`
 */
export const useWatchIFtsoManagerFtsoFallbackModeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'FtsoFallbackMode',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"InitializingCurrentEpochStateForRevealFailed"`
 */
export const useWatchIFtsoManagerInitializingCurrentEpochStateForRevealFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'InitializingCurrentEpochStateForRevealFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"PriceEpochFinalized"`
 */
export const useWatchIFtsoManagerPriceEpochFinalizedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'PriceEpochFinalized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"RewardEpochFinalized"`
 */
export const useWatchIFtsoManagerRewardEpochFinalizedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'RewardEpochFinalized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoManagerAbi}__ and `eventName` set to `"UseGoodRandomSet"`
 */
export const useWatchIFtsoManagerUseGoodRandomSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoManagerAbi,
    eventName: 'UseGoodRandomSet',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerGenesisAbi}__
 */
export const useReadIFtsoManagerGenesis = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoManagerGenesisAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoManagerGenesisAbi}__ and `functionName` set to `"getCurrentPriceEpochId"`
 */
export const useReadIFtsoManagerGenesisGetCurrentPriceEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoManagerGenesisAbi,
    functionName: 'getCurrentPriceEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__
 */
export const useReadIFtsoRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getAllCurrentPrices"`
 */
export const useReadIFtsoRegistryGetAllCurrentPrices =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getAllCurrentPrices',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getCurrentPrice"`
 */
export const useReadIFtsoRegistryGetCurrentPrice =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getCurrentPrice',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getCurrentPriceWithDecimals"`
 */
export const useReadIFtsoRegistryGetCurrentPriceWithDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getCurrentPriceWithDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getCurrentPricesByIndices"`
 */
export const useReadIFtsoRegistryGetCurrentPricesByIndices =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getCurrentPricesByIndices',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getCurrentPricesBySymbols"`
 */
export const useReadIFtsoRegistryGetCurrentPricesBySymbols =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getCurrentPricesBySymbols',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getFtso"`
 */
export const useReadIFtsoRegistryGetFtso = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoRegistryAbi,
  functionName: 'getFtso',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getFtsoBySymbol"`
 */
export const useReadIFtsoRegistryGetFtsoBySymbol =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getFtsoBySymbol',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getFtsoIndex"`
 */
export const useReadIFtsoRegistryGetFtsoIndex =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getFtsoIndex',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getFtsoSymbol"`
 */
export const useReadIFtsoRegistryGetFtsoSymbol =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getFtsoSymbol',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getFtsos"`
 */
export const useReadIFtsoRegistryGetFtsos = /*#__PURE__*/ createUseReadContract(
  { abi: iFtsoRegistryAbi, functionName: 'getFtsos' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedFtsos"`
 */
export const useReadIFtsoRegistryGetSupportedFtsos =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedFtsos',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedIndices"`
 */
export const useReadIFtsoRegistryGetSupportedIndices =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedIndices',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedIndicesAndFtsos"`
 */
export const useReadIFtsoRegistryGetSupportedIndicesAndFtsos =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedIndicesAndFtsos',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedIndicesAndSymbols"`
 */
export const useReadIFtsoRegistryGetSupportedIndicesAndSymbols =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedIndicesAndSymbols',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedIndicesSymbolsAndFtsos"`
 */
export const useReadIFtsoRegistryGetSupportedIndicesSymbolsAndFtsos =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedIndicesSymbolsAndFtsos',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedSymbols"`
 */
export const useReadIFtsoRegistryGetSupportedSymbols =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedSymbols',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryAbi}__ and `functionName` set to `"getSupportedSymbolsAndFtsos"`
 */
export const useReadIFtsoRegistryGetSupportedSymbolsAndFtsos =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryAbi,
    functionName: 'getSupportedSymbolsAndFtsos',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryGenesisAbi}__
 */
export const useReadIFtsoRegistryGenesis = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoRegistryGenesisAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRegistryGenesisAbi}__ and `functionName` set to `"getFtsos"`
 */
export const useReadIFtsoRegistryGenesisGetFtsos =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRegistryGenesisAbi,
    functionName: 'getFtsos',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__
 */
export const useReadIFtsoRewardManager = /*#__PURE__*/ createUseReadContract({
  abi: iFtsoRewardManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"active"`
 */
export const useReadIFtsoRewardManagerActive =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'active',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getClaimedReward"`
 */
export const useReadIFtsoRewardManagerGetClaimedReward =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getClaimedReward',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getCurrentRewardEpoch"`
 */
export const useReadIFtsoRewardManagerGetCurrentRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getCurrentRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getDataProviderCurrentFeePercentage"`
 */
export const useReadIFtsoRewardManagerGetDataProviderCurrentFeePercentage =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getDataProviderCurrentFeePercentage',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getDataProviderFeePercentage"`
 */
export const useReadIFtsoRewardManagerGetDataProviderFeePercentage =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getDataProviderFeePercentage',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getDataProviderPerformanceInfo"`
 */
export const useReadIFtsoRewardManagerGetDataProviderPerformanceInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getDataProviderPerformanceInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getDataProviderScheduledFeePercentageChanges"`
 */
export const useReadIFtsoRewardManagerGetDataProviderScheduledFeePercentageChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getDataProviderScheduledFeePercentageChanges',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getEpochReward"`
 */
export const useReadIFtsoRewardManagerGetEpochReward =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getEpochReward',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getEpochsWithClaimableRewards"`
 */
export const useReadIFtsoRewardManagerGetEpochsWithClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getEpochsWithClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getEpochsWithUnclaimedRewards"`
 */
export const useReadIFtsoRewardManagerGetEpochsWithUnclaimedRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getEpochsWithUnclaimedRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getInitialRewardEpoch"`
 */
export const useReadIFtsoRewardManagerGetInitialRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getInitialRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getRewardEpochToExpireNext"`
 */
export const useReadIFtsoRewardManagerGetRewardEpochToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getRewardEpochToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getRewardEpochVotePowerBlock"`
 */
export const useReadIFtsoRewardManagerGetRewardEpochVotePowerBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getRewardEpochVotePowerBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getStateOfRewards"`
 */
export const useReadIFtsoRewardManagerGetStateOfRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getStateOfRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"getStateOfRewardsFromDataProviders"`
 */
export const useReadIFtsoRewardManagerGetStateOfRewardsFromDataProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'getStateOfRewardsFromDataProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"nextClaimableRewardEpoch"`
 */
export const useReadIFtsoRewardManagerNextClaimableRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'nextClaimableRewardEpoch',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__
 */
export const useWriteIFtsoRewardManager = /*#__PURE__*/ createUseWriteContract({
  abi: iFtsoRewardManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useWriteIFtsoRewardManagerAutoClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteIFtsoRewardManagerClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimFromDataProviders"`
 */
export const useWriteIFtsoRewardManagerClaimFromDataProviders =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimFromDataProviders',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimReward"`
 */
export const useWriteIFtsoRewardManagerClaimReward =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimReward',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimRewardFromDataProviders"`
 */
export const useWriteIFtsoRewardManagerClaimRewardFromDataProviders =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimRewardFromDataProviders',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"setDataProviderFeePercentage"`
 */
export const useWriteIFtsoRewardManagerSetDataProviderFeePercentage =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'setDataProviderFeePercentage',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__
 */
export const useSimulateIFtsoRewardManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iFtsoRewardManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useSimulateIFtsoRewardManagerAutoClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateIFtsoRewardManagerClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimFromDataProviders"`
 */
export const useSimulateIFtsoRewardManagerClaimFromDataProviders =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimFromDataProviders',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimReward"`
 */
export const useSimulateIFtsoRewardManagerClaimReward =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimReward',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"claimRewardFromDataProviders"`
 */
export const useSimulateIFtsoRewardManagerClaimRewardFromDataProviders =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'claimRewardFromDataProviders',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `functionName` set to `"setDataProviderFeePercentage"`
 */
export const useSimulateIFtsoRewardManagerSetDataProviderFeePercentage =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardManagerAbi,
    functionName: 'setDataProviderFeePercentage',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__
 */
export const useWatchIFtsoRewardManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iFtsoRewardManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"FeePercentageChanged"`
 */
export const useWatchIFtsoRewardManagerFeePercentageChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'FeePercentageChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"FtsoRewardManagerActivated"`
 */
export const useWatchIFtsoRewardManagerFtsoRewardManagerActivatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'FtsoRewardManagerActivated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"FtsoRewardManagerDeactivated"`
 */
export const useWatchIFtsoRewardManagerFtsoRewardManagerDeactivatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'FtsoRewardManagerDeactivated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"RewardClaimed"`
 */
export const useWatchIFtsoRewardManagerRewardClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'RewardClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"RewardClaimsEnabled"`
 */
export const useWatchIFtsoRewardManagerRewardClaimsEnabledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'RewardClaimsEnabled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"RewardClaimsExpired"`
 */
export const useWatchIFtsoRewardManagerRewardClaimsExpiredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'RewardClaimsExpired',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"RewardsDistributed"`
 */
export const useWatchIFtsoRewardManagerRewardsDistributedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'RewardsDistributed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardManagerAbi}__ and `eventName` set to `"UnearnedRewardsAccrued"`
 */
export const useWatchIFtsoRewardManagerUnearnedRewardsAccruedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardManagerAbi,
    eventName: 'UnearnedRewardsAccrued',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__
 */
export const useReadIFtsoRewardOffersManager =
  /*#__PURE__*/ createUseReadContract({ abi: iFtsoRewardOffersManagerAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `functionName` set to `"minimalRewardsOfferValueWei"`
 */
export const useReadIFtsoRewardOffersManagerMinimalRewardsOfferValueWei =
  /*#__PURE__*/ createUseReadContract({
    abi: iFtsoRewardOffersManagerAbi,
    functionName: 'minimalRewardsOfferValueWei',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__
 */
export const useWriteIFtsoRewardOffersManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iFtsoRewardOffersManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `functionName` set to `"offerRewards"`
 */
export const useWriteIFtsoRewardOffersManagerOfferRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iFtsoRewardOffersManagerAbi,
    functionName: 'offerRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__
 */
export const useSimulateIFtsoRewardOffersManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iFtsoRewardOffersManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `functionName` set to `"offerRewards"`
 */
export const useSimulateIFtsoRewardOffersManagerOfferRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iFtsoRewardOffersManagerAbi,
    functionName: 'offerRewards',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__
 */
export const useWatchIFtsoRewardOffersManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardOffersManagerAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `eventName` set to `"InflationRewardsOffered"`
 */
export const useWatchIFtsoRewardOffersManagerInflationRewardsOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardOffersManagerAbi,
    eventName: 'InflationRewardsOffered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `eventName` set to `"MinimalRewardsOfferValueSet"`
 */
export const useWatchIFtsoRewardOffersManagerMinimalRewardsOfferValueSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardOffersManagerAbi,
    eventName: 'MinimalRewardsOfferValueSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iFtsoRewardOffersManagerAbi}__ and `eventName` set to `"RewardsOffered"`
 */
export const useWatchIFtsoRewardOffersManagerRewardsOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iFtsoRewardOffersManagerAbi,
    eventName: 'RewardsOffered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__
 */
export const useReadIGenericRewardManager = /*#__PURE__*/ createUseReadContract(
  { abi: iGenericRewardManagerAbi },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"active"`
 */
export const useReadIGenericRewardManagerActive =
  /*#__PURE__*/ createUseReadContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'active',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"allowedClaimRecipients"`
 */
export const useReadIGenericRewardManagerAllowedClaimRecipients =
  /*#__PURE__*/ createUseReadContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'allowedClaimRecipients',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"claimExecutors"`
 */
export const useReadIGenericRewardManagerClaimExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'claimExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"getStateOfRewards"`
 */
export const useReadIGenericRewardManagerGetStateOfRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'getStateOfRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__
 */
export const useWriteIGenericRewardManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iGenericRewardManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteIGenericRewardManagerClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useWriteIGenericRewardManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIGenericRewardManagerSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__
 */
export const useSimulateIGenericRewardManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iGenericRewardManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateIGenericRewardManagerClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useSimulateIGenericRewardManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIGenericRewardManagerSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGenericRewardManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__
 */
export const useWatchIGenericRewardManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iGenericRewardManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"AllowedClaimRecipientsChanged"`
 */
export const useWatchIGenericRewardManagerAllowedClaimRecipientsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'AllowedClaimRecipientsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"ClaimExecutorsChanged"`
 */
export const useWatchIGenericRewardManagerClaimExecutorsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'ClaimExecutorsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"RewardClaimed"`
 */
export const useWatchIGenericRewardManagerRewardClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'RewardClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"RewardManagerActivated"`
 */
export const useWatchIGenericRewardManagerRewardManagerActivatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'RewardManagerActivated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"RewardManagerDeactivated"`
 */
export const useWatchIGenericRewardManagerRewardManagerDeactivatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'RewardManagerDeactivated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGenericRewardManagerAbi}__ and `eventName` set to `"RewardsDistributed"`
 */
export const useWatchIGenericRewardManagerRewardsDistributedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGenericRewardManagerAbi,
    eventName: 'RewardsDistributed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceSettingsAbi}__
 */
export const useReadIGovernanceSettings = /*#__PURE__*/ createUseReadContract({
  abi: iGovernanceSettingsAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceSettingsAbi}__ and `functionName` set to `"getExecutors"`
 */
export const useReadIGovernanceSettingsGetExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceSettingsAbi,
    functionName: 'getExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceSettingsAbi}__ and `functionName` set to `"getGovernanceAddress"`
 */
export const useReadIGovernanceSettingsGetGovernanceAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceSettingsAbi,
    functionName: 'getGovernanceAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceSettingsAbi}__ and `functionName` set to `"getTimelock"`
 */
export const useReadIGovernanceSettingsGetTimelock =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceSettingsAbi,
    functionName: 'getTimelock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceSettingsAbi}__ and `functionName` set to `"isExecutor"`
 */
export const useReadIGovernanceSettingsIsExecutor =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceSettingsAbi,
    functionName: 'isExecutor',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__
 */
export const useReadIGovernanceVotePower = /*#__PURE__*/ createUseReadContract({
  abi: iGovernanceVotePowerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"getDelegateOfAt"`
 */
export const useReadIGovernanceVotePowerGetDelegateOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'getDelegateOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"getDelegateOfAtNow"`
 */
export const useReadIGovernanceVotePowerGetDelegateOfAtNow =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'getDelegateOfAtNow',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"getVotes"`
 */
export const useReadIGovernanceVotePowerGetVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'getVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIGovernanceVotePowerVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__
 */
export const useWriteIGovernanceVotePower =
  /*#__PURE__*/ createUseWriteContract({ abi: iGovernanceVotePowerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIGovernanceVotePowerDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"undelegate"`
 */
export const useWriteIGovernanceVotePowerUndelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'undelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__
 */
export const useSimulateIGovernanceVotePower =
  /*#__PURE__*/ createUseSimulateContract({ abi: iGovernanceVotePowerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIGovernanceVotePowerDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernanceVotePowerAbi}__ and `functionName` set to `"undelegate"`
 */
export const useSimulateIGovernanceVotePowerUndelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernanceVotePowerAbi,
    functionName: 'undelegate',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__
 */
export const useReadIGovernor = /*#__PURE__*/ createUseReadContract({
  abi: iGovernorAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"getProposalInfo"`
 */
export const useReadIGovernorGetProposalInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernorAbi,
    functionName: 'getProposalInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"getProposalVotes"`
 */
export const useReadIGovernorGetProposalVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iGovernorAbi,
    functionName: 'getProposalVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"getVotes"`
 */
export const useReadIGovernorGetVotes = /*#__PURE__*/ createUseReadContract({
  abi: iGovernorAbi,
  functionName: 'getVotes',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"hasVoted"`
 */
export const useReadIGovernorHasVoted = /*#__PURE__*/ createUseReadContract({
  abi: iGovernorAbi,
  functionName: 'hasVoted',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"state"`
 */
export const useReadIGovernorState = /*#__PURE__*/ createUseReadContract({
  abi: iGovernorAbi,
  functionName: 'state',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__
 */
export const useWriteIGovernor = /*#__PURE__*/ createUseWriteContract({
  abi: iGovernorAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"cancel"`
 */
export const useWriteIGovernorCancel = /*#__PURE__*/ createUseWriteContract({
  abi: iGovernorAbi,
  functionName: 'cancel',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVote"`
 */
export const useWriteIGovernorCastVote = /*#__PURE__*/ createUseWriteContract({
  abi: iGovernorAbi,
  functionName: 'castVote',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVoteBySig"`
 */
export const useWriteIGovernorCastVoteBySig =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGovernorAbi,
    functionName: 'castVoteBySig',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVoteWithReason"`
 */
export const useWriteIGovernorCastVoteWithReason =
  /*#__PURE__*/ createUseWriteContract({
    abi: iGovernorAbi,
    functionName: 'castVoteWithReason',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"execute"`
 */
export const useWriteIGovernorExecute = /*#__PURE__*/ createUseWriteContract({
  abi: iGovernorAbi,
  functionName: 'execute',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__
 */
export const useSimulateIGovernor = /*#__PURE__*/ createUseSimulateContract({
  abi: iGovernorAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"cancel"`
 */
export const useSimulateIGovernorCancel =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernorAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVote"`
 */
export const useSimulateIGovernorCastVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernorAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVoteBySig"`
 */
export const useSimulateIGovernorCastVoteBySig =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernorAbi,
    functionName: 'castVoteBySig',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"castVoteWithReason"`
 */
export const useSimulateIGovernorCastVoteWithReason =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernorAbi,
    functionName: 'castVoteWithReason',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iGovernorAbi}__ and `functionName` set to `"execute"`
 */
export const useSimulateIGovernorExecute =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iGovernorAbi,
    functionName: 'execute',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGovernorAbi}__
 */
export const useWatchIGovernorEvent = /*#__PURE__*/ createUseWatchContractEvent(
  { abi: iGovernorAbi },
)

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGovernorAbi}__ and `eventName` set to `"ProposalCanceled"`
 */
export const useWatchIGovernorProposalCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGovernorAbi,
    eventName: 'ProposalCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGovernorAbi}__ and `eventName` set to `"ProposalCreated"`
 */
export const useWatchIGovernorProposalCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGovernorAbi,
    eventName: 'ProposalCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGovernorAbi}__ and `eventName` set to `"ProposalExecuted"`
 */
export const useWatchIGovernorProposalExecutedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGovernorAbi,
    eventName: 'ProposalExecuted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iGovernorAbi}__ and `eventName` set to `"VoteCast"`
 */
export const useWatchIGovernorVoteCastEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iGovernorAbi,
    eventName: 'VoteCast',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiAddressUpdatableAbi}__
 */
export const useWriteIiAddressUpdatable = /*#__PURE__*/ createUseWriteContract({
  abi: iiAddressUpdatableAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiAddressUpdatableAbi}__ and `functionName` set to `"updateContractAddresses"`
 */
export const useWriteIiAddressUpdatableUpdateContractAddresses =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiAddressUpdatableAbi,
    functionName: 'updateContractAddresses',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiAddressUpdatableAbi}__
 */
export const useSimulateIiAddressUpdatable =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiAddressUpdatableAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiAddressUpdatableAbi}__ and `functionName` set to `"updateContractAddresses"`
 */
export const useSimulateIiAddressUpdatableUpdateContractAddresses =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiAddressUpdatableAbi,
    functionName: 'updateContractAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__
 */
export const useReadIiAddressUpdater = /*#__PURE__*/ createUseReadContract({
  abi: iiAddressUpdaterAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__ and `functionName` set to `"getContractAddress"`
 */
export const useReadIiAddressUpdaterGetContractAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiAddressUpdaterAbi,
    functionName: 'getContractAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__ and `functionName` set to `"getContractAddressByHash"`
 */
export const useReadIiAddressUpdaterGetContractAddressByHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiAddressUpdaterAbi,
    functionName: 'getContractAddressByHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__ and `functionName` set to `"getContractAddresses"`
 */
export const useReadIiAddressUpdaterGetContractAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiAddressUpdaterAbi,
    functionName: 'getContractAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__ and `functionName` set to `"getContractAddressesByHash"`
 */
export const useReadIiAddressUpdaterGetContractAddressesByHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiAddressUpdaterAbi,
    functionName: 'getContractAddressesByHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiAddressUpdaterAbi}__ and `functionName` set to `"getContractNamesAndAddresses"`
 */
export const useReadIiAddressUpdaterGetContractNamesAndAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiAddressUpdaterAbi,
    functionName: 'getContractNamesAndAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__
 */
export const useReadIiClaimSetupManager = /*#__PURE__*/ createUseReadContract({
  abi: iiClaimSetupManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"accountToDelegationAccount"`
 */
export const useReadIiClaimSetupManagerAccountToDelegationAccount =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'accountToDelegationAccount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"allowedClaimRecipients"`
 */
export const useReadIiClaimSetupManagerAllowedClaimRecipients =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'allowedClaimRecipients',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"checkExecutorAndAllowedRecipient"`
 */
export const useReadIiClaimSetupManagerCheckExecutorAndAllowedRecipient =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'checkExecutorAndAllowedRecipient',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"claimExecutors"`
 */
export const useReadIiClaimSetupManagerClaimExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'claimExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getAutoClaimAddressesAndExecutorFee"`
 */
export const useReadIiClaimSetupManagerGetAutoClaimAddressesAndExecutorFee =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getAutoClaimAddressesAndExecutorFee',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getDelegationAccountData"`
 */
export const useReadIiClaimSetupManagerGetDelegationAccountData =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getDelegationAccountData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorCurrentFeeValue"`
 */
export const useReadIiClaimSetupManagerGetExecutorCurrentFeeValue =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getExecutorCurrentFeeValue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorFeeValue"`
 */
export const useReadIiClaimSetupManagerGetExecutorFeeValue =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getExecutorFeeValue',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorInfo"`
 */
export const useReadIiClaimSetupManagerGetExecutorInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getExecutorInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getExecutorScheduledFeeValueChanges"`
 */
export const useReadIiClaimSetupManagerGetExecutorScheduledFeeValueChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getExecutorScheduledFeeValueChanges',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"getRegisteredExecutors"`
 */
export const useReadIiClaimSetupManagerGetRegisteredExecutors =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'getRegisteredExecutors',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"isClaimExecutor"`
 */
export const useReadIiClaimSetupManagerIsClaimExecutor =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'isClaimExecutor',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"wNat"`
 */
export const useReadIiClaimSetupManagerWNat =
  /*#__PURE__*/ createUseReadContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'wNat',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__
 */
export const useWriteIiClaimSetupManager = /*#__PURE__*/ createUseWriteContract(
  { abi: iiClaimSetupManagerAbi },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useWriteIiClaimSetupManagerBatchDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIiClaimSetupManagerDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"delegateGovernance"`
 */
export const useWriteIiClaimSetupManagerDelegateGovernance =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'delegateGovernance',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"disableDelegationAccount"`
 */
export const useWriteIiClaimSetupManagerDisableDelegationAccount =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'disableDelegationAccount',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"enableDelegationAccount"`
 */
export const useWriteIiClaimSetupManagerEnableDelegationAccount =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'enableDelegationAccount',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"registerExecutor"`
 */
export const useWriteIiClaimSetupManagerRegisterExecutor =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'registerExecutor',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useWriteIiClaimSetupManagerRevokeDelegationAt =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useWriteIiClaimSetupManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setAutoClaiming"`
 */
export const useWriteIiClaimSetupManagerSetAutoClaiming =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setAutoClaiming',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIiClaimSetupManagerSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setLibraryAddress"`
 */
export const useWriteIiClaimSetupManagerSetLibraryAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setLibraryAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setMaxFeeValueWei"`
 */
export const useWriteIiClaimSetupManagerSetMaxFeeValueWei =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setMaxFeeValueWei',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setMinFeeValueWei"`
 */
export const useWriteIiClaimSetupManagerSetMinFeeValueWei =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setMinFeeValueWei',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setRegisterExecutorFeeValueWei"`
 */
export const useWriteIiClaimSetupManagerSetRegisterExecutorFeeValueWei =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setRegisterExecutorFeeValueWei',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useWriteIiClaimSetupManagerTransferExternalToken =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useWriteIiClaimSetupManagerUndelegateAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"undelegateGovernance"`
 */
export const useWriteIiClaimSetupManagerUndelegateGovernance =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'undelegateGovernance',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"unregisterExecutor"`
 */
export const useWriteIiClaimSetupManagerUnregisterExecutor =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'unregisterExecutor',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"updateExecutorFeeValue"`
 */
export const useWriteIiClaimSetupManagerUpdateExecutorFeeValue =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'updateExecutorFeeValue',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIiClaimSetupManagerWithdraw =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__
 */
export const useSimulateIiClaimSetupManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiClaimSetupManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useSimulateIiClaimSetupManagerBatchDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIiClaimSetupManagerDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"delegateGovernance"`
 */
export const useSimulateIiClaimSetupManagerDelegateGovernance =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'delegateGovernance',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"disableDelegationAccount"`
 */
export const useSimulateIiClaimSetupManagerDisableDelegationAccount =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'disableDelegationAccount',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"enableDelegationAccount"`
 */
export const useSimulateIiClaimSetupManagerEnableDelegationAccount =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'enableDelegationAccount',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"registerExecutor"`
 */
export const useSimulateIiClaimSetupManagerRegisterExecutor =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'registerExecutor',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useSimulateIiClaimSetupManagerRevokeDelegationAt =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setAllowedClaimRecipients"`
 */
export const useSimulateIiClaimSetupManagerSetAllowedClaimRecipients =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setAllowedClaimRecipients',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setAutoClaiming"`
 */
export const useSimulateIiClaimSetupManagerSetAutoClaiming =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setAutoClaiming',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIiClaimSetupManagerSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setLibraryAddress"`
 */
export const useSimulateIiClaimSetupManagerSetLibraryAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setLibraryAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setMaxFeeValueWei"`
 */
export const useSimulateIiClaimSetupManagerSetMaxFeeValueWei =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setMaxFeeValueWei',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setMinFeeValueWei"`
 */
export const useSimulateIiClaimSetupManagerSetMinFeeValueWei =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setMinFeeValueWei',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"setRegisterExecutorFeeValueWei"`
 */
export const useSimulateIiClaimSetupManagerSetRegisterExecutorFeeValueWei =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'setRegisterExecutorFeeValueWei',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useSimulateIiClaimSetupManagerTransferExternalToken =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useSimulateIiClaimSetupManagerUndelegateAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"undelegateGovernance"`
 */
export const useSimulateIiClaimSetupManagerUndelegateGovernance =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'undelegateGovernance',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"unregisterExecutor"`
 */
export const useSimulateIiClaimSetupManagerUnregisterExecutor =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'unregisterExecutor',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"updateExecutorFeeValue"`
 */
export const useSimulateIiClaimSetupManagerUpdateExecutorFeeValue =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'updateExecutorFeeValue',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIiClaimSetupManagerWithdraw =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiClaimSetupManagerAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__
 */
export const useWatchIiClaimSetupManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiClaimSetupManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"AllowedClaimRecipientsChanged"`
 */
export const useWatchIiClaimSetupManagerAllowedClaimRecipientsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'AllowedClaimRecipientsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"ClaimExecutorFeeValueChanged"`
 */
export const useWatchIiClaimSetupManagerClaimExecutorFeeValueChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'ClaimExecutorFeeValueChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"ClaimExecutorsChanged"`
 */
export const useWatchIiClaimSetupManagerClaimExecutorsChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'ClaimExecutorsChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"DelegationAccountCreated"`
 */
export const useWatchIiClaimSetupManagerDelegationAccountCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'DelegationAccountCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"DelegationAccountUpdated"`
 */
export const useWatchIiClaimSetupManagerDelegationAccountUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'DelegationAccountUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"ExecutorRegistered"`
 */
export const useWatchIiClaimSetupManagerExecutorRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'ExecutorRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"ExecutorUnregistered"`
 */
export const useWatchIiClaimSetupManagerExecutorUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'ExecutorUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"MaxFeeSet"`
 */
export const useWatchIiClaimSetupManagerMaxFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'MaxFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"MinFeeSet"`
 */
export const useWatchIiClaimSetupManagerMinFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'MinFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"RegisterExecutorFeeSet"`
 */
export const useWatchIiClaimSetupManagerRegisterExecutorFeeSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'RegisterExecutorFeeSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"SetExecutorsExcessAmountRefunded"`
 */
export const useWatchIiClaimSetupManagerSetExecutorsExcessAmountRefundedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'SetExecutorsExcessAmountRefunded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiClaimSetupManagerAbi}__ and `eventName` set to `"SetLibraryAddress"`
 */
export const useWatchIiClaimSetupManagerSetLibraryAddressEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiClaimSetupManagerAbi,
    eventName: 'SetLibraryAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiCleanableAbi}__
 */
export const useReadIiCleanable = /*#__PURE__*/ createUseReadContract({
  abi: iiCleanableAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiCleanableAbi}__ and `functionName` set to `"cleanupBlockNumber"`
 */
export const useReadIiCleanableCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iiCleanableAbi,
    functionName: 'cleanupBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCleanableAbi}__
 */
export const useWriteIiCleanable = /*#__PURE__*/ createUseWriteContract({
  abi: iiCleanableAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCleanableAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useWriteIiCleanableSetCleanerContract =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiCleanableAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCleanableAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useWriteIiCleanableSetCleanupBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiCleanableAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCleanableAbi}__
 */
export const useSimulateIiCleanable = /*#__PURE__*/ createUseSimulateContract({
  abi: iiCleanableAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCleanableAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useSimulateIiCleanableSetCleanerContract =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiCleanableAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCleanableAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useSimulateIiCleanableSetCleanupBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiCleanableAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCleanupBlockNumberManagerAbi}__
 */
export const useWriteIiCleanupBlockNumberManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iiCleanupBlockNumberManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCleanupBlockNumberManagerAbi}__ and `functionName` set to `"setCleanUpBlockNumber"`
 */
export const useWriteIiCleanupBlockNumberManagerSetCleanUpBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiCleanupBlockNumberManagerAbi,
    functionName: 'setCleanUpBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCleanupBlockNumberManagerAbi}__
 */
export const useSimulateIiCleanupBlockNumberManager =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiCleanupBlockNumberManagerAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCleanupBlockNumberManagerAbi}__ and `functionName` set to `"setCleanUpBlockNumber"`
 */
export const useSimulateIiCleanupBlockNumberManagerSetCleanUpBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiCleanupBlockNumberManagerAbi,
    functionName: 'setCleanUpBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiCustomFeedAbi}__
 */
export const useReadIiCustomFeed = /*#__PURE__*/ createUseReadContract({
  abi: iiCustomFeedAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiCustomFeedAbi}__ and `functionName` set to `"calculateFee"`
 */
export const useReadIiCustomFeedCalculateFee =
  /*#__PURE__*/ createUseReadContract({
    abi: iiCustomFeedAbi,
    functionName: 'calculateFee',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiCustomFeedAbi}__ and `functionName` set to `"feedId"`
 */
export const useReadIiCustomFeedFeedId = /*#__PURE__*/ createUseReadContract({
  abi: iiCustomFeedAbi,
  functionName: 'feedId',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCustomFeedAbi}__
 */
export const useWriteIiCustomFeed = /*#__PURE__*/ createUseWriteContract({
  abi: iiCustomFeedAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiCustomFeedAbi}__ and `functionName` set to `"getCurrentFeed"`
 */
export const useWriteIiCustomFeedGetCurrentFeed =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiCustomFeedAbi,
    functionName: 'getCurrentFeed',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCustomFeedAbi}__
 */
export const useSimulateIiCustomFeed = /*#__PURE__*/ createUseSimulateContract({
  abi: iiCustomFeedAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiCustomFeedAbi}__ and `functionName` set to `"getCurrentFeed"`
 */
export const useSimulateIiCustomFeedGetCurrentFeed =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiCustomFeedAbi,
    functionName: 'getCurrentFeed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__
 */
export const useReadIiEntityManager = /*#__PURE__*/ createUseReadContract({
  abi: iiEntityManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getDelegationAddressOf"`
 */
export const useReadIiEntityManagerGetDelegationAddressOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getDelegationAddressOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getDelegationAddressOfAt"`
 */
export const useReadIiEntityManagerGetDelegationAddressOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getDelegationAddressOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getDelegationAddresses"`
 */
export const useReadIiEntityManagerGetDelegationAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getDelegationAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getNodeIds"`
 */
export const useReadIiEntityManagerGetNodeIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getNodeIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getNodeIdsOf"`
 */
export const useReadIiEntityManagerGetNodeIdsOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getNodeIdsOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getNodeIdsOfAt"`
 */
export const useReadIiEntityManagerGetNodeIdsOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getNodeIdsOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getPublicKeyOf"`
 */
export const useReadIiEntityManagerGetPublicKeyOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getPublicKeyOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getPublicKeyOfAt"`
 */
export const useReadIiEntityManagerGetPublicKeyOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getPublicKeyOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getPublicKeys"`
 */
export const useReadIiEntityManagerGetPublicKeys =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getPublicKeys',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getSigningPolicyAddresses"`
 */
export const useReadIiEntityManagerGetSigningPolicyAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getSigningPolicyAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getSubmitAddresses"`
 */
export const useReadIiEntityManagerGetSubmitAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getSubmitAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getSubmitSignaturesAddresses"`
 */
export const useReadIiEntityManagerGetSubmitSignaturesAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getSubmitSignaturesAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterAddresses"`
 */
export const useReadIiEntityManagerGetVoterAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterAddressesAt"`
 */
export const useReadIiEntityManagerGetVoterAddressesAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterAddressesAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForDelegationAddress"`
 */
export const useReadIiEntityManagerGetVoterForDelegationAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForDelegationAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForNodeId"`
 */
export const useReadIiEntityManagerGetVoterForNodeId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForNodeId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForPublicKey"`
 */
export const useReadIiEntityManagerGetVoterForPublicKey =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForPublicKey',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForSigningPolicyAddress"`
 */
export const useReadIiEntityManagerGetVoterForSigningPolicyAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForSigningPolicyAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForSubmitAddress"`
 */
export const useReadIiEntityManagerGetVoterForSubmitAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForSubmitAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"getVoterForSubmitSignaturesAddress"`
 */
export const useReadIiEntityManagerGetVoterForSubmitSignaturesAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiEntityManagerAbi,
    functionName: 'getVoterForSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__
 */
export const useWriteIiEntityManager = /*#__PURE__*/ createUseWriteContract({
  abi: iiEntityManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmDelegationAddressRegistration"`
 */
export const useWriteIiEntityManagerConfirmDelegationAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmDelegationAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSigningPolicyAddressRegistration"`
 */
export const useWriteIiEntityManagerConfirmSigningPolicyAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSigningPolicyAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSubmitAddressRegistration"`
 */
export const useWriteIiEntityManagerConfirmSubmitAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSubmitAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSubmitSignaturesAddressRegistration"`
 */
export const useWriteIiEntityManagerConfirmSubmitSignaturesAddressRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSubmitSignaturesAddressRegistration',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeDelegationAddress"`
 */
export const useWriteIiEntityManagerProposeDelegationAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeDelegationAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSigningPolicyAddress"`
 */
export const useWriteIiEntityManagerProposeSigningPolicyAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSigningPolicyAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSubmitAddress"`
 */
export const useWriteIiEntityManagerProposeSubmitAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSubmitAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSubmitSignaturesAddress"`
 */
export const useWriteIiEntityManagerProposeSubmitSignaturesAddress =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"registerNodeId"`
 */
export const useWriteIiEntityManagerRegisterNodeId =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'registerNodeId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useWriteIiEntityManagerRegisterPublicKey =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"unregisterNodeId"`
 */
export const useWriteIiEntityManagerUnregisterNodeId =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'unregisterNodeId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"unregisterPublicKey"`
 */
export const useWriteIiEntityManagerUnregisterPublicKey =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiEntityManagerAbi,
    functionName: 'unregisterPublicKey',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__
 */
export const useSimulateIiEntityManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiEntityManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmDelegationAddressRegistration"`
 */
export const useSimulateIiEntityManagerConfirmDelegationAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmDelegationAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSigningPolicyAddressRegistration"`
 */
export const useSimulateIiEntityManagerConfirmSigningPolicyAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSigningPolicyAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSubmitAddressRegistration"`
 */
export const useSimulateIiEntityManagerConfirmSubmitAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSubmitAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"confirmSubmitSignaturesAddressRegistration"`
 */
export const useSimulateIiEntityManagerConfirmSubmitSignaturesAddressRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'confirmSubmitSignaturesAddressRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeDelegationAddress"`
 */
export const useSimulateIiEntityManagerProposeDelegationAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeDelegationAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSigningPolicyAddress"`
 */
export const useSimulateIiEntityManagerProposeSigningPolicyAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSigningPolicyAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSubmitAddress"`
 */
export const useSimulateIiEntityManagerProposeSubmitAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSubmitAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"proposeSubmitSignaturesAddress"`
 */
export const useSimulateIiEntityManagerProposeSubmitSignaturesAddress =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'proposeSubmitSignaturesAddress',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"registerNodeId"`
 */
export const useSimulateIiEntityManagerRegisterNodeId =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'registerNodeId',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"registerPublicKey"`
 */
export const useSimulateIiEntityManagerRegisterPublicKey =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'registerPublicKey',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"unregisterNodeId"`
 */
export const useSimulateIiEntityManagerUnregisterNodeId =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'unregisterNodeId',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `functionName` set to `"unregisterPublicKey"`
 */
export const useSimulateIiEntityManagerUnregisterPublicKey =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiEntityManagerAbi,
    functionName: 'unregisterPublicKey',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__
 */
export const useWatchIiEntityManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiEntityManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"DelegationAddressProposed"`
 */
export const useWatchIiEntityManagerDelegationAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'DelegationAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"DelegationAddressRegistrationConfirmed"`
 */
export const useWatchIiEntityManagerDelegationAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'DelegationAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"MaxNodeIdsPerEntitySet"`
 */
export const useWatchIiEntityManagerMaxNodeIdsPerEntitySetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'MaxNodeIdsPerEntitySet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"NodeIdRegistered"`
 */
export const useWatchIiEntityManagerNodeIdRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'NodeIdRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"NodeIdUnregistered"`
 */
export const useWatchIiEntityManagerNodeIdUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'NodeIdUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"PublicKeyRegistered"`
 */
export const useWatchIiEntityManagerPublicKeyRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'PublicKeyRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"PublicKeyUnregistered"`
 */
export const useWatchIiEntityManagerPublicKeyUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'PublicKeyUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SigningPolicyAddressProposed"`
 */
export const useWatchIiEntityManagerSigningPolicyAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SigningPolicyAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SigningPolicyAddressRegistrationConfirmed"`
 */
export const useWatchIiEntityManagerSigningPolicyAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SigningPolicyAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SubmitAddressProposed"`
 */
export const useWatchIiEntityManagerSubmitAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SubmitAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SubmitAddressRegistrationConfirmed"`
 */
export const useWatchIiEntityManagerSubmitAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SubmitAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SubmitSignaturesAddressProposed"`
 */
export const useWatchIiEntityManagerSubmitSignaturesAddressProposedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SubmitSignaturesAddressProposed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiEntityManagerAbi}__ and `eventName` set to `"SubmitSignaturesAddressRegistrationConfirmed"`
 */
export const useWatchIiEntityManagerSubmitSignaturesAddressRegistrationConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiEntityManagerAbi,
    eventName: 'SubmitSignaturesAddressRegistrationConfirmed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFastUpdaterViewAbi}__
 */
export const useReadIiFastUpdaterView = /*#__PURE__*/ createUseReadContract({
  abi: iiFastUpdaterViewAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFastUpdaterViewAbi}__ and `functionName` set to `"fetchCurrentFeeds"`
 */
export const useReadIiFastUpdaterViewFetchCurrentFeeds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFastUpdaterViewAbi,
    functionName: 'fetchCurrentFeeds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__
 */
export const useReadIiFlareSystemsCalculator =
  /*#__PURE__*/ createUseReadContract({ abi: iiFlareSystemsCalculatorAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"calculateBurnFactorPPM"`
 */
export const useReadIiFlareSystemsCalculatorCalculateBurnFactorPpm =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'calculateBurnFactorPPM',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNoRewardsDurationBlocks"`
 */
export const useReadIiFlareSystemsCalculatorSigningPolicySignNoRewardsDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNoRewardsDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNonPunishableDurationBlocks"`
 */
export const useReadIiFlareSystemsCalculatorSigningPolicySignNonPunishableDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNonPunishableDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"signingPolicySignNonPunishableDurationSeconds"`
 */
export const useReadIiFlareSystemsCalculatorSigningPolicySignNonPunishableDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'signingPolicySignNonPunishableDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"wNatCapPPM"`
 */
export const useReadIiFlareSystemsCalculatorWNatCapPpm =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'wNatCapPPM',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__
 */
export const useWriteIiFlareSystemsCalculator =
  /*#__PURE__*/ createUseWriteContract({ abi: iiFlareSystemsCalculatorAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"calculateRegistrationWeight"`
 */
export const useWriteIiFlareSystemsCalculatorCalculateRegistrationWeight =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'calculateRegistrationWeight',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__
 */
export const useSimulateIiFlareSystemsCalculator =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiFlareSystemsCalculatorAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `functionName` set to `"calculateRegistrationWeight"`
 */
export const useSimulateIiFlareSystemsCalculatorCalculateRegistrationWeight =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFlareSystemsCalculatorAbi,
    functionName: 'calculateRegistrationWeight',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__
 */
export const useWatchIiFlareSystemsCalculatorEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsCalculatorAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsCalculatorAbi}__ and `eventName` set to `"VoterRegistrationInfo"`
 */
export const useWatchIiFlareSystemsCalculatorVoterRegistrationInfoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsCalculatorAbi,
    eventName: 'VoterRegistrationInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__
 */
export const useReadIiFlareSystemsManager = /*#__PURE__*/ createUseReadContract(
  { abi: iiFlareSystemsManagerAbi },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"currentRewardEpochExpectedEndTs"`
 */
export const useReadIiFlareSystemsManagerCurrentRewardEpochExpectedEndTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'currentRewardEpochExpectedEndTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"firstRewardEpochStartTs"`
 */
export const useReadIiFlareSystemsManagerFirstRewardEpochStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'firstRewardEpochStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"firstVotingRoundStartTs"`
 */
export const useReadIiFlareSystemsManagerFirstVotingRoundStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'firstVotingRoundStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentRewardEpoch"`
 */
export const useReadIiFlareSystemsManagerGetCurrentRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getCurrentRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentRewardEpochId"`
 */
export const useReadIiFlareSystemsManagerGetCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getCurrentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getCurrentVotingEpochId"`
 */
export const useReadIiFlareSystemsManagerGetCurrentVotingEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getCurrentVotingEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getRandomAcquisitionInfo"`
 */
export const useReadIiFlareSystemsManagerGetRandomAcquisitionInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getRandomAcquisitionInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getRewardEpochStartInfo"`
 */
export const useReadIiFlareSystemsManagerGetRewardEpochStartInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getRewardEpochStartInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getRewardsSignInfo"`
 */
export const useReadIiFlareSystemsManagerGetRewardsSignInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getRewardsSignInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getSeed"`
 */
export const useReadIiFlareSystemsManagerGetSeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getSeed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getSigningPolicySignInfo"`
 */
export const useReadIiFlareSystemsManagerGetSigningPolicySignInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getSigningPolicySignInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getStartVotingRoundId"`
 */
export const useReadIiFlareSystemsManagerGetStartVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getStartVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getThreshold"`
 */
export const useReadIiFlareSystemsManagerGetThreshold =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getThreshold',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getUptimeVoteSignStartInfo"`
 */
export const useReadIiFlareSystemsManagerGetUptimeVoteSignStartInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getUptimeVoteSignStartInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVotePowerBlock"`
 */
export const useReadIiFlareSystemsManagerGetVotePowerBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVotePowerBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterRegistrationData"`
 */
export const useReadIiFlareSystemsManagerGetVoterRegistrationData =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVoterRegistrationData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterRewardsSignInfo"`
 */
export const useReadIiFlareSystemsManagerGetVoterRewardsSignInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVoterRewardsSignInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterSigningPolicySignInfo"`
 */
export const useReadIiFlareSystemsManagerGetVoterSigningPolicySignInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVoterSigningPolicySignInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterUptimeVoteSignInfo"`
 */
export const useReadIiFlareSystemsManagerGetVoterUptimeVoteSignInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVoterUptimeVoteSignInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"getVoterUptimeVoteSubmitInfo"`
 */
export const useReadIiFlareSystemsManagerGetVoterUptimeVoteSubmitInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'getVoterUptimeVoteSubmitInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"isVoterRegistrationEnabled"`
 */
export const useReadIiFlareSystemsManagerIsVoterRegistrationEnabled =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'isVoterRegistrationEnabled',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"lastInitializedVotingRoundId"`
 */
export const useReadIiFlareSystemsManagerLastInitializedVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'lastInitializedVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"newSigningPolicyInitializationStartSeconds"`
 */
export const useReadIiFlareSystemsManagerNewSigningPolicyInitializationStartSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'newSigningPolicyInitializationStartSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"newSigningPolicyMinNumberOfVotingRoundsDelay"`
 */
export const useReadIiFlareSystemsManagerNewSigningPolicyMinNumberOfVotingRoundsDelay =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'newSigningPolicyMinNumberOfVotingRoundsDelay',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"noOfWeightBasedClaims"`
 */
export const useReadIiFlareSystemsManagerNoOfWeightBasedClaims =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'noOfWeightBasedClaims',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"noOfWeightBasedClaimsHash"`
 */
export const useReadIiFlareSystemsManagerNoOfWeightBasedClaimsHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'noOfWeightBasedClaimsHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"randomAcquisitionMaxDurationBlocks"`
 */
export const useReadIiFlareSystemsManagerRandomAcquisitionMaxDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'randomAcquisitionMaxDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"randomAcquisitionMaxDurationSeconds"`
 */
export const useReadIiFlareSystemsManagerRandomAcquisitionMaxDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'randomAcquisitionMaxDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"rewardEpochDurationSeconds"`
 */
export const useReadIiFlareSystemsManagerRewardEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'rewardEpochDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"rewardEpochIdToExpireNext"`
 */
export const useReadIiFlareSystemsManagerRewardEpochIdToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'rewardEpochIdToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"rewardExpiryOffsetSeconds"`
 */
export const useReadIiFlareSystemsManagerRewardExpiryOffsetSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'rewardExpiryOffsetSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"rewardsHash"`
 */
export const useReadIiFlareSystemsManagerRewardsHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'rewardsHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signingPolicyMinNumberOfVoters"`
 */
export const useReadIiFlareSystemsManagerSigningPolicyMinNumberOfVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signingPolicyMinNumberOfVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signingPolicyThresholdPPM"`
 */
export const useReadIiFlareSystemsManagerSigningPolicyThresholdPpm =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signingPolicyThresholdPPM',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVoteMinDurationBlocks"`
 */
export const useReadIiFlareSystemsManagerSubmitUptimeVoteMinDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'submitUptimeVoteMinDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVoteMinDurationSeconds"`
 */
export const useReadIiFlareSystemsManagerSubmitUptimeVoteMinDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'submitUptimeVoteMinDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"uptimeVoteHash"`
 */
export const useReadIiFlareSystemsManagerUptimeVoteHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'uptimeVoteHash',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"voterRegistrationMinDurationBlocks"`
 */
export const useReadIiFlareSystemsManagerVoterRegistrationMinDurationBlocks =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'voterRegistrationMinDurationBlocks',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"voterRegistrationMinDurationSeconds"`
 */
export const useReadIiFlareSystemsManagerVoterRegistrationMinDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'voterRegistrationMinDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"votingEpochDurationSeconds"`
 */
export const useReadIiFlareSystemsManagerVotingEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'votingEpochDurationSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__
 */
export const useWriteIiFlareSystemsManager =
  /*#__PURE__*/ createUseWriteContract({ abi: iiFlareSystemsManagerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signNewSigningPolicy"`
 */
export const useWriteIiFlareSystemsManagerSignNewSigningPolicy =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signNewSigningPolicy',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signRewards"`
 */
export const useWriteIiFlareSystemsManagerSignRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signUptimeVote"`
 */
export const useWriteIiFlareSystemsManagerSignUptimeVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signUptimeVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVote"`
 */
export const useWriteIiFlareSystemsManagerSubmitUptimeVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'submitUptimeVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__
 */
export const useSimulateIiFlareSystemsManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiFlareSystemsManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signNewSigningPolicy"`
 */
export const useSimulateIiFlareSystemsManagerSignNewSigningPolicy =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signNewSigningPolicy',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signRewards"`
 */
export const useSimulateIiFlareSystemsManagerSignRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"signUptimeVote"`
 */
export const useSimulateIiFlareSystemsManagerSignUptimeVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'signUptimeVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `functionName` set to `"submitUptimeVote"`
 */
export const useSimulateIiFlareSystemsManagerSubmitUptimeVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFlareSystemsManagerAbi,
    functionName: 'submitUptimeVote',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__
 */
export const useWatchIiFlareSystemsManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiFlareSystemsManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"ClosingExpiredRewardEpochFailed"`
 */
export const useWatchIiFlareSystemsManagerClosingExpiredRewardEpochFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'ClosingExpiredRewardEpochFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"RandomAcquisitionStarted"`
 */
export const useWatchIiFlareSystemsManagerRandomAcquisitionStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'RandomAcquisitionStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"RewardEpochStarted"`
 */
export const useWatchIiFlareSystemsManagerRewardEpochStartedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'RewardEpochStarted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"RewardsSigned"`
 */
export const useWatchIiFlareSystemsManagerRewardsSignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'RewardsSigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"SettingCleanUpBlockNumberFailed"`
 */
export const useWatchIiFlareSystemsManagerSettingCleanUpBlockNumberFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'SettingCleanUpBlockNumberFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"SignUptimeVoteEnabled"`
 */
export const useWatchIiFlareSystemsManagerSignUptimeVoteEnabledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'SignUptimeVoteEnabled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"SigningPolicySigned"`
 */
export const useWatchIiFlareSystemsManagerSigningPolicySignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'SigningPolicySigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"TriggeringVoterRegistrationFailed"`
 */
export const useWatchIiFlareSystemsManagerTriggeringVoterRegistrationFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'TriggeringVoterRegistrationFailed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"UptimeVoteSigned"`
 */
export const useWatchIiFlareSystemsManagerUptimeVoteSignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'UptimeVoteSigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"UptimeVoteSubmitted"`
 */
export const useWatchIiFlareSystemsManagerUptimeVoteSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'UptimeVoteSubmitted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFlareSystemsManagerAbi}__ and `eventName` set to `"VotePowerBlockSelected"`
 */
export const useWatchIiFlareSystemsManagerVotePowerBlockSelectedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFlareSystemsManagerAbi,
    eventName: 'VotePowerBlockSelected',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__
 */
export const useReadIiFtso = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"active"`
 */
export const useReadIiFtsoActive = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'active',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"epochsConfiguration"`
 */
export const useReadIiFtsoEpochsConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'epochsConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"ftsoManager"`
 */
export const useReadIiFtsoFtsoManager = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'ftsoManager',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getAsset"`
 */
export const useReadIiFtsoGetAsset = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'getAsset',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getAssetFtsos"`
 */
export const useReadIiFtsoGetAssetFtsos = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'getAssetFtsos',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentEpochId"`
 */
export const useReadIiFtsoGetCurrentEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentPrice"`
 */
export const useReadIiFtsoGetCurrentPrice = /*#__PURE__*/ createUseReadContract(
  { abi: iiFtsoAbi, functionName: 'getCurrentPrice' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentPriceDetails"`
 */
export const useReadIiFtsoGetCurrentPriceDetails =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentPriceDetails',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentPriceFromTrustedProviders"`
 */
export const useReadIiFtsoGetCurrentPriceFromTrustedProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentPriceFromTrustedProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentPriceWithDecimals"`
 */
export const useReadIiFtsoGetCurrentPriceWithDecimals =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentPriceWithDecimals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentPriceWithDecimalsFromTrustedProviders"`
 */
export const useReadIiFtsoGetCurrentPriceWithDecimalsFromTrustedProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentPriceWithDecimalsFromTrustedProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadIiFtsoGetCurrentRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getCurrentRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getEpochId"`
 */
export const useReadIiFtsoGetEpochId = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'getEpochId',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getEpochPrice"`
 */
export const useReadIiFtsoGetEpochPrice = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'getEpochPrice',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getEpochPriceForVoter"`
 */
export const useReadIiFtsoGetEpochPriceForVoter =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getEpochPriceForVoter',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getPriceEpochConfiguration"`
 */
export const useReadIiFtsoGetPriceEpochConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getPriceEpochConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getPriceEpochData"`
 */
export const useReadIiFtsoGetPriceEpochData =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getPriceEpochData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getRandom"`
 */
export const useReadIiFtsoGetRandom = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'getRandom',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"getVoteWeightingParameters"`
 */
export const useReadIiFtsoGetVoteWeightingParameters =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoAbi,
    functionName: 'getVoteWeightingParameters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIiFtsoSymbol = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"wNat"`
 */
export const useReadIiFtsoWNat = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoAbi,
  functionName: 'wNat',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__
 */
export const useWriteIiFtso = /*#__PURE__*/ createUseWriteContract({
  abi: iiFtsoAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"activateFtso"`
 */
export const useWriteIiFtsoActivateFtso = /*#__PURE__*/ createUseWriteContract({
  abi: iiFtsoAbi,
  functionName: 'activateFtso',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"configureEpochs"`
 */
export const useWriteIiFtsoConfigureEpochs =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'configureEpochs',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"deactivateFtso"`
 */
export const useWriteIiFtsoDeactivateFtso =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'deactivateFtso',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"fallbackFinalizePriceEpoch"`
 */
export const useWriteIiFtsoFallbackFinalizePriceEpoch =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'fallbackFinalizePriceEpoch',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"finalizePriceEpoch"`
 */
export const useWriteIiFtsoFinalizePriceEpoch =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'finalizePriceEpoch',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"forceFinalizePriceEpoch"`
 */
export const useWriteIiFtsoForceFinalizePriceEpoch =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'forceFinalizePriceEpoch',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"initializeCurrentEpochStateForReveal"`
 */
export const useWriteIiFtsoInitializeCurrentEpochStateForReveal =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'initializeCurrentEpochStateForReveal',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"revealPriceSubmitter"`
 */
export const useWriteIiFtsoRevealPriceSubmitter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'revealPriceSubmitter',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setAsset"`
 */
export const useWriteIiFtsoSetAsset = /*#__PURE__*/ createUseWriteContract({
  abi: iiFtsoAbi,
  functionName: 'setAsset',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setAssetFtsos"`
 */
export const useWriteIiFtsoSetAssetFtsos = /*#__PURE__*/ createUseWriteContract(
  { abi: iiFtsoAbi, functionName: 'setAssetFtsos' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setVotePowerBlock"`
 */
export const useWriteIiFtsoSetVotePowerBlock =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'setVotePowerBlock',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"updateInitialPrice"`
 */
export const useWriteIiFtsoUpdateInitialPrice =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'updateInitialPrice',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"wNatVotePowerCached"`
 */
export const useWriteIiFtsoWNatVotePowerCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoAbi,
    functionName: 'wNatVotePowerCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__
 */
export const useSimulateIiFtso = /*#__PURE__*/ createUseSimulateContract({
  abi: iiFtsoAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"activateFtso"`
 */
export const useSimulateIiFtsoActivateFtso =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'activateFtso',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"configureEpochs"`
 */
export const useSimulateIiFtsoConfigureEpochs =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'configureEpochs',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"deactivateFtso"`
 */
export const useSimulateIiFtsoDeactivateFtso =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'deactivateFtso',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"fallbackFinalizePriceEpoch"`
 */
export const useSimulateIiFtsoFallbackFinalizePriceEpoch =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'fallbackFinalizePriceEpoch',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"finalizePriceEpoch"`
 */
export const useSimulateIiFtsoFinalizePriceEpoch =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'finalizePriceEpoch',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"forceFinalizePriceEpoch"`
 */
export const useSimulateIiFtsoForceFinalizePriceEpoch =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'forceFinalizePriceEpoch',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"initializeCurrentEpochStateForReveal"`
 */
export const useSimulateIiFtsoInitializeCurrentEpochStateForReveal =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'initializeCurrentEpochStateForReveal',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"revealPriceSubmitter"`
 */
export const useSimulateIiFtsoRevealPriceSubmitter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'revealPriceSubmitter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setAsset"`
 */
export const useSimulateIiFtsoSetAsset =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'setAsset',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setAssetFtsos"`
 */
export const useSimulateIiFtsoSetAssetFtsos =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'setAssetFtsos',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"setVotePowerBlock"`
 */
export const useSimulateIiFtsoSetVotePowerBlock =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'setVotePowerBlock',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"updateInitialPrice"`
 */
export const useSimulateIiFtsoUpdateInitialPrice =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'updateInitialPrice',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoAbi}__ and `functionName` set to `"wNatVotePowerCached"`
 */
export const useSimulateIiFtsoWNatVotePowerCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoAbi,
    functionName: 'wNatVotePowerCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoAbi}__
 */
export const useWatchIiFtsoEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iiFtsoAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoAbi}__ and `eventName` set to `"LowTurnout"`
 */
export const useWatchIiFtsoLowTurnoutEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFtsoAbi,
    eventName: 'LowTurnout',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoAbi}__ and `eventName` set to `"PriceEpochInitializedOnFtso"`
 */
export const useWatchIiFtsoPriceEpochInitializedOnFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFtsoAbi,
    eventName: 'PriceEpochInitializedOnFtso',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoAbi}__ and `eventName` set to `"PriceFinalized"`
 */
export const useWatchIiFtsoPriceFinalizedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFtsoAbi,
    eventName: 'PriceFinalized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoAbi}__ and `eventName` set to `"PriceRevealed"`
 */
export const useWatchIiFtsoPriceRevealedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFtsoAbi,
    eventName: 'PriceRevealed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__
 */
export const useReadIiFtsoFeedPublisher = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoFeedPublisherAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"feedsHistorySize"`
 */
export const useReadIiFtsoFeedPublisherFeedsHistorySize =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'feedsHistorySize',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"ftsoProtocolId"`
 */
export const useReadIiFtsoFeedPublisherFtsoProtocolId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'ftsoProtocolId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"getCurrentFeed"`
 */
export const useReadIiFtsoFeedPublisherGetCurrentFeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'getCurrentFeed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"getFeed"`
 */
export const useReadIiFtsoFeedPublisherGetFeed =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'getFeed',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__
 */
export const useWriteIiFtsoFeedPublisher = /*#__PURE__*/ createUseWriteContract(
  { abi: iiFtsoFeedPublisherAbi },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"publish"`
 */
export const useWriteIiFtsoFeedPublisherPublish =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'publish',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"publishFeeds"`
 */
export const useWriteIiFtsoFeedPublisherPublishFeeds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'publishFeeds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__
 */
export const useSimulateIiFtsoFeedPublisher =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiFtsoFeedPublisherAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"publish"`
 */
export const useSimulateIiFtsoFeedPublisherPublish =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'publish',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `functionName` set to `"publishFeeds"`
 */
export const useSimulateIiFtsoFeedPublisherPublishFeeds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiFtsoFeedPublisherAbi,
    functionName: 'publishFeeds',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__
 */
export const useWatchIiFtsoFeedPublisherEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiFtsoFeedPublisherAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiFtsoFeedPublisherAbi}__ and `eventName` set to `"FtsoFeedPublished"`
 */
export const useWatchIiFtsoFeedPublisherFtsoFeedPublishedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiFtsoFeedPublisherAbi,
    eventName: 'FtsoFeedPublished',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoManagerProxyAbi}__
 */
export const useReadIiFtsoManagerProxy = /*#__PURE__*/ createUseReadContract({
  abi: iiFtsoManagerProxyAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoManagerProxyAbi}__ and `functionName` set to `"fastUpdater"`
 */
export const useReadIiFtsoManagerProxyFastUpdater =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoManagerProxyAbi,
    functionName: 'fastUpdater',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoManagerProxyAbi}__ and `functionName` set to `"fastUpdatesConfiguration"`
 */
export const useReadIiFtsoManagerProxyFastUpdatesConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoManagerProxyAbi,
    functionName: 'fastUpdatesConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoManagerProxyAbi}__ and `functionName` set to `"flareSystemsManager"`
 */
export const useReadIiFtsoManagerProxyFlareSystemsManager =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoManagerProxyAbi,
    functionName: 'flareSystemsManager',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiFtsoManagerProxyAbi}__ and `functionName` set to `"relay"`
 */
export const useReadIiFtsoManagerProxyRelay =
  /*#__PURE__*/ createUseReadContract({
    abi: iiFtsoManagerProxyAbi,
    functionName: 'relay',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__
 */
export const useReadIiGovernanceVotePower = /*#__PURE__*/ createUseReadContract(
  { abi: iiGovernanceVotePowerAbi },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"getCleanupBlockNumber"`
 */
export const useReadIiGovernanceVotePowerGetCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'getCleanupBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"getDelegateOfAt"`
 */
export const useReadIiGovernanceVotePowerGetDelegateOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'getDelegateOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"getDelegateOfAtNow"`
 */
export const useReadIiGovernanceVotePowerGetDelegateOfAtNow =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'getDelegateOfAtNow',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"getVotes"`
 */
export const useReadIiGovernanceVotePowerGetVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'getVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"ownerToken"`
 */
export const useReadIiGovernanceVotePowerOwnerToken =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'ownerToken',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"pChainStakeMirror"`
 */
export const useReadIiGovernanceVotePowerPChainStakeMirror =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'pChainStakeMirror',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIiGovernanceVotePowerVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__
 */
export const useWriteIiGovernanceVotePower =
  /*#__PURE__*/ createUseWriteContract({ abi: iiGovernanceVotePowerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIiGovernanceVotePowerDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useWriteIiGovernanceVotePowerSetCleanerContract =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useWriteIiGovernanceVotePowerSetCleanupBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"undelegate"`
 */
export const useWriteIiGovernanceVotePowerUndelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'undelegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"updateAtTokenTransfer"`
 */
export const useWriteIiGovernanceVotePowerUpdateAtTokenTransfer =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'updateAtTokenTransfer',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__
 */
export const useSimulateIiGovernanceVotePower =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiGovernanceVotePowerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIiGovernanceVotePowerDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useSimulateIiGovernanceVotePowerSetCleanerContract =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useSimulateIiGovernanceVotePowerSetCleanupBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"undelegate"`
 */
export const useSimulateIiGovernanceVotePowerUndelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'undelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `functionName` set to `"updateAtTokenTransfer"`
 */
export const useSimulateIiGovernanceVotePowerUpdateAtTokenTransfer =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiGovernanceVotePowerAbi,
    functionName: 'updateAtTokenTransfer',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__
 */
export const useWatchIiGovernanceVotePowerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiGovernanceVotePowerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `eventName` set to `"DelegateChanged"`
 */
export const useWatchIiGovernanceVotePowerDelegateChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiGovernanceVotePowerAbi,
    eventName: 'DelegateChanged',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiGovernanceVotePowerAbi}__ and `eventName` set to `"DelegateVotesChanged"`
 */
export const useWatchIiGovernanceVotePowerDelegateVotesChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiGovernanceVotePowerAbi,
    eventName: 'DelegateVotesChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernorProposerAbi}__
 */
export const useReadIiGovernorProposer = /*#__PURE__*/ createUseReadContract({
  abi: iiGovernorProposerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiGovernorProposerAbi}__ and `functionName` set to `"isProposer"`
 */
export const useReadIiGovernorProposerIsProposer =
  /*#__PURE__*/ createUseReadContract({
    abi: iiGovernorProposerAbi,
    functionName: 'isProposer',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiNodePossessionVerifierAbi}__
 */
export const useReadIiNodePossessionVerifier =
  /*#__PURE__*/ createUseReadContract({ abi: iiNodePossessionVerifierAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiNodePossessionVerifierAbi}__ and `functionName` set to `"verifyNodePossession"`
 */
export const useReadIiNodePossessionVerifierVerifyNodePossession =
  /*#__PURE__*/ createUseReadContract({
    abi: iiNodePossessionVerifierAbi,
    functionName: 'verifyNodePossession',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__
 */
export const useReadIiPollingFoundation = /*#__PURE__*/ createUseReadContract({
  abi: iiPollingFoundationAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"getProposalInfo"`
 */
export const useReadIiPollingFoundationGetProposalInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'getProposalInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"getProposalVotes"`
 */
export const useReadIiPollingFoundationGetProposalVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'getProposalVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"getVotes"`
 */
export const useReadIiPollingFoundationGetVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'getVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"hasVoted"`
 */
export const useReadIiPollingFoundationHasVoted =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'hasVoted',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"isProposer"`
 */
export const useReadIiPollingFoundationIsProposer =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'isProposer',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"state"`
 */
export const useReadIiPollingFoundationState =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingFoundationAbi,
    functionName: 'state',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__
 */
export const useWriteIiPollingFoundation = /*#__PURE__*/ createUseWriteContract(
  { abi: iiPollingFoundationAbi },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"cancel"`
 */
export const useWriteIiPollingFoundationCancel =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVote"`
 */
export const useWriteIiPollingFoundationCastVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVoteBySig"`
 */
export const useWriteIiPollingFoundationCastVoteBySig =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVoteBySig',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVoteWithReason"`
 */
export const useWriteIiPollingFoundationCastVoteWithReason =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVoteWithReason',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"execute"`
 */
export const useWriteIiPollingFoundationExecute =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'execute',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"propose"`
 */
export const useWriteIiPollingFoundationPropose =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingFoundationAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__
 */
export const useSimulateIiPollingFoundation =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiPollingFoundationAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"cancel"`
 */
export const useSimulateIiPollingFoundationCancel =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVote"`
 */
export const useSimulateIiPollingFoundationCastVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVoteBySig"`
 */
export const useSimulateIiPollingFoundationCastVoteBySig =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVoteBySig',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"castVoteWithReason"`
 */
export const useSimulateIiPollingFoundationCastVoteWithReason =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'castVoteWithReason',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"execute"`
 */
export const useSimulateIiPollingFoundationExecute =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'execute',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `functionName` set to `"propose"`
 */
export const useSimulateIiPollingFoundationPropose =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingFoundationAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingFoundationAbi}__
 */
export const useWatchIiPollingFoundationEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiPollingFoundationAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `eventName` set to `"ProposalCanceled"`
 */
export const useWatchIiPollingFoundationProposalCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingFoundationAbi,
    eventName: 'ProposalCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `eventName` set to `"ProposalCreated"`
 */
export const useWatchIiPollingFoundationProposalCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingFoundationAbi,
    eventName: 'ProposalCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `eventName` set to `"ProposalExecuted"`
 */
export const useWatchIiPollingFoundationProposalExecutedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingFoundationAbi,
    eventName: 'ProposalExecuted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingFoundationAbi}__ and `eventName` set to `"VoteCast"`
 */
export const useWatchIiPollingFoundationVoteCastEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingFoundationAbi,
    eventName: 'VoteCast',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__
 */
export const useReadIiPollingManagementGroup =
  /*#__PURE__*/ createUseReadContract({ abi: iiPollingManagementGroupAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"canPropose"`
 */
export const useReadIiPollingManagementGroupCanPropose =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'canPropose',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"canVote"`
 */
export const useReadIiPollingManagementGroupCanVote =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'canVote',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"getLastProposal"`
 */
export const useReadIiPollingManagementGroupGetLastProposal =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'getLastProposal',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"getProposalDescription"`
 */
export const useReadIiPollingManagementGroupGetProposalDescription =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'getProposalDescription',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"getProposalInfo"`
 */
export const useReadIiPollingManagementGroupGetProposalInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'getProposalInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"getProposalVotes"`
 */
export const useReadIiPollingManagementGroupGetProposalVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'getProposalVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"hasVoted"`
 */
export const useReadIiPollingManagementGroupHasVoted =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'hasVoted',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"isMember"`
 */
export const useReadIiPollingManagementGroupIsMember =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'isMember',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"state"`
 */
export const useReadIiPollingManagementGroupState =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'state',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__
 */
export const useWriteIiPollingManagementGroup =
  /*#__PURE__*/ createUseWriteContract({ abi: iiPollingManagementGroupAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"addMember"`
 */
export const useWriteIiPollingManagementGroupAddMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"cancel"`
 */
export const useWriteIiPollingManagementGroupCancel =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"castVote"`
 */
export const useWriteIiPollingManagementGroupCastVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"changeManagementGroupMembers"`
 */
export const useWriteIiPollingManagementGroupChangeManagementGroupMembers =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'changeManagementGroupMembers',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"propose"`
 */
export const useWriteIiPollingManagementGroupPropose =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"proposeWithSettings"`
 */
export const useWriteIiPollingManagementGroupProposeWithSettings =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'proposeWithSettings',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"removeMember"`
 */
export const useWriteIiPollingManagementGroupRemoveMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"setParameters"`
 */
export const useWriteIiPollingManagementGroupSetParameters =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'setParameters',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useWriteIiPollingManagementGroupSetProxyVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__
 */
export const useSimulateIiPollingManagementGroup =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiPollingManagementGroupAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"addMember"`
 */
export const useSimulateIiPollingManagementGroupAddMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"cancel"`
 */
export const useSimulateIiPollingManagementGroupCancel =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"castVote"`
 */
export const useSimulateIiPollingManagementGroupCastVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"changeManagementGroupMembers"`
 */
export const useSimulateIiPollingManagementGroupChangeManagementGroupMembers =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'changeManagementGroupMembers',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"propose"`
 */
export const useSimulateIiPollingManagementGroupPropose =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"proposeWithSettings"`
 */
export const useSimulateIiPollingManagementGroupProposeWithSettings =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'proposeWithSettings',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"removeMember"`
 */
export const useSimulateIiPollingManagementGroupRemoveMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"setParameters"`
 */
export const useSimulateIiPollingManagementGroupSetParameters =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'setParameters',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useSimulateIiPollingManagementGroupSetProxyVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiPollingManagementGroupAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__
 */
export const useWatchIiPollingManagementGroupEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"MaintainerSet"`
 */
export const useWatchIiPollingManagementGroupMaintainerSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'MaintainerSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupMemberAdded"`
 */
export const useWatchIiPollingManagementGroupManagementGroupMemberAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ManagementGroupMemberAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupMemberRemoved"`
 */
export const useWatchIiPollingManagementGroupManagementGroupMemberRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ManagementGroupMemberRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupProposalCreated"`
 */
export const useWatchIiPollingManagementGroupManagementGroupProposalCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ManagementGroupProposalCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ParametersSet"`
 */
export const useWatchIiPollingManagementGroupParametersSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ParametersSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ProposalCanceled"`
 */
export const useWatchIiPollingManagementGroupProposalCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ProposalCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"ProxyVoterSet"`
 */
export const useWatchIiPollingManagementGroupProxyVoterSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'ProxyVoterSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiPollingManagementGroupAbi}__ and `eventName` set to `"VoteCast"`
 */
export const useWatchIiPollingManagementGroupVoteCastEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiPollingManagementGroupAbi,
    eventName: 'VoteCast',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPublicKeyVerifierAbi}__
 */
export const useReadIiPublicKeyVerifier = /*#__PURE__*/ createUseReadContract({
  abi: iiPublicKeyVerifierAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiPublicKeyVerifierAbi}__ and `functionName` set to `"verifyPublicKey"`
 */
export const useReadIiPublicKeyVerifierVerifyPublicKey =
  /*#__PURE__*/ createUseReadContract({
    abi: iiPublicKeyVerifierAbi,
    functionName: 'verifyPublicKey',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__
 */
export const useReadIirNat = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"allowance"`
 */
export const useReadIirNatAllowance = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'allowance',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIirNatBalanceOf = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'balanceOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"decimals"`
 */
export const useReadIirNatDecimals = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'decimals',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"firstMonthStartTs"`
 */
export const useReadIirNatFirstMonthStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'firstMonthStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getBalancesOf"`
 */
export const useReadIirNatGetBalancesOf = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'getBalancesOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getClaimableRewards"`
 */
export const useReadIirNatGetClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'getClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getCurrentMonth"`
 */
export const useReadIirNatGetCurrentMonth = /*#__PURE__*/ createUseReadContract(
  { abi: iirNatAbi, functionName: 'getCurrentMonth' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getOwnerRewardsInfo"`
 */
export const useReadIirNatGetOwnerRewardsInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'getOwnerRewardsInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getProjectInfo"`
 */
export const useReadIirNatGetProjectInfo = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'getProjectInfo',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getProjectRewardsInfo"`
 */
export const useReadIirNatGetProjectRewardsInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'getProjectRewardsInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getProjectsBasicInfo"`
 */
export const useReadIirNatGetProjectsBasicInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'getProjectsBasicInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getProjectsCount"`
 */
export const useReadIirNatGetProjectsCount =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAbi,
    functionName: 'getProjectsCount',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getRNatAccount"`
 */
export const useReadIirNatGetRNatAccount = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'getRNatAccount',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"getRewardsInfo"`
 */
export const useReadIirNatGetRewardsInfo = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'getRewardsInfo',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"name"`
 */
export const useReadIirNatName = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'name',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIirNatSymbol = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIirNatTotalSupply = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'totalSupply',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"wNat"`
 */
export const useReadIirNatWNat = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAbi,
  functionName: 'wNat',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__
 */
export const useWriteIirNat = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"addProjects"`
 */
export const useWriteIirNatAddProjects = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'addProjects',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"approve"`
 */
export const useWriteIirNatApprove = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'approve',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"assignRewards"`
 */
export const useWriteIirNatAssignRewards = /*#__PURE__*/ createUseWriteContract(
  { abi: iirNatAbi, functionName: 'assignRewards' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"claimRewards"`
 */
export const useWriteIirNatClaimRewards = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'claimRewards',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"disableClaiming"`
 */
export const useWriteIirNatDisableClaiming =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'disableClaiming',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"disableDistribution"`
 */
export const useWriteIirNatDisableDistribution =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'disableDistribution',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"distributeRewards"`
 */
export const useWriteIirNatDistributeRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'distributeRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIirNatSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transfer"`
 */
export const useWriteIirNatTransfer = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'transfer',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useWriteIirNatTransferExternalToken =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useWriteIirNatTransferFrom = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'transferFrom',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"unassignRewards"`
 */
export const useWriteIirNatUnassignRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAbi,
    functionName: 'unassignRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"updateProject"`
 */
export const useWriteIirNatUpdateProject = /*#__PURE__*/ createUseWriteContract(
  { abi: iirNatAbi, functionName: 'updateProject' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIirNatWithdraw = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'withdraw',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useWriteIirNatWithdrawAll = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAbi,
  functionName: 'withdrawAll',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__
 */
export const useSimulateIirNat = /*#__PURE__*/ createUseSimulateContract({
  abi: iirNatAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"addProjects"`
 */
export const useSimulateIirNatAddProjects =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'addProjects',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"approve"`
 */
export const useSimulateIirNatApprove = /*#__PURE__*/ createUseSimulateContract(
  { abi: iirNatAbi, functionName: 'approve' },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"assignRewards"`
 */
export const useSimulateIirNatAssignRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'assignRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"claimRewards"`
 */
export const useSimulateIirNatClaimRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'claimRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"disableClaiming"`
 */
export const useSimulateIirNatDisableClaiming =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'disableClaiming',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"disableDistribution"`
 */
export const useSimulateIirNatDisableDistribution =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'disableDistribution',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"distributeRewards"`
 */
export const useSimulateIirNatDistributeRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'distributeRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIirNatSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transfer"`
 */
export const useSimulateIirNatTransfer =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'transfer',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useSimulateIirNatTransferExternalToken =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useSimulateIirNatTransferFrom =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"unassignRewards"`
 */
export const useSimulateIirNatUnassignRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'unassignRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"updateProject"`
 */
export const useSimulateIirNatUpdateProject =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'updateProject',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIirNatWithdraw =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useSimulateIirNatWithdrawAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAbi,
    functionName: 'withdrawAll',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__
 */
export const useWatchIirNatEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iirNatAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"Approval"`
 */
export const useWatchIirNatApprovalEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'Approval',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"ClaimingPermissionUpdated"`
 */
export const useWatchIirNatClaimingPermissionUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'ClaimingPermissionUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"DistributionPermissionUpdated"`
 */
export const useWatchIirNatDistributionPermissionUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'DistributionPermissionUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"LibraryAddressSet"`
 */
export const useWatchIirNatLibraryAddressSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'LibraryAddressSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"ProjectAdded"`
 */
export const useWatchIirNatProjectAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'ProjectAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"ProjectUpdated"`
 */
export const useWatchIirNatProjectUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'ProjectUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"RNatAccountCreated"`
 */
export const useWatchIirNatRNatAccountCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'RNatAccountCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"RewardsAssigned"`
 */
export const useWatchIirNatRewardsAssignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'RewardsAssigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"RewardsClaimed"`
 */
export const useWatchIirNatRewardsClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'RewardsClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"RewardsDistributed"`
 */
export const useWatchIirNatRewardsDistributedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'RewardsDistributed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"RewardsUnassigned"`
 */
export const useWatchIirNatRewardsUnassignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'RewardsUnassigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"Transfer"`
 */
export const useWatchIirNatTransferEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'Transfer',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"UnassignedRewardsWithdrawn"`
 */
export const useWatchIirNatUnassignedRewardsWithdrawnEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'UnassignedRewardsWithdrawn',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAbi}__ and `eventName` set to `"UnclaimedRewardsUnassigned"`
 */
export const useWatchIirNatUnclaimedRewardsUnassignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAbi,
    eventName: 'UnclaimedRewardsUnassigned',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__
 */
export const useReadIirNatAccount = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAccountAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"lockedBalance"`
 */
export const useReadIirNatAccountLockedBalance =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAccountAbi,
    functionName: 'lockedBalance',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"owner"`
 */
export const useReadIirNatAccountOwner = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAccountAbi,
  functionName: 'owner',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"rNat"`
 */
export const useReadIirNatAccountRNat = /*#__PURE__*/ createUseReadContract({
  abi: iirNatAccountAbi,
  functionName: 'rNat',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"rNatBalance"`
 */
export const useReadIirNatAccountRNatBalance =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAccountAbi,
    functionName: 'rNatBalance',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"receivedRewards"`
 */
export const useReadIirNatAccountReceivedRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAccountAbi,
    functionName: 'receivedRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"wNatBalance"`
 */
export const useReadIirNatAccountWNatBalance =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAccountAbi,
    functionName: 'wNatBalance',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"withdrawnRewards"`
 */
export const useReadIirNatAccountWithdrawnRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iirNatAccountAbi,
    functionName: 'withdrawnRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__
 */
export const useWriteIirNatAccount = /*#__PURE__*/ createUseWriteContract({
  abi: iirNatAccountAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"initialize"`
 */
export const useWriteIirNatAccountInitialize =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'initialize',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"receiveRewards"`
 */
export const useWriteIirNatAccountReceiveRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'receiveRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIirNatAccountSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useWriteIirNatAccountTransferExternalToken =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIirNatAccountWithdraw =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useWriteIirNatAccountWithdrawAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: iirNatAccountAbi,
    functionName: 'withdrawAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__
 */
export const useSimulateIirNatAccount = /*#__PURE__*/ createUseSimulateContract(
  { abi: iirNatAccountAbi },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"initialize"`
 */
export const useSimulateIirNatAccountInitialize =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'initialize',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"receiveRewards"`
 */
export const useSimulateIirNatAccountReceiveRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'receiveRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIirNatAccountSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useSimulateIirNatAccountTransferExternalToken =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIirNatAccountWithdraw =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'withdraw',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iirNatAccountAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useSimulateIirNatAccountWithdrawAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iirNatAccountAbi,
    functionName: 'withdrawAll',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__
 */
export const useWatchIirNatAccountEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iirNatAccountAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__ and `eventName` set to `"ClaimExecutorsSet"`
 */
export const useWatchIirNatAccountClaimExecutorsSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAccountAbi,
    eventName: 'ClaimExecutorsSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__ and `eventName` set to `"ExternalTokenTransferred"`
 */
export const useWatchIirNatAccountExternalTokenTransferredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAccountAbi,
    eventName: 'ExternalTokenTransferred',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__ and `eventName` set to `"FundsWithdrawn"`
 */
export const useWatchIirNatAccountFundsWithdrawnEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAccountAbi,
    eventName: 'FundsWithdrawn',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__ and `eventName` set to `"Initialized"`
 */
export const useWatchIirNatAccountInitializedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAccountAbi,
    eventName: 'Initialized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iirNatAccountAbi}__ and `eventName` set to `"LockedAmountBurned"`
 */
export const useWatchIirNatAccountLockedAmountBurnedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iirNatAccountAbi,
    eventName: 'LockedAmountBurned',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__
 */
export const useReadIiRelay = /*#__PURE__*/ createUseReadContract({
  abi: iiRelayAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"feeCollectionAddress"`
 */
export const useReadIiRelayFeeCollectionAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'feeCollectionAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"getRandomNumber"`
 */
export const useReadIiRelayGetRandomNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'getRandomNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"getRandomNumberHistorical"`
 */
export const useReadIiRelayGetRandomNumberHistorical =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'getRandomNumberHistorical',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"getVotingRoundId"`
 */
export const useReadIiRelayGetVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'getVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"isFinalized"`
 */
export const useReadIiRelayIsFinalized = /*#__PURE__*/ createUseReadContract({
  abi: iiRelayAbi,
  functionName: 'isFinalized',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"lastInitializedRewardEpochData"`
 */
export const useReadIiRelayLastInitializedRewardEpochData =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'lastInitializedRewardEpochData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"merkleRoots"`
 */
export const useReadIiRelayMerkleRoots = /*#__PURE__*/ createUseReadContract({
  abi: iiRelayAbi,
  functionName: 'merkleRoots',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"protocolFeeInWei"`
 */
export const useReadIiRelayProtocolFeeInWei =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'protocolFeeInWei',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"startingVotingRoundIds"`
 */
export const useReadIiRelayStartingVotingRoundIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'startingVotingRoundIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"toSigningPolicyHash"`
 */
export const useReadIiRelayToSigningPolicyHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRelayAbi,
    functionName: 'toSigningPolicyHash',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__
 */
export const useWriteIiRelay = /*#__PURE__*/ createUseWriteContract({
  abi: iiRelayAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"governanceFeeSetup"`
 */
export const useWriteIiRelayGovernanceFeeSetup =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRelayAbi,
    functionName: 'governanceFeeSetup',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"relay"`
 */
export const useWriteIiRelayRelay = /*#__PURE__*/ createUseWriteContract({
  abi: iiRelayAbi,
  functionName: 'relay',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"setSigningPolicy"`
 */
export const useWriteIiRelaySetSigningPolicy =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRelayAbi,
    functionName: 'setSigningPolicy',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"verify"`
 */
export const useWriteIiRelayVerify = /*#__PURE__*/ createUseWriteContract({
  abi: iiRelayAbi,
  functionName: 'verify',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"verifyCustomSignature"`
 */
export const useWriteIiRelayVerifyCustomSignature =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRelayAbi,
    functionName: 'verifyCustomSignature',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__
 */
export const useSimulateIiRelay = /*#__PURE__*/ createUseSimulateContract({
  abi: iiRelayAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"governanceFeeSetup"`
 */
export const useSimulateIiRelayGovernanceFeeSetup =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRelayAbi,
    functionName: 'governanceFeeSetup',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"relay"`
 */
export const useSimulateIiRelayRelay = /*#__PURE__*/ createUseSimulateContract({
  abi: iiRelayAbi,
  functionName: 'relay',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"setSigningPolicy"`
 */
export const useSimulateIiRelaySetSigningPolicy =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRelayAbi,
    functionName: 'setSigningPolicy',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"verify"`
 */
export const useSimulateIiRelayVerify = /*#__PURE__*/ createUseSimulateContract(
  { abi: iiRelayAbi, functionName: 'verify' },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRelayAbi}__ and `functionName` set to `"verifyCustomSignature"`
 */
export const useSimulateIiRelayVerifyCustomSignature =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRelayAbi,
    functionName: 'verifyCustomSignature',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRelayAbi}__
 */
export const useWatchIiRelayEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iiRelayAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRelayAbi}__ and `eventName` set to `"ProtocolMessageRelayed"`
 */
export const useWatchIiRelayProtocolMessageRelayedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRelayAbi,
    eventName: 'ProtocolMessageRelayed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRelayAbi}__ and `eventName` set to `"SigningPolicyInitialized"`
 */
export const useWatchIiRelaySigningPolicyInitializedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRelayAbi,
    eventName: 'SigningPolicyInitialized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRelayAbi}__ and `eventName` set to `"SigningPolicyRelayed"`
 */
export const useWatchIiRelaySigningPolicyRelayedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRelayAbi,
    eventName: 'SigningPolicyRelayed',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardEpochSwitchoverTriggerAbi}__
 */
export const useWriteIiRewardEpochSwitchoverTrigger =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardEpochSwitchoverTriggerAbi,
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardEpochSwitchoverTriggerAbi}__ and `functionName` set to `"triggerRewardEpochSwitchover"`
 */
export const useWriteIiRewardEpochSwitchoverTriggerTriggerRewardEpochSwitchover =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardEpochSwitchoverTriggerAbi,
    functionName: 'triggerRewardEpochSwitchover',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardEpochSwitchoverTriggerAbi}__
 */
export const useSimulateIiRewardEpochSwitchoverTrigger =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardEpochSwitchoverTriggerAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardEpochSwitchoverTriggerAbi}__ and `functionName` set to `"triggerRewardEpochSwitchover"`
 */
export const useSimulateIiRewardEpochSwitchoverTriggerTriggerRewardEpochSwitchover =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardEpochSwitchoverTriggerAbi,
    functionName: 'triggerRewardEpochSwitchover',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__
 */
export const useReadIiRewardManager = /*#__PURE__*/ createUseReadContract({
  abi: iiRewardManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"active"`
 */
export const useReadIiRewardManagerActive = /*#__PURE__*/ createUseReadContract(
  { abi: iiRewardManagerAbi, functionName: 'active' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"cleanupBlockNumber"`
 */
export const useReadIiRewardManagerCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'cleanupBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"firstClaimableRewardEpochId"`
 */
export const useReadIiRewardManagerFirstClaimableRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'firstClaimableRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getCurrentRewardEpochId"`
 */
export const useReadIiRewardManagerGetCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getCurrentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getInitialRewardEpochId"`
 */
export const useReadIiRewardManagerGetInitialRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getInitialRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getNextClaimableRewardEpochId"`
 */
export const useReadIiRewardManagerGetNextClaimableRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getNextClaimableRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getRewardEpochIdToExpireNext"`
 */
export const useReadIiRewardManagerGetRewardEpochIdToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getRewardEpochIdToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getRewardEpochIdsWithClaimableRewards"`
 */
export const useReadIiRewardManagerGetRewardEpochIdsWithClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getRewardEpochIdsWithClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getRewardEpochTotals"`
 */
export const useReadIiRewardManagerGetRewardEpochTotals =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getRewardEpochTotals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getStateOfRewards"`
 */
export const useReadIiRewardManagerGetStateOfRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getStateOfRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getStateOfRewardsAt"`
 */
export const useReadIiRewardManagerGetStateOfRewardsAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getStateOfRewardsAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getTotals"`
 */
export const useReadIiRewardManagerGetTotals =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getTotals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"getUnclaimedRewardState"`
 */
export const useReadIiRewardManagerGetUnclaimedRewardState =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'getUnclaimedRewardState',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"noOfInitialisedWeightBasedClaims"`
 */
export const useReadIiRewardManagerNoOfInitialisedWeightBasedClaims =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'noOfInitialisedWeightBasedClaims',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"rewardManagerId"`
 */
export const useReadIiRewardManagerRewardManagerId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiRewardManagerAbi,
    functionName: 'rewardManagerId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__
 */
export const useWriteIiRewardManager = /*#__PURE__*/ createUseWriteContract({
  abi: iiRewardManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useWriteIiRewardManagerAutoClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteIiRewardManagerClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"claimProxy"`
 */
export const useWriteIiRewardManagerClaimProxy =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'claimProxy',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"closeExpiredRewardEpoch"`
 */
export const useWriteIiRewardManagerCloseExpiredRewardEpoch =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'closeExpiredRewardEpoch',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"initialiseWeightBasedClaims"`
 */
export const useWriteIiRewardManagerInitialiseWeightBasedClaims =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'initialiseWeightBasedClaims',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"receiveRewards"`
 */
export const useWriteIiRewardManagerReceiveRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiRewardManagerAbi,
    functionName: 'receiveRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__
 */
export const useSimulateIiRewardManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiRewardManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useSimulateIiRewardManagerAutoClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateIiRewardManagerClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"claimProxy"`
 */
export const useSimulateIiRewardManagerClaimProxy =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'claimProxy',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"closeExpiredRewardEpoch"`
 */
export const useSimulateIiRewardManagerCloseExpiredRewardEpoch =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'closeExpiredRewardEpoch',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"initialiseWeightBasedClaims"`
 */
export const useSimulateIiRewardManagerInitialiseWeightBasedClaims =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'initialiseWeightBasedClaims',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `functionName` set to `"receiveRewards"`
 */
export const useSimulateIiRewardManagerReceiveRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiRewardManagerAbi,
    functionName: 'receiveRewards',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRewardManagerAbi}__
 */
export const useWatchIiRewardManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiRewardManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `eventName` set to `"RewardClaimed"`
 */
export const useWatchIiRewardManagerRewardClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRewardManagerAbi,
    eventName: 'RewardClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `eventName` set to `"RewardClaimsEnabled"`
 */
export const useWatchIiRewardManagerRewardClaimsEnabledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRewardManagerAbi,
    eventName: 'RewardClaimsEnabled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiRewardManagerAbi}__ and `eventName` set to `"RewardClaimsExpired"`
 */
export const useWatchIiRewardManagerRewardClaimsExpiredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiRewardManagerAbi,
    eventName: 'RewardClaimsExpired',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiSubmissionAbi}__
 */
export const useReadIiSubmission = /*#__PURE__*/ createUseReadContract({
  abi: iiSubmissionAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadIiSubmissionGetCurrentRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iiSubmissionAbi,
    functionName: 'getCurrentRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"getCurrentRandomWithQuality"`
 */
export const useReadIiSubmissionGetCurrentRandomWithQuality =
  /*#__PURE__*/ createUseReadContract({
    abi: iiSubmissionAbi,
    functionName: 'getCurrentRandomWithQuality',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"getCurrentRandomWithQualityAndTimestamp"`
 */
export const useReadIiSubmissionGetCurrentRandomWithQualityAndTimestamp =
  /*#__PURE__*/ createUseReadContract({
    abi: iiSubmissionAbi,
    functionName: 'getCurrentRandomWithQualityAndTimestamp',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__
 */
export const useWriteIiSubmission = /*#__PURE__*/ createUseWriteContract({
  abi: iiSubmissionAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"initNewVotingRound"`
 */
export const useWriteIiSubmissionInitNewVotingRound =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiSubmissionAbi,
    functionName: 'initNewVotingRound',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit1"`
 */
export const useWriteIiSubmissionSubmit1 = /*#__PURE__*/ createUseWriteContract(
  { abi: iiSubmissionAbi, functionName: 'submit1' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit2"`
 */
export const useWriteIiSubmissionSubmit2 = /*#__PURE__*/ createUseWriteContract(
  { abi: iiSubmissionAbi, functionName: 'submit2' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit3"`
 */
export const useWriteIiSubmissionSubmit3 = /*#__PURE__*/ createUseWriteContract(
  { abi: iiSubmissionAbi, functionName: 'submit3' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submitAndPass"`
 */
export const useWriteIiSubmissionSubmitAndPass =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiSubmissionAbi,
    functionName: 'submitAndPass',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submitSignatures"`
 */
export const useWriteIiSubmissionSubmitSignatures =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiSubmissionAbi,
    functionName: 'submitSignatures',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__
 */
export const useSimulateIiSubmission = /*#__PURE__*/ createUseSimulateContract({
  abi: iiSubmissionAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"initNewVotingRound"`
 */
export const useSimulateIiSubmissionInitNewVotingRound =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'initNewVotingRound',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit1"`
 */
export const useSimulateIiSubmissionSubmit1 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'submit1',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit2"`
 */
export const useSimulateIiSubmissionSubmit2 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'submit2',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submit3"`
 */
export const useSimulateIiSubmissionSubmit3 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'submit3',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submitAndPass"`
 */
export const useSimulateIiSubmissionSubmitAndPass =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'submitAndPass',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiSubmissionAbi}__ and `functionName` set to `"submitSignatures"`
 */
export const useSimulateIiSubmissionSubmitSignatures =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiSubmissionAbi,
    functionName: 'submitSignatures',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiSubmissionAbi}__
 */
export const useWatchIiSubmissionEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiSubmissionAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiSubmissionAbi}__ and `eventName` set to `"NewVotingRoundInitiated"`
 */
export const useWatchIiSubmissionNewVotingRoundInitiatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiSubmissionAbi,
    eventName: 'NewVotingRoundInitiated',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__
 */
export const useReadIivpContract = /*#__PURE__*/ createUseReadContract({
  abi: iivpContractAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIivpContractBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"cleanupBlockNumber"`
 */
export const useReadIivpContractCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'cleanupBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegatesOf"`
 */
export const useReadIivpContractDelegatesOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'delegatesOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegatesOfAt"`
 */
export const useReadIivpContractDelegatesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'delegatesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegationModeOf"`
 */
export const useReadIivpContractDelegationModeOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'delegationModeOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"isReplacement"`
 */
export const useReadIivpContractIsReplacement =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'isReplacement',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"ownerToken"`
 */
export const useReadIivpContractOwnerToken =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'ownerToken',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegatedVotePowerOf"`
 */
export const useReadIivpContractUndelegatedVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'undelegatedVotePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegatedVotePowerOfAt"`
 */
export const useReadIivpContractUndelegatedVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'undelegatedVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIivpContractVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIivpContractVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIivpContractVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'votePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIivpContractVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerOfAtIgnoringRevocation"`
 */
export const useReadIivpContractVotePowerOfAtIgnoringRevocation =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpContractAbi,
    functionName: 'votePowerOfAtIgnoringRevocation',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__
 */
export const useWriteIivpContract = /*#__PURE__*/ createUseWriteContract({
  abi: iivpContractAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIivpContractDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useWriteIivpContractDelegateExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useWriteIivpContractRevokeDelegationAt =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useWriteIivpContractSetCleanerContract =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useWriteIivpContractSetCleanupBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useWriteIivpContractUndelegateAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useWriteIivpContractUndelegateAllExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"updateAtTokenTransfer"`
 */
export const useWriteIivpContractUpdateAtTokenTransfer =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'updateAtTokenTransfer',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIivpContractVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpContractAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__
 */
export const useSimulateIivpContract = /*#__PURE__*/ createUseSimulateContract({
  abi: iivpContractAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIivpContractDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useSimulateIivpContractDelegateExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useSimulateIivpContractRevokeDelegationAt =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useSimulateIivpContractSetCleanerContract =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useSimulateIivpContractSetCleanupBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useSimulateIivpContractUndelegateAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useSimulateIivpContractUndelegateAllExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"updateAtTokenTransfer"`
 */
export const useSimulateIivpContractUpdateAtTokenTransfer =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'updateAtTokenTransfer',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpContractAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIivpContractVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpContractAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpContractAbi}__
 */
export const useWatchIivpContractEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iivpContractAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpContractAbi}__ and `eventName` set to `"Delegate"`
 */
export const useWatchIivpContractDelegateEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iivpContractAbi,
    eventName: 'Delegate',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpContractAbi}__ and `eventName` set to `"Revoke"`
 */
export const useWatchIivpContractRevokeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iivpContractAbi,
    eventName: 'Revoke',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__
 */
export const useReadIivpToken = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"allowance"`
 */
export const useReadIivpTokenAllowance = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'allowance',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIivpTokenBalanceOf = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'balanceOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"balanceOfAt"`
 */
export const useReadIivpTokenBalanceOfAt = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'balanceOfAt',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIivpTokenBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"cleanupBlockNumber"`
 */
export const useReadIivpTokenCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'cleanupBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"decimals"`
 */
export const useReadIivpTokenDecimals = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'decimals',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegatesOf"`
 */
export const useReadIivpTokenDelegatesOf = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'delegatesOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegatesOfAt"`
 */
export const useReadIivpTokenDelegatesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'delegatesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegationModeOf"`
 */
export const useReadIivpTokenDelegationModeOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'delegationModeOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"governanceVotePower"`
 */
export const useReadIivpTokenGovernanceVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'governanceVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"name"`
 */
export const useReadIivpTokenName = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'name',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"readVotePowerContract"`
 */
export const useReadIivpTokenReadVotePowerContract =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'readVotePowerContract',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIivpTokenSymbol = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIivpTokenTotalSupply = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'totalSupply',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalSupplyAt"`
 */
export const useReadIivpTokenTotalSupplyAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'totalSupplyAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIivpTokenTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIivpTokenTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegatedVotePowerOf"`
 */
export const useReadIivpTokenUndelegatedVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'undelegatedVotePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegatedVotePowerOfAt"`
 */
export const useReadIivpTokenUndelegatedVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'undelegatedVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIivpTokenVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIivpTokenVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIivpTokenVotePowerOf = /*#__PURE__*/ createUseReadContract({
  abi: iivpTokenAbi,
  functionName: 'votePowerOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIivpTokenVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerOfAtIgnoringRevocation"`
 */
export const useReadIivpTokenVotePowerOfAtIgnoringRevocation =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerOfAtIgnoringRevocation',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"writeVotePowerContract"`
 */
export const useReadIivpTokenWriteVotePowerContract =
  /*#__PURE__*/ createUseReadContract({
    abi: iivpTokenAbi,
    functionName: 'writeVotePowerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__
 */
export const useWriteIivpToken = /*#__PURE__*/ createUseWriteContract({
  abi: iivpTokenAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"approve"`
 */
export const useWriteIivpTokenApprove = /*#__PURE__*/ createUseWriteContract({
  abi: iivpTokenAbi,
  functionName: 'approve',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useWriteIivpTokenBatchDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIivpTokenDelegate = /*#__PURE__*/ createUseWriteContract({
  abi: iivpTokenAbi,
  functionName: 'delegate',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useWriteIivpTokenDelegateExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useWriteIivpTokenRevokeDelegationAt =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useWriteIivpTokenSetCleanerContract =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useWriteIivpTokenSetCleanupBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanupBlockNumberManager"`
 */
export const useWriteIivpTokenSetCleanupBlockNumberManager =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanupBlockNumberManager',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setGovernanceVotePower"`
 */
export const useWriteIivpTokenSetGovernanceVotePower =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'setGovernanceVotePower',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useWriteIivpTokenTotalVotePowerAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"transfer"`
 */
export const useWriteIivpTokenTransfer = /*#__PURE__*/ createUseWriteContract({
  abi: iivpTokenAbi,
  functionName: 'transfer',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useWriteIivpTokenTransferFrom =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useWriteIivpTokenUndelegateAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useWriteIivpTokenUndelegateAllExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIivpTokenVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__
 */
export const useSimulateIivpToken = /*#__PURE__*/ createUseSimulateContract({
  abi: iivpTokenAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"approve"`
 */
export const useSimulateIivpTokenApprove =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'approve',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useSimulateIivpTokenBatchDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIivpTokenDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useSimulateIivpTokenDelegateExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useSimulateIivpTokenRevokeDelegationAt =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanerContract"`
 */
export const useSimulateIivpTokenSetCleanerContract =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanerContract',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanupBlockNumber"`
 */
export const useSimulateIivpTokenSetCleanupBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanupBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setCleanupBlockNumberManager"`
 */
export const useSimulateIivpTokenSetCleanupBlockNumberManager =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'setCleanupBlockNumberManager',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"setGovernanceVotePower"`
 */
export const useSimulateIivpTokenSetGovernanceVotePower =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'setGovernanceVotePower',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useSimulateIivpTokenTotalVotePowerAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"transfer"`
 */
export const useSimulateIivpTokenTransfer =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'transfer',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useSimulateIivpTokenTransferFrom =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useSimulateIivpTokenUndelegateAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useSimulateIivpTokenUndelegateAllExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iivpTokenAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIivpTokenVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iivpTokenAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpTokenAbi}__
 */
export const useWatchIivpTokenEvent = /*#__PURE__*/ createUseWatchContractEvent(
  { abi: iivpTokenAbi },
)

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpTokenAbi}__ and `eventName` set to `"Approval"`
 */
export const useWatchIivpTokenApprovalEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iivpTokenAbi,
    eventName: 'Approval',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iivpTokenAbi}__ and `eventName` set to `"Transfer"`
 */
export const useWatchIivpTokenTransferEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iivpTokenAbi,
    eventName: 'Transfer',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistrationTriggerAbi}__
 */
export const useWriteIiVoterRegistrationTrigger =
  /*#__PURE__*/ createUseWriteContract({ abi: iiVoterRegistrationTriggerAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistrationTriggerAbi}__ and `functionName` set to `"triggerVoterRegistration"`
 */
export const useWriteIiVoterRegistrationTriggerTriggerVoterRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiVoterRegistrationTriggerAbi,
    functionName: 'triggerVoterRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistrationTriggerAbi}__
 */
export const useSimulateIiVoterRegistrationTrigger =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistrationTriggerAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistrationTriggerAbi}__ and `functionName` set to `"triggerVoterRegistration"`
 */
export const useSimulateIiVoterRegistrationTriggerTriggerVoterRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistrationTriggerAbi,
    functionName: 'triggerVoterRegistration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__
 */
export const useReadIiVoterRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iiVoterRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"chilledUntilRewardEpochId"`
 */
export const useReadIiVoterRegistryChilledUntilRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'chilledUntilRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getNumberOfRegisteredVoters"`
 */
export const useReadIiVoterRegistryGetNumberOfRegisteredVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getNumberOfRegisteredVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getPublicKeyAndNormalisedWeight"`
 */
export const useReadIiVoterRegistryGetPublicKeyAndNormalisedWeight =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getPublicKeyAndNormalisedWeight',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredDelegationAddresses"`
 */
export const useReadIiVoterRegistryGetRegisteredDelegationAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredDelegationAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredNodeIds"`
 */
export const useReadIiVoterRegistryGetRegisteredNodeIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredNodeIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredPublicKeys"`
 */
export const useReadIiVoterRegistryGetRegisteredPublicKeys =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredPublicKeys',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredSigningPolicyAddresses"`
 */
export const useReadIiVoterRegistryGetRegisteredSigningPolicyAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredSigningPolicyAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredSubmitAddresses"`
 */
export const useReadIiVoterRegistryGetRegisteredSubmitAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredSubmitAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredSubmitSignaturesAddresses"`
 */
export const useReadIiVoterRegistryGetRegisteredSubmitSignaturesAddresses =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredSubmitSignaturesAddresses',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredVoters"`
 */
export const useReadIiVoterRegistryGetRegisteredVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredVotersAndNormalisedWeights"`
 */
export const useReadIiVoterRegistryGetRegisteredVotersAndNormalisedWeights =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredVotersAndNormalisedWeights',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getRegisteredVotersAndRegistrationWeights"`
 */
export const useReadIiVoterRegistryGetRegisteredVotersAndRegistrationWeights =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getRegisteredVotersAndRegistrationWeights',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getVoterNormalisedWeight"`
 */
export const useReadIiVoterRegistryGetVoterNormalisedWeight =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getVoterNormalisedWeight',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getVoterRegistrationWeight"`
 */
export const useReadIiVoterRegistryGetVoterRegistrationWeight =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getVoterRegistrationWeight',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getVoterWithNormalisedWeight"`
 */
export const useReadIiVoterRegistryGetVoterWithNormalisedWeight =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getVoterWithNormalisedWeight',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"getWeightsSums"`
 */
export const useReadIiVoterRegistryGetWeightsSums =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'getWeightsSums',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"isVoterRegistered"`
 */
export const useReadIiVoterRegistryIsVoterRegistered =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'isVoterRegistered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"maxVoters"`
 */
export const useReadIiVoterRegistryMaxVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'maxVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"newSigningPolicyInitializationStartBlockNumber"`
 */
export const useReadIiVoterRegistryNewSigningPolicyInitializationStartBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'newSigningPolicyInitializationStartBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"publicKeyRequired"`
 */
export const useReadIiVoterRegistryPublicKeyRequired =
  /*#__PURE__*/ createUseReadContract({
    abi: iiVoterRegistryAbi,
    functionName: 'publicKeyRequired',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__
 */
export const useWriteIiVoterRegistry = /*#__PURE__*/ createUseWriteContract({
  abi: iiVoterRegistryAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"createSigningPolicySnapshot"`
 */
export const useWriteIiVoterRegistryCreateSigningPolicySnapshot =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiVoterRegistryAbi,
    functionName: 'createSigningPolicySnapshot',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"registerVoter"`
 */
export const useWriteIiVoterRegistryRegisterVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiVoterRegistryAbi,
    functionName: 'registerVoter',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"setNewSigningPolicyInitializationStartBlockNumber"`
 */
export const useWriteIiVoterRegistrySetNewSigningPolicyInitializationStartBlockNumber =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiVoterRegistryAbi,
    functionName: 'setNewSigningPolicyInitializationStartBlockNumber',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"systemRegistration"`
 */
export const useWriteIiVoterRegistrySystemRegistration =
  /*#__PURE__*/ createUseWriteContract({
    abi: iiVoterRegistryAbi,
    functionName: 'systemRegistration',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__
 */
export const useSimulateIiVoterRegistry =
  /*#__PURE__*/ createUseSimulateContract({ abi: iiVoterRegistryAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"createSigningPolicySnapshot"`
 */
export const useSimulateIiVoterRegistryCreateSigningPolicySnapshot =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistryAbi,
    functionName: 'createSigningPolicySnapshot',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"registerVoter"`
 */
export const useSimulateIiVoterRegistryRegisterVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistryAbi,
    functionName: 'registerVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"setNewSigningPolicyInitializationStartBlockNumber"`
 */
export const useSimulateIiVoterRegistrySetNewSigningPolicyInitializationStartBlockNumber =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistryAbi,
    functionName: 'setNewSigningPolicyInitializationStartBlockNumber',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `functionName` set to `"systemRegistration"`
 */
export const useSimulateIiVoterRegistrySystemRegistration =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iiVoterRegistryAbi,
    functionName: 'systemRegistration',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiVoterRegistryAbi}__
 */
export const useWatchIiVoterRegistryEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iiVoterRegistryAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `eventName` set to `"BeneficiaryChilled"`
 */
export const useWatchIiVoterRegistryBeneficiaryChilledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiVoterRegistryAbi,
    eventName: 'BeneficiaryChilled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `eventName` set to `"VoterRegistered"`
 */
export const useWatchIiVoterRegistryVoterRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiVoterRegistryAbi,
    eventName: 'VoterRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iiVoterRegistryAbi}__ and `eventName` set to `"VoterRemoved"`
 */
export const useWatchIiVoterRegistryVoterRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iiVoterRegistryAbi,
    eventName: 'VoterRemoved',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iIncreaseManagerAbi}__
 */
export const useReadIIncreaseManager = /*#__PURE__*/ createUseReadContract({
  abi: iIncreaseManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iIncreaseManagerAbi}__ and `functionName` set to `"getIncentiveDuration"`
 */
export const useReadIIncreaseManagerGetIncentiveDuration =
  /*#__PURE__*/ createUseReadContract({
    abi: iIncreaseManagerAbi,
    functionName: 'getIncentiveDuration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iJsonApiVerificationAbi}__
 */
export const useReadIJsonApiVerification = /*#__PURE__*/ createUseReadContract({
  abi: iJsonApiVerificationAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iJsonApiVerificationAbi}__ and `functionName` set to `"verifyJsonApi"`
 */
export const useReadIJsonApiVerificationVerifyJsonApi =
  /*#__PURE__*/ createUseReadContract({
    abi: iJsonApiVerificationAbi,
    functionName: 'verifyJsonApi',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__
 */
export const useReadIpChainStakeMirror = /*#__PURE__*/ createUseReadContract({
  abi: ipChainStakeMirrorAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIpChainStakeMirrorBalanceOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'balanceOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"balanceOfAt"`
 */
export const useReadIpChainStakeMirrorBalanceOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'balanceOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIpChainStakeMirrorBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"isActiveStakeMirrored"`
 */
export const useReadIpChainStakeMirrorIsActiveStakeMirrored =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'isActiveStakeMirrored',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"stakesOf"`
 */
export const useReadIpChainStakeMirrorStakesOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'stakesOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"stakesOfAt"`
 */
export const useReadIpChainStakeMirrorStakesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'stakesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIpChainStakeMirrorTotalSupply =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalSupply',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalSupplyAt"`
 */
export const useReadIpChainStakeMirrorTotalSupplyAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalSupplyAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIpChainStakeMirrorTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIpChainStakeMirrorTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIpChainStakeMirrorVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIpChainStakeMirrorVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIpChainStakeMirrorVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIpChainStakeMirrorVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__
 */
export const useWriteIpChainStakeMirror = /*#__PURE__*/ createUseWriteContract({
  abi: ipChainStakeMirrorAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"mirrorStake"`
 */
export const useWriteIpChainStakeMirrorMirrorStake =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'mirrorStake',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useWriteIpChainStakeMirrorTotalVotePowerAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIpChainStakeMirrorVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__
 */
export const useSimulateIpChainStakeMirror =
  /*#__PURE__*/ createUseSimulateContract({ abi: ipChainStakeMirrorAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"mirrorStake"`
 */
export const useSimulateIpChainStakeMirrorMirrorStake =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'mirrorStake',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useSimulateIpChainStakeMirrorTotalVotePowerAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIpChainStakeMirrorVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__
 */
export const useWatchIpChainStakeMirrorEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: ipChainStakeMirrorAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"MaxUpdatesPerBlockSet"`
 */
export const useWatchIpChainStakeMirrorMaxUpdatesPerBlockSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'MaxUpdatesPerBlockSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"StakeConfirmed"`
 */
export const useWatchIpChainStakeMirrorStakeConfirmedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'StakeConfirmed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"StakeEnded"`
 */
export const useWatchIpChainStakeMirrorStakeEndedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'StakeEnded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"StakeRevoked"`
 */
export const useWatchIpChainStakeMirrorStakeRevokedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'StakeRevoked',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"VotePowerCacheCreated"`
 */
export const useWatchIpChainStakeMirrorVotePowerCacheCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'VotePowerCacheCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorAbi}__ and `eventName` set to `"VotePowerChanged"`
 */
export const useWatchIpChainStakeMirrorVotePowerChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorAbi,
    eventName: 'VotePowerChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__
 */
export const useReadIpChainStakeMirrorMultiSigVoting =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getCurrentEpochId"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetCurrentEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getCurrentEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getEpochConfiguration"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetEpochConfiguration =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getEpochConfiguration',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getEpochId"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getMerkleRoot"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetMerkleRoot =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getMerkleRoot',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getVoters"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getVotes"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"getVotingThreshold"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingGetVotingThreshold =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'getVotingThreshold',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"shouldVote"`
 */
export const useReadIpChainStakeMirrorMultiSigVotingShouldVote =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'shouldVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__
 */
export const useWriteIpChainStakeMirrorMultiSigVoting =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"submitValidatorUptimeVote"`
 */
export const useWriteIpChainStakeMirrorMultiSigVotingSubmitValidatorUptimeVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'submitValidatorUptimeVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"submitVote"`
 */
export const useWriteIpChainStakeMirrorMultiSigVotingSubmitVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'submitVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__
 */
export const useSimulateIpChainStakeMirrorMultiSigVoting =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"submitValidatorUptimeVote"`
 */
export const useSimulateIpChainStakeMirrorMultiSigVotingSubmitValidatorUptimeVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'submitValidatorUptimeVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `functionName` set to `"submitVote"`
 */
export const useSimulateIpChainStakeMirrorMultiSigVotingSubmitVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    functionName: 'submitVote',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__
 */
export const useWatchIpChainStakeMirrorMultiSigVotingEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorValidatorUptimeVoteSubmitted"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorValidatorUptimeVoteSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorValidatorUptimeVoteSubmitted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorVoteSubmitted"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorVoteSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorVoteSubmitted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorVotersSet"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorVotersSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorVotersSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorVotingFinalized"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorVotingFinalizedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorVotingFinalized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorVotingReset"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorVotingResetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorVotingReset',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainStakeMirrorMultiSigVotingAbi}__ and `eventName` set to `"PChainStakeMirrorVotingThresholdSet"`
 */
export const useWatchIpChainStakeMirrorMultiSigVotingPChainStakeMirrorVotingThresholdSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainStakeMirrorMultiSigVotingAbi,
    eventName: 'PChainStakeMirrorVotingThresholdSet',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__
 */
export const useReadIpChainVotePower = /*#__PURE__*/ createUseReadContract({
  abi: ipChainVotePowerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"batchVotePowerOfAt"`
 */
export const useReadIpChainVotePowerBatchVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'batchVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"stakesOf"`
 */
export const useReadIpChainVotePowerStakesOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'stakesOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"stakesOfAt"`
 */
export const useReadIpChainVotePowerStakesOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'stakesOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIpChainVotePowerTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIpChainVotePowerTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIpChainVotePowerVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIpChainVotePowerVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIpChainVotePowerVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIpChainVotePowerVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerOfAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__
 */
export const useWriteIpChainVotePower = /*#__PURE__*/ createUseWriteContract({
  abi: ipChainVotePowerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useWriteIpChainVotePowerTotalVotePowerAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainVotePowerAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useWriteIpChainVotePowerVotePowerOfAtCached =
  /*#__PURE__*/ createUseWriteContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__
 */
export const useSimulateIpChainVotePower =
  /*#__PURE__*/ createUseSimulateContract({ abi: ipChainVotePowerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"totalVotePowerAtCached"`
 */
export const useSimulateIpChainVotePowerTotalVotePowerAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainVotePowerAbi,
    functionName: 'totalVotePowerAtCached',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `functionName` set to `"votePowerOfAtCached"`
 */
export const useSimulateIpChainVotePowerVotePowerOfAtCached =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ipChainVotePowerAbi,
    functionName: 'votePowerOfAtCached',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainVotePowerAbi}__
 */
export const useWatchIpChainVotePowerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: ipChainVotePowerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `eventName` set to `"VotePowerCacheCreated"`
 */
export const useWatchIpChainVotePowerVotePowerCacheCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainVotePowerAbi,
    eventName: 'VotePowerCacheCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ipChainVotePowerAbi}__ and `eventName` set to `"VotePowerChanged"`
 */
export const useWatchIpChainVotePowerVotePowerChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ipChainVotePowerAbi,
    eventName: 'VotePowerChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPaymentVerificationAbi}__
 */
export const useReadIPaymentVerification = /*#__PURE__*/ createUseReadContract({
  abi: iPaymentVerificationAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPaymentVerificationAbi}__ and `functionName` set to `"verifyPayment"`
 */
export const useReadIPaymentVerificationVerifyPayment =
  /*#__PURE__*/ createUseReadContract({
    abi: iPaymentVerificationAbi,
    functionName: 'verifyPayment',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__
 */
export const useReadIPollingFtso = /*#__PURE__*/ createUseReadContract({
  abi: iPollingFtsoAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"canPropose"`
 */
export const useReadIPollingFtsoCanPropose =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'canPropose',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"canVote"`
 */
export const useReadIPollingFtsoCanVote = /*#__PURE__*/ createUseReadContract({
  abi: iPollingFtsoAbi,
  functionName: 'canVote',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"getLastProposal"`
 */
export const useReadIPollingFtsoGetLastProposal =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'getLastProposal',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"getManagementGroupMembers"`
 */
export const useReadIPollingFtsoGetManagementGroupMembers =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'getManagementGroupMembers',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"getProposalDescription"`
 */
export const useReadIPollingFtsoGetProposalDescription =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'getProposalDescription',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"getProposalInfo"`
 */
export const useReadIPollingFtsoGetProposalInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'getProposalInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"getProposalVotes"`
 */
export const useReadIPollingFtsoGetProposalVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingFtsoAbi,
    functionName: 'getProposalVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"hasVoted"`
 */
export const useReadIPollingFtsoHasVoted = /*#__PURE__*/ createUseReadContract({
  abi: iPollingFtsoAbi,
  functionName: 'hasVoted',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"isMember"`
 */
export const useReadIPollingFtsoIsMember = /*#__PURE__*/ createUseReadContract({
  abi: iPollingFtsoAbi,
  functionName: 'isMember',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"state"`
 */
export const useReadIPollingFtsoState = /*#__PURE__*/ createUseReadContract({
  abi: iPollingFtsoAbi,
  functionName: 'state',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__
 */
export const useWriteIPollingFtso = /*#__PURE__*/ createUseWriteContract({
  abi: iPollingFtsoAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"addMember"`
 */
export const useWriteIPollingFtsoAddMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"cancel"`
 */
export const useWriteIPollingFtsoCancel = /*#__PURE__*/ createUseWriteContract({
  abi: iPollingFtsoAbi,
  functionName: 'cancel',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"castVote"`
 */
export const useWriteIPollingFtsoCastVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"changeManagementGroupMembers"`
 */
export const useWriteIPollingFtsoChangeManagementGroupMembers =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'changeManagementGroupMembers',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"propose"`
 */
export const useWriteIPollingFtsoPropose = /*#__PURE__*/ createUseWriteContract(
  { abi: iPollingFtsoAbi, functionName: 'propose' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"removeMember"`
 */
export const useWriteIPollingFtsoRemoveMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"setParameters"`
 */
export const useWriteIPollingFtsoSetParameters =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'setParameters',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useWriteIPollingFtsoSetProxyVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingFtsoAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__
 */
export const useSimulateIPollingFtso = /*#__PURE__*/ createUseSimulateContract({
  abi: iPollingFtsoAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"addMember"`
 */
export const useSimulateIPollingFtsoAddMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"cancel"`
 */
export const useSimulateIPollingFtsoCancel =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"castVote"`
 */
export const useSimulateIPollingFtsoCastVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"changeManagementGroupMembers"`
 */
export const useSimulateIPollingFtsoChangeManagementGroupMembers =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'changeManagementGroupMembers',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"propose"`
 */
export const useSimulateIPollingFtsoPropose =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"removeMember"`
 */
export const useSimulateIPollingFtsoRemoveMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"setParameters"`
 */
export const useSimulateIPollingFtsoSetParameters =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'setParameters',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useSimulateIPollingFtsoSetProxyVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingFtsoAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__
 */
export const useWatchIPollingFtsoEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iPollingFtsoAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"FtsoProposalCreated"`
 */
export const useWatchIPollingFtsoFtsoProposalCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'FtsoProposalCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"MaintainerSet"`
 */
export const useWatchIPollingFtsoMaintainerSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'MaintainerSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"ManagementGroupMemberAdded"`
 */
export const useWatchIPollingFtsoManagementGroupMemberAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'ManagementGroupMemberAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"ManagementGroupMemberRemoved"`
 */
export const useWatchIPollingFtsoManagementGroupMemberRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'ManagementGroupMemberRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"ParametersSet"`
 */
export const useWatchIPollingFtsoParametersSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'ParametersSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"ProposalCanceled"`
 */
export const useWatchIPollingFtsoProposalCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'ProposalCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"ProxyVoterSet"`
 */
export const useWatchIPollingFtsoProxyVoterSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'ProxyVoterSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingFtsoAbi}__ and `eventName` set to `"VoteCast"`
 */
export const useWatchIPollingFtsoVoteCastEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingFtsoAbi,
    eventName: 'VoteCast',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__
 */
export const useReadIPollingManagementGroup =
  /*#__PURE__*/ createUseReadContract({ abi: iPollingManagementGroupAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"canPropose"`
 */
export const useReadIPollingManagementGroupCanPropose =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'canPropose',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"canVote"`
 */
export const useReadIPollingManagementGroupCanVote =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'canVote',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"getLastProposal"`
 */
export const useReadIPollingManagementGroupGetLastProposal =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'getLastProposal',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"getProposalDescription"`
 */
export const useReadIPollingManagementGroupGetProposalDescription =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'getProposalDescription',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"getProposalInfo"`
 */
export const useReadIPollingManagementGroupGetProposalInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'getProposalInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"getProposalVotes"`
 */
export const useReadIPollingManagementGroupGetProposalVotes =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'getProposalVotes',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"hasVoted"`
 */
export const useReadIPollingManagementGroupHasVoted =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'hasVoted',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"isMember"`
 */
export const useReadIPollingManagementGroupIsMember =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'isMember',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"state"`
 */
export const useReadIPollingManagementGroupState =
  /*#__PURE__*/ createUseReadContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'state',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__
 */
export const useWriteIPollingManagementGroup =
  /*#__PURE__*/ createUseWriteContract({ abi: iPollingManagementGroupAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"addMember"`
 */
export const useWriteIPollingManagementGroupAddMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"cancel"`
 */
export const useWriteIPollingManagementGroupCancel =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"castVote"`
 */
export const useWriteIPollingManagementGroupCastVote =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"propose"`
 */
export const useWriteIPollingManagementGroupPropose =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"removeMember"`
 */
export const useWriteIPollingManagementGroupRemoveMember =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useWriteIPollingManagementGroupSetProxyVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__
 */
export const useSimulateIPollingManagementGroup =
  /*#__PURE__*/ createUseSimulateContract({ abi: iPollingManagementGroupAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"addMember"`
 */
export const useSimulateIPollingManagementGroupAddMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'addMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"cancel"`
 */
export const useSimulateIPollingManagementGroupCancel =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'cancel',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"castVote"`
 */
export const useSimulateIPollingManagementGroupCastVote =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'castVote',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"propose"`
 */
export const useSimulateIPollingManagementGroupPropose =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'propose',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"removeMember"`
 */
export const useSimulateIPollingManagementGroupRemoveMember =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'removeMember',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `functionName` set to `"setProxyVoter"`
 */
export const useSimulateIPollingManagementGroupSetProxyVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPollingManagementGroupAbi,
    functionName: 'setProxyVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__
 */
export const useWatchIPollingManagementGroupEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iPollingManagementGroupAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"MaintainerSet"`
 */
export const useWatchIPollingManagementGroupMaintainerSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'MaintainerSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupMemberAdded"`
 */
export const useWatchIPollingManagementGroupManagementGroupMemberAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ManagementGroupMemberAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupMemberRemoved"`
 */
export const useWatchIPollingManagementGroupManagementGroupMemberRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ManagementGroupMemberRemoved',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ManagementGroupProposalCreated"`
 */
export const useWatchIPollingManagementGroupManagementGroupProposalCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ManagementGroupProposalCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ParametersSet"`
 */
export const useWatchIPollingManagementGroupParametersSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ParametersSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ProposalCanceled"`
 */
export const useWatchIPollingManagementGroupProposalCanceledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ProposalCanceled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"ProxyVoterSet"`
 */
export const useWatchIPollingManagementGroupProxyVoterSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'ProxyVoterSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPollingManagementGroupAbi}__ and `eventName` set to `"VoteCast"`
 */
export const useWatchIPollingManagementGroupVoteCastEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPollingManagementGroupAbi,
    eventName: 'VoteCast',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__
 */
export const useReadIPriceSubmitter = /*#__PURE__*/ createUseReadContract({
  abi: iPriceSubmitterAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadIPriceSubmitterGetCurrentRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'getCurrentRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"getFtsoManager"`
 */
export const useReadIPriceSubmitterGetFtsoManager =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'getFtsoManager',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"getFtsoRegistry"`
 */
export const useReadIPriceSubmitterGetFtsoRegistry =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'getFtsoRegistry',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"getRandom"`
 */
export const useReadIPriceSubmitterGetRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'getRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"getVoterWhitelister"`
 */
export const useReadIPriceSubmitterGetVoterWhitelister =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'getVoterWhitelister',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"voterWhitelistBitmap"`
 */
export const useReadIPriceSubmitterVoterWhitelistBitmap =
  /*#__PURE__*/ createUseReadContract({
    abi: iPriceSubmitterAbi,
    functionName: 'voterWhitelistBitmap',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__
 */
export const useWriteIPriceSubmitter = /*#__PURE__*/ createUseWriteContract({
  abi: iPriceSubmitterAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"revealPrices"`
 */
export const useWriteIPriceSubmitterRevealPrices =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPriceSubmitterAbi,
    functionName: 'revealPrices',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"submitHash"`
 */
export const useWriteIPriceSubmitterSubmitHash =
  /*#__PURE__*/ createUseWriteContract({
    abi: iPriceSubmitterAbi,
    functionName: 'submitHash',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__
 */
export const useSimulateIPriceSubmitter =
  /*#__PURE__*/ createUseSimulateContract({ abi: iPriceSubmitterAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"revealPrices"`
 */
export const useSimulateIPriceSubmitterRevealPrices =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPriceSubmitterAbi,
    functionName: 'revealPrices',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `functionName` set to `"submitHash"`
 */
export const useSimulateIPriceSubmitterSubmitHash =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iPriceSubmitterAbi,
    functionName: 'submitHash',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPriceSubmitterAbi}__
 */
export const useWatchIPriceSubmitterEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iPriceSubmitterAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `eventName` set to `"HashSubmitted"`
 */
export const useWatchIPriceSubmitterHashSubmittedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPriceSubmitterAbi,
    eventName: 'HashSubmitted',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iPriceSubmitterAbi}__ and `eventName` set to `"PricesRevealed"`
 */
export const useWatchIPriceSubmitterPricesRevealedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iPriceSubmitterAbi,
    eventName: 'PricesRevealed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__
 */
export const useReadIrNat = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"allowance"`
 */
export const useReadIrNatAllowance = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'allowance',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIrNatBalanceOf = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'balanceOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"decimals"`
 */
export const useReadIrNatDecimals = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'decimals',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"firstMonthStartTs"`
 */
export const useReadIrNatFirstMonthStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAbi,
    functionName: 'firstMonthStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getBalancesOf"`
 */
export const useReadIrNatGetBalancesOf = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'getBalancesOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getClaimableRewards"`
 */
export const useReadIrNatGetClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAbi,
    functionName: 'getClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getCurrentMonth"`
 */
export const useReadIrNatGetCurrentMonth = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'getCurrentMonth',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getOwnerRewardsInfo"`
 */
export const useReadIrNatGetOwnerRewardsInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAbi,
    functionName: 'getOwnerRewardsInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getProjectInfo"`
 */
export const useReadIrNatGetProjectInfo = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'getProjectInfo',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getProjectRewardsInfo"`
 */
export const useReadIrNatGetProjectRewardsInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAbi,
    functionName: 'getProjectRewardsInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getProjectsBasicInfo"`
 */
export const useReadIrNatGetProjectsBasicInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAbi,
    functionName: 'getProjectsBasicInfo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getProjectsCount"`
 */
export const useReadIrNatGetProjectsCount = /*#__PURE__*/ createUseReadContract(
  { abi: irNatAbi, functionName: 'getProjectsCount' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getRNatAccount"`
 */
export const useReadIrNatGetRNatAccount = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'getRNatAccount',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"getRewardsInfo"`
 */
export const useReadIrNatGetRewardsInfo = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'getRewardsInfo',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"name"`
 */
export const useReadIrNatName = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'name',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIrNatSymbol = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIrNatTotalSupply = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'totalSupply',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"wNat"`
 */
export const useReadIrNatWNat = /*#__PURE__*/ createUseReadContract({
  abi: irNatAbi,
  functionName: 'wNat',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__
 */
export const useWriteIrNat = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"approve"`
 */
export const useWriteIrNatApprove = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'approve',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"claimRewards"`
 */
export const useWriteIrNatClaimRewards = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'claimRewards',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"distributeRewards"`
 */
export const useWriteIrNatDistributeRewards =
  /*#__PURE__*/ createUseWriteContract({
    abi: irNatAbi,
    functionName: 'distributeRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useWriteIrNatSetClaimExecutors =
  /*#__PURE__*/ createUseWriteContract({
    abi: irNatAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transfer"`
 */
export const useWriteIrNatTransfer = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'transfer',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useWriteIrNatTransferExternalToken =
  /*#__PURE__*/ createUseWriteContract({
    abi: irNatAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useWriteIrNatTransferFrom = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'transferFrom',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIrNatWithdraw = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'withdraw',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useWriteIrNatWithdrawAll = /*#__PURE__*/ createUseWriteContract({
  abi: irNatAbi,
  functionName: 'withdrawAll',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__
 */
export const useSimulateIrNat = /*#__PURE__*/ createUseSimulateContract({
  abi: irNatAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"approve"`
 */
export const useSimulateIrNatApprove = /*#__PURE__*/ createUseSimulateContract({
  abi: irNatAbi,
  functionName: 'approve',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"claimRewards"`
 */
export const useSimulateIrNatClaimRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'claimRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"distributeRewards"`
 */
export const useSimulateIrNatDistributeRewards =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'distributeRewards',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"setClaimExecutors"`
 */
export const useSimulateIrNatSetClaimExecutors =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'setClaimExecutors',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transfer"`
 */
export const useSimulateIrNatTransfer = /*#__PURE__*/ createUseSimulateContract(
  { abi: irNatAbi, functionName: 'transfer' },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transferExternalToken"`
 */
export const useSimulateIrNatTransferExternalToken =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'transferExternalToken',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useSimulateIrNatTransferFrom =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIrNatWithdraw = /*#__PURE__*/ createUseSimulateContract(
  { abi: irNatAbi, functionName: 'withdraw' },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link irNatAbi}__ and `functionName` set to `"withdrawAll"`
 */
export const useSimulateIrNatWithdrawAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: irNatAbi,
    functionName: 'withdrawAll',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__
 */
export const useWatchIrNatEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: irNatAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"Approval"`
 */
export const useWatchIrNatApprovalEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'Approval',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"ClaimingPermissionUpdated"`
 */
export const useWatchIrNatClaimingPermissionUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'ClaimingPermissionUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"DistributionPermissionUpdated"`
 */
export const useWatchIrNatDistributionPermissionUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'DistributionPermissionUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"ProjectAdded"`
 */
export const useWatchIrNatProjectAddedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'ProjectAdded',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"ProjectUpdated"`
 */
export const useWatchIrNatProjectUpdatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'ProjectUpdated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"RNatAccountCreated"`
 */
export const useWatchIrNatRNatAccountCreatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'RNatAccountCreated',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"RewardsAssigned"`
 */
export const useWatchIrNatRewardsAssignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'RewardsAssigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"RewardsClaimed"`
 */
export const useWatchIrNatRewardsClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'RewardsClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"RewardsDistributed"`
 */
export const useWatchIrNatRewardsDistributedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'RewardsDistributed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"RewardsUnassigned"`
 */
export const useWatchIrNatRewardsUnassignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'RewardsUnassigned',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"Transfer"`
 */
export const useWatchIrNatTransferEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'Transfer',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"UnassignedRewardsWithdrawn"`
 */
export const useWatchIrNatUnassignedRewardsWithdrawnEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'UnassignedRewardsWithdrawn',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAbi}__ and `eventName` set to `"UnclaimedRewardsUnassigned"`
 */
export const useWatchIrNatUnclaimedRewardsUnassignedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAbi,
    eventName: 'UnclaimedRewardsUnassigned',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAccountAbi}__
 */
export const useReadIrNatAccount = /*#__PURE__*/ createUseReadContract({
  abi: irNatAccountAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAccountAbi}__ and `functionName` set to `"owner"`
 */
export const useReadIrNatAccountOwner = /*#__PURE__*/ createUseReadContract({
  abi: irNatAccountAbi,
  functionName: 'owner',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAccountAbi}__ and `functionName` set to `"rNat"`
 */
export const useReadIrNatAccountRNat = /*#__PURE__*/ createUseReadContract({
  abi: irNatAccountAbi,
  functionName: 'rNat',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAccountAbi}__ and `functionName` set to `"receivedRewards"`
 */
export const useReadIrNatAccountReceivedRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAccountAbi,
    functionName: 'receivedRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link irNatAccountAbi}__ and `functionName` set to `"withdrawnRewards"`
 */
export const useReadIrNatAccountWithdrawnRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: irNatAccountAbi,
    functionName: 'withdrawnRewards',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__
 */
export const useWatchIrNatAccountEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: irNatAccountAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__ and `eventName` set to `"ClaimExecutorsSet"`
 */
export const useWatchIrNatAccountClaimExecutorsSetEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAccountAbi,
    eventName: 'ClaimExecutorsSet',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__ and `eventName` set to `"ExternalTokenTransferred"`
 */
export const useWatchIrNatAccountExternalTokenTransferredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAccountAbi,
    eventName: 'ExternalTokenTransferred',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__ and `eventName` set to `"FundsWithdrawn"`
 */
export const useWatchIrNatAccountFundsWithdrawnEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAccountAbi,
    eventName: 'FundsWithdrawn',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__ and `eventName` set to `"Initialized"`
 */
export const useWatchIrNatAccountInitializedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAccountAbi,
    eventName: 'Initialized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link irNatAccountAbi}__ and `eventName` set to `"LockedAmountBurned"`
 */
export const useWatchIrNatAccountLockedAmountBurnedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: irNatAccountAbi,
    eventName: 'LockedAmountBurned',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRandomProviderAbi}__
 */
export const useReadIRandomProvider = /*#__PURE__*/ createUseReadContract({
  abi: iRandomProviderAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRandomProviderAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadIRandomProviderGetCurrentRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iRandomProviderAbi,
    functionName: 'getCurrentRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRandomProviderAbi}__ and `functionName` set to `"getCurrentRandomWithQuality"`
 */
export const useReadIRandomProviderGetCurrentRandomWithQuality =
  /*#__PURE__*/ createUseReadContract({
    abi: iRandomProviderAbi,
    functionName: 'getCurrentRandomWithQuality',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRandomProviderAbi}__ and `functionName` set to `"getCurrentRandomWithQualityAndTimestamp"`
 */
export const useReadIRandomProviderGetCurrentRandomWithQualityAndTimestamp =
  /*#__PURE__*/ createUseReadContract({
    abi: iRandomProviderAbi,
    functionName: 'getCurrentRandomWithQualityAndTimestamp',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__
 */
export const useReadIRedemptionTimeExtension =
  /*#__PURE__*/ createUseReadContract({ abi: iRedemptionTimeExtensionAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__ and `functionName` set to `"redemptionPaymentExtensionSeconds"`
 */
export const useReadIRedemptionTimeExtensionRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: iRedemptionTimeExtensionAbi,
    functionName: 'redemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__
 */
export const useWriteIRedemptionTimeExtension =
  /*#__PURE__*/ createUseWriteContract({ abi: iRedemptionTimeExtensionAbi })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__ and `functionName` set to `"setRedemptionPaymentExtensionSeconds"`
 */
export const useWriteIRedemptionTimeExtensionSetRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseWriteContract({
    abi: iRedemptionTimeExtensionAbi,
    functionName: 'setRedemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__
 */
export const useSimulateIRedemptionTimeExtension =
  /*#__PURE__*/ createUseSimulateContract({ abi: iRedemptionTimeExtensionAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRedemptionTimeExtensionAbi}__ and `functionName` set to `"setRedemptionPaymentExtensionSeconds"`
 */
export const useSimulateIRedemptionTimeExtensionSetRedemptionPaymentExtensionSeconds =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRedemptionTimeExtensionAbi,
    functionName: 'setRedemptionPaymentExtensionSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iReferencedPaymentNonexistenceVerificationAbi}__
 */
export const useReadIReferencedPaymentNonexistenceVerification =
  /*#__PURE__*/ createUseReadContract({
    abi: iReferencedPaymentNonexistenceVerificationAbi,
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iReferencedPaymentNonexistenceVerificationAbi}__ and `functionName` set to `"verifyReferencedPaymentNonexistence"`
 */
export const useReadIReferencedPaymentNonexistenceVerificationVerifyReferencedPaymentNonexistence =
  /*#__PURE__*/ createUseReadContract({
    abi: iReferencedPaymentNonexistenceVerificationAbi,
    functionName: 'verifyReferencedPaymentNonexistence',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__
 */
export const useReadIRelay = /*#__PURE__*/ createUseReadContract({
  abi: iRelayAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"feeCollectionAddress"`
 */
export const useReadIRelayFeeCollectionAddress =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'feeCollectionAddress',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"getRandomNumber"`
 */
export const useReadIRelayGetRandomNumber = /*#__PURE__*/ createUseReadContract(
  { abi: iRelayAbi, functionName: 'getRandomNumber' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"getRandomNumberHistorical"`
 */
export const useReadIRelayGetRandomNumberHistorical =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'getRandomNumberHistorical',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"getVotingRoundId"`
 */
export const useReadIRelayGetVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'getVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"isFinalized"`
 */
export const useReadIRelayIsFinalized = /*#__PURE__*/ createUseReadContract({
  abi: iRelayAbi,
  functionName: 'isFinalized',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"lastInitializedRewardEpochData"`
 */
export const useReadIRelayLastInitializedRewardEpochData =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'lastInitializedRewardEpochData',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"merkleRoots"`
 */
export const useReadIRelayMerkleRoots = /*#__PURE__*/ createUseReadContract({
  abi: iRelayAbi,
  functionName: 'merkleRoots',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"protocolFeeInWei"`
 */
export const useReadIRelayProtocolFeeInWei =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'protocolFeeInWei',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"startingVotingRoundIds"`
 */
export const useReadIRelayStartingVotingRoundIds =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'startingVotingRoundIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"toSigningPolicyHash"`
 */
export const useReadIRelayToSigningPolicyHash =
  /*#__PURE__*/ createUseReadContract({
    abi: iRelayAbi,
    functionName: 'toSigningPolicyHash',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRelayAbi}__
 */
export const useWriteIRelay = /*#__PURE__*/ createUseWriteContract({
  abi: iRelayAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"governanceFeeSetup"`
 */
export const useWriteIRelayGovernanceFeeSetup =
  /*#__PURE__*/ createUseWriteContract({
    abi: iRelayAbi,
    functionName: 'governanceFeeSetup',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"relay"`
 */
export const useWriteIRelayRelay = /*#__PURE__*/ createUseWriteContract({
  abi: iRelayAbi,
  functionName: 'relay',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"verify"`
 */
export const useWriteIRelayVerify = /*#__PURE__*/ createUseWriteContract({
  abi: iRelayAbi,
  functionName: 'verify',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"verifyCustomSignature"`
 */
export const useWriteIRelayVerifyCustomSignature =
  /*#__PURE__*/ createUseWriteContract({
    abi: iRelayAbi,
    functionName: 'verifyCustomSignature',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRelayAbi}__
 */
export const useSimulateIRelay = /*#__PURE__*/ createUseSimulateContract({
  abi: iRelayAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"governanceFeeSetup"`
 */
export const useSimulateIRelayGovernanceFeeSetup =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRelayAbi,
    functionName: 'governanceFeeSetup',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"relay"`
 */
export const useSimulateIRelayRelay = /*#__PURE__*/ createUseSimulateContract({
  abi: iRelayAbi,
  functionName: 'relay',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"verify"`
 */
export const useSimulateIRelayVerify = /*#__PURE__*/ createUseSimulateContract({
  abi: iRelayAbi,
  functionName: 'verify',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRelayAbi}__ and `functionName` set to `"verifyCustomSignature"`
 */
export const useSimulateIRelayVerifyCustomSignature =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRelayAbi,
    functionName: 'verifyCustomSignature',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRelayAbi}__
 */
export const useWatchIRelayEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: iRelayAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRelayAbi}__ and `eventName` set to `"ProtocolMessageRelayed"`
 */
export const useWatchIRelayProtocolMessageRelayedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRelayAbi,
    eventName: 'ProtocolMessageRelayed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRelayAbi}__ and `eventName` set to `"SigningPolicyInitialized"`
 */
export const useWatchIRelaySigningPolicyInitializedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRelayAbi,
    eventName: 'SigningPolicyInitialized',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRelayAbi}__ and `eventName` set to `"SigningPolicyRelayed"`
 */
export const useWatchIRelaySigningPolicyRelayedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRelayAbi,
    eventName: 'SigningPolicyRelayed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__
 */
export const useReadIRewardManager = /*#__PURE__*/ createUseReadContract({
  abi: iRewardManagerAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"active"`
 */
export const useReadIRewardManagerActive = /*#__PURE__*/ createUseReadContract({
  abi: iRewardManagerAbi,
  functionName: 'active',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"cleanupBlockNumber"`
 */
export const useReadIRewardManagerCleanupBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'cleanupBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"firstClaimableRewardEpochId"`
 */
export const useReadIRewardManagerFirstClaimableRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'firstClaimableRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getCurrentRewardEpochId"`
 */
export const useReadIRewardManagerGetCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getCurrentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getInitialRewardEpochId"`
 */
export const useReadIRewardManagerGetInitialRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getInitialRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getNextClaimableRewardEpochId"`
 */
export const useReadIRewardManagerGetNextClaimableRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getNextClaimableRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getRewardEpochIdToExpireNext"`
 */
export const useReadIRewardManagerGetRewardEpochIdToExpireNext =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getRewardEpochIdToExpireNext',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getRewardEpochIdsWithClaimableRewards"`
 */
export const useReadIRewardManagerGetRewardEpochIdsWithClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getRewardEpochIdsWithClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getRewardEpochTotals"`
 */
export const useReadIRewardManagerGetRewardEpochTotals =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getRewardEpochTotals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getStateOfRewards"`
 */
export const useReadIRewardManagerGetStateOfRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getStateOfRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getStateOfRewardsAt"`
 */
export const useReadIRewardManagerGetStateOfRewardsAt =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getStateOfRewardsAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getTotals"`
 */
export const useReadIRewardManagerGetTotals =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getTotals',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"getUnclaimedRewardState"`
 */
export const useReadIRewardManagerGetUnclaimedRewardState =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'getUnclaimedRewardState',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"noOfInitialisedWeightBasedClaims"`
 */
export const useReadIRewardManagerNoOfInitialisedWeightBasedClaims =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'noOfInitialisedWeightBasedClaims',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"rewardManagerId"`
 */
export const useReadIRewardManagerRewardManagerId =
  /*#__PURE__*/ createUseReadContract({
    abi: iRewardManagerAbi,
    functionName: 'rewardManagerId',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRewardManagerAbi}__
 */
export const useWriteIRewardManager = /*#__PURE__*/ createUseWriteContract({
  abi: iRewardManagerAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useWriteIRewardManagerAutoClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: iRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteIRewardManagerClaim = /*#__PURE__*/ createUseWriteContract(
  { abi: iRewardManagerAbi, functionName: 'claim' },
)

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"initialiseWeightBasedClaims"`
 */
export const useWriteIRewardManagerInitialiseWeightBasedClaims =
  /*#__PURE__*/ createUseWriteContract({
    abi: iRewardManagerAbi,
    functionName: 'initialiseWeightBasedClaims',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRewardManagerAbi}__
 */
export const useSimulateIRewardManager =
  /*#__PURE__*/ createUseSimulateContract({ abi: iRewardManagerAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"autoClaim"`
 */
export const useSimulateIRewardManagerAutoClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRewardManagerAbi,
    functionName: 'autoClaim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateIRewardManagerClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRewardManagerAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iRewardManagerAbi}__ and `functionName` set to `"initialiseWeightBasedClaims"`
 */
export const useSimulateIRewardManagerInitialiseWeightBasedClaims =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iRewardManagerAbi,
    functionName: 'initialiseWeightBasedClaims',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRewardManagerAbi}__
 */
export const useWatchIRewardManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iRewardManagerAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRewardManagerAbi}__ and `eventName` set to `"RewardClaimed"`
 */
export const useWatchIRewardManagerRewardClaimedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRewardManagerAbi,
    eventName: 'RewardClaimed',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRewardManagerAbi}__ and `eventName` set to `"RewardClaimsEnabled"`
 */
export const useWatchIRewardManagerRewardClaimsEnabledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRewardManagerAbi,
    eventName: 'RewardClaimsEnabled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iRewardManagerAbi}__ and `eventName` set to `"RewardClaimsExpired"`
 */
export const useWatchIRewardManagerRewardClaimsExpiredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iRewardManagerAbi,
    eventName: 'RewardClaimsExpired',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iSubmissionAbi}__
 */
export const useReadISubmission = /*#__PURE__*/ createUseReadContract({
  abi: iSubmissionAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"getCurrentRandom"`
 */
export const useReadISubmissionGetCurrentRandom =
  /*#__PURE__*/ createUseReadContract({
    abi: iSubmissionAbi,
    functionName: 'getCurrentRandom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"getCurrentRandomWithQuality"`
 */
export const useReadISubmissionGetCurrentRandomWithQuality =
  /*#__PURE__*/ createUseReadContract({
    abi: iSubmissionAbi,
    functionName: 'getCurrentRandomWithQuality',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"getCurrentRandomWithQualityAndTimestamp"`
 */
export const useReadISubmissionGetCurrentRandomWithQualityAndTimestamp =
  /*#__PURE__*/ createUseReadContract({
    abi: iSubmissionAbi,
    functionName: 'getCurrentRandomWithQualityAndTimestamp',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__
 */
export const useWriteISubmission = /*#__PURE__*/ createUseWriteContract({
  abi: iSubmissionAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit1"`
 */
export const useWriteISubmissionSubmit1 = /*#__PURE__*/ createUseWriteContract({
  abi: iSubmissionAbi,
  functionName: 'submit1',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit2"`
 */
export const useWriteISubmissionSubmit2 = /*#__PURE__*/ createUseWriteContract({
  abi: iSubmissionAbi,
  functionName: 'submit2',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit3"`
 */
export const useWriteISubmissionSubmit3 = /*#__PURE__*/ createUseWriteContract({
  abi: iSubmissionAbi,
  functionName: 'submit3',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submitAndPass"`
 */
export const useWriteISubmissionSubmitAndPass =
  /*#__PURE__*/ createUseWriteContract({
    abi: iSubmissionAbi,
    functionName: 'submitAndPass',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submitSignatures"`
 */
export const useWriteISubmissionSubmitSignatures =
  /*#__PURE__*/ createUseWriteContract({
    abi: iSubmissionAbi,
    functionName: 'submitSignatures',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__
 */
export const useSimulateISubmission = /*#__PURE__*/ createUseSimulateContract({
  abi: iSubmissionAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit1"`
 */
export const useSimulateISubmissionSubmit1 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iSubmissionAbi,
    functionName: 'submit1',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit2"`
 */
export const useSimulateISubmissionSubmit2 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iSubmissionAbi,
    functionName: 'submit2',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submit3"`
 */
export const useSimulateISubmissionSubmit3 =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iSubmissionAbi,
    functionName: 'submit3',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submitAndPass"`
 */
export const useSimulateISubmissionSubmitAndPass =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iSubmissionAbi,
    functionName: 'submitAndPass',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iSubmissionAbi}__ and `functionName` set to `"submitSignatures"`
 */
export const useSimulateISubmissionSubmitSignatures =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iSubmissionAbi,
    functionName: 'submitSignatures',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iSubmissionAbi}__
 */
export const useWatchISubmissionEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iSubmissionAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iSubmissionAbi}__ and `eventName` set to `"NewVotingRoundInitiated"`
 */
export const useWatchISubmissionNewVotingRoundInitiatedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iSubmissionAbi,
    eventName: 'NewVotingRoundInitiated',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iTypeTemplateVerificationAbi}__
 */
export const useReadITypeTemplateVerification =
  /*#__PURE__*/ createUseReadContract({ abi: iTypeTemplateVerificationAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iTypeTemplateVerificationAbi}__ and `functionName` set to `"verifyTypeTemplate"`
 */
export const useReadITypeTemplateVerificationVerifyTypeTemplate =
  /*#__PURE__*/ createUseReadContract({
    abi: iTypeTemplateVerificationAbi,
    functionName: 'verifyTypeTemplate',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpContractEventsAbi}__
 */
export const useWatchIvpContractEventsEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: ivpContractEventsAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpContractEventsAbi}__ and `eventName` set to `"Delegate"`
 */
export const useWatchIvpContractEventsDelegateEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ivpContractEventsAbi,
    eventName: 'Delegate',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpContractEventsAbi}__ and `eventName` set to `"Revoke"`
 */
export const useWatchIvpContractEventsRevokeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ivpContractEventsAbi,
    eventName: 'Revoke',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__
 */
export const useReadIvpToken = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"allowance"`
 */
export const useReadIvpTokenAllowance = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'allowance',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"balanceOf"`
 */
export const useReadIvpTokenBalanceOf = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'balanceOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"balanceOfAt"`
 */
export const useReadIvpTokenBalanceOfAt = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'balanceOfAt',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"decimals"`
 */
export const useReadIvpTokenDecimals = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'decimals',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegatesOf"`
 */
export const useReadIvpTokenDelegatesOf = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'delegatesOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegatesOfAt"`
 */
export const useReadIvpTokenDelegatesOfAt = /*#__PURE__*/ createUseReadContract(
  { abi: ivpTokenAbi, functionName: 'delegatesOfAt' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegationModeOf"`
 */
export const useReadIvpTokenDelegationModeOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'delegationModeOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"governanceVotePower"`
 */
export const useReadIvpTokenGovernanceVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'governanceVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"name"`
 */
export const useReadIvpTokenName = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'name',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"readVotePowerContract"`
 */
export const useReadIvpTokenReadVotePowerContract =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'readVotePowerContract',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"symbol"`
 */
export const useReadIvpTokenSymbol = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'symbol',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"totalSupply"`
 */
export const useReadIvpTokenTotalSupply = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'totalSupply',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"totalSupplyAt"`
 */
export const useReadIvpTokenTotalSupplyAt = /*#__PURE__*/ createUseReadContract(
  { abi: ivpTokenAbi, functionName: 'totalSupplyAt' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"totalVotePower"`
 */
export const useReadIvpTokenTotalVotePower =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'totalVotePower',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"totalVotePowerAt"`
 */
export const useReadIvpTokenTotalVotePowerAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'totalVotePowerAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegatedVotePowerOf"`
 */
export const useReadIvpTokenUndelegatedVotePowerOf =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'undelegatedVotePowerOf',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegatedVotePowerOfAt"`
 */
export const useReadIvpTokenUndelegatedVotePowerOfAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'undelegatedVotePowerOfAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"votePowerFromTo"`
 */
export const useReadIvpTokenVotePowerFromTo =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'votePowerFromTo',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"votePowerFromToAt"`
 */
export const useReadIvpTokenVotePowerFromToAt =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'votePowerFromToAt',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"votePowerOf"`
 */
export const useReadIvpTokenVotePowerOf = /*#__PURE__*/ createUseReadContract({
  abi: ivpTokenAbi,
  functionName: 'votePowerOf',
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"votePowerOfAt"`
 */
export const useReadIvpTokenVotePowerOfAt = /*#__PURE__*/ createUseReadContract(
  { abi: ivpTokenAbi, functionName: 'votePowerOfAt' },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"votePowerOfAtIgnoringRevocation"`
 */
export const useReadIvpTokenVotePowerOfAtIgnoringRevocation =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'votePowerOfAtIgnoringRevocation',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"writeVotePowerContract"`
 */
export const useReadIvpTokenWriteVotePowerContract =
  /*#__PURE__*/ createUseReadContract({
    abi: ivpTokenAbi,
    functionName: 'writeVotePowerContract',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__
 */
export const useWriteIvpToken = /*#__PURE__*/ createUseWriteContract({
  abi: ivpTokenAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"approve"`
 */
export const useWriteIvpTokenApprove = /*#__PURE__*/ createUseWriteContract({
  abi: ivpTokenAbi,
  functionName: 'approve',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useWriteIvpTokenBatchDelegate =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegate"`
 */
export const useWriteIvpTokenDelegate = /*#__PURE__*/ createUseWriteContract({
  abi: ivpTokenAbi,
  functionName: 'delegate',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useWriteIvpTokenDelegateExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useWriteIvpTokenRevokeDelegationAt =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"transfer"`
 */
export const useWriteIvpTokenTransfer = /*#__PURE__*/ createUseWriteContract({
  abi: ivpTokenAbi,
  functionName: 'transfer',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useWriteIvpTokenTransferFrom =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useWriteIvpTokenUndelegateAll =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useWriteIvpTokenUndelegateAllExplicit =
  /*#__PURE__*/ createUseWriteContract({
    abi: ivpTokenAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__
 */
export const useSimulateIvpToken = /*#__PURE__*/ createUseSimulateContract({
  abi: ivpTokenAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"approve"`
 */
export const useSimulateIvpTokenApprove =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'approve',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"batchDelegate"`
 */
export const useSimulateIvpTokenBatchDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'batchDelegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegate"`
 */
export const useSimulateIvpTokenDelegate =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'delegate',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"delegateExplicit"`
 */
export const useSimulateIvpTokenDelegateExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'delegateExplicit',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"revokeDelegationAt"`
 */
export const useSimulateIvpTokenRevokeDelegationAt =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'revokeDelegationAt',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"transfer"`
 */
export const useSimulateIvpTokenTransfer =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'transfer',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"transferFrom"`
 */
export const useSimulateIvpTokenTransferFrom =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'transferFrom',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegateAll"`
 */
export const useSimulateIvpTokenUndelegateAll =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'undelegateAll',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link ivpTokenAbi}__ and `functionName` set to `"undelegateAllExplicit"`
 */
export const useSimulateIvpTokenUndelegateAllExplicit =
  /*#__PURE__*/ createUseSimulateContract({
    abi: ivpTokenAbi,
    functionName: 'undelegateAllExplicit',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpTokenAbi}__
 */
export const useWatchIvpTokenEvent = /*#__PURE__*/ createUseWatchContractEvent({
  abi: ivpTokenAbi,
})

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpTokenAbi}__ and `eventName` set to `"Approval"`
 */
export const useWatchIvpTokenApprovalEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ivpTokenAbi,
    eventName: 'Approval',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link ivpTokenAbi}__ and `eventName` set to `"Transfer"`
 */
export const useWatchIvpTokenTransferEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: ivpTokenAbi,
    eventName: 'Transfer',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__
 */
export const useReadIValidatorRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iValidatorRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"getDataProviderForNodeId"`
 */
export const useReadIValidatorRegistryGetDataProviderForNodeId =
  /*#__PURE__*/ createUseReadContract({
    abi: iValidatorRegistryAbi,
    functionName: 'getDataProviderForNodeId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"getDataProviderForPChainPublicKey"`
 */
export const useReadIValidatorRegistryGetDataProviderForPChainPublicKey =
  /*#__PURE__*/ createUseReadContract({
    abi: iValidatorRegistryAbi,
    functionName: 'getDataProviderForPChainPublicKey',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"getDataProviderInfo"`
 */
export const useReadIValidatorRegistryGetDataProviderInfo =
  /*#__PURE__*/ createUseReadContract({
    abi: iValidatorRegistryAbi,
    functionName: 'getDataProviderInfo',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__
 */
export const useWriteIValidatorRegistry = /*#__PURE__*/ createUseWriteContract({
  abi: iValidatorRegistryAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"registerDataProvider"`
 */
export const useWriteIValidatorRegistryRegisterDataProvider =
  /*#__PURE__*/ createUseWriteContract({
    abi: iValidatorRegistryAbi,
    functionName: 'registerDataProvider',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"unregisterDataProvider"`
 */
export const useWriteIValidatorRegistryUnregisterDataProvider =
  /*#__PURE__*/ createUseWriteContract({
    abi: iValidatorRegistryAbi,
    functionName: 'unregisterDataProvider',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__
 */
export const useSimulateIValidatorRegistry =
  /*#__PURE__*/ createUseSimulateContract({ abi: iValidatorRegistryAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"registerDataProvider"`
 */
export const useSimulateIValidatorRegistryRegisterDataProvider =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iValidatorRegistryAbi,
    functionName: 'registerDataProvider',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `functionName` set to `"unregisterDataProvider"`
 */
export const useSimulateIValidatorRegistryUnregisterDataProvider =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iValidatorRegistryAbi,
    functionName: 'unregisterDataProvider',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iValidatorRegistryAbi}__
 */
export const useWatchIValidatorRegistryEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iValidatorRegistryAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `eventName` set to `"DataProviderRegistered"`
 */
export const useWatchIValidatorRegistryDataProviderRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iValidatorRegistryAbi,
    eventName: 'DataProviderRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iValidatorRegistryAbi}__ and `eventName` set to `"DataProviderUnregistered"`
 */
export const useWatchIValidatorRegistryDataProviderUnregisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iValidatorRegistryAbi,
    eventName: 'DataProviderUnregistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iValidatorRewardOffersManagerAbi}__
 */
export const useWatchIValidatorRewardOffersManagerEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iValidatorRewardOffersManagerAbi,
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iValidatorRewardOffersManagerAbi}__ and `eventName` set to `"InflationRewardsOffered"`
 */
export const useWatchIValidatorRewardOffersManagerInflationRewardsOfferedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iValidatorRewardOffersManagerAbi,
    eventName: 'InflationRewardsOffered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__
 */
export const useReadIVoterPreRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iVoterPreRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `functionName` set to `"getPreRegisteredVoters"`
 */
export const useReadIVoterPreRegistryGetPreRegisteredVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterPreRegistryAbi,
    functionName: 'getPreRegisteredVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `functionName` set to `"isVoterPreRegistered"`
 */
export const useReadIVoterPreRegistryIsVoterPreRegistered =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterPreRegistryAbi,
    functionName: 'isVoterPreRegistered',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__
 */
export const useWriteIVoterPreRegistry = /*#__PURE__*/ createUseWriteContract({
  abi: iVoterPreRegistryAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `functionName` set to `"preRegisterVoter"`
 */
export const useWriteIVoterPreRegistryPreRegisterVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iVoterPreRegistryAbi,
    functionName: 'preRegisterVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__
 */
export const useSimulateIVoterPreRegistry =
  /*#__PURE__*/ createUseSimulateContract({ abi: iVoterPreRegistryAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `functionName` set to `"preRegisterVoter"`
 */
export const useSimulateIVoterPreRegistryPreRegisterVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iVoterPreRegistryAbi,
    functionName: 'preRegisterVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterPreRegistryAbi}__
 */
export const useWatchIVoterPreRegistryEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iVoterPreRegistryAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `eventName` set to `"VoterPreRegistered"`
 */
export const useWatchIVoterPreRegistryVoterPreRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterPreRegistryAbi,
    eventName: 'VoterPreRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterPreRegistryAbi}__ and `eventName` set to `"VoterRegistrationFailed"`
 */
export const useWatchIVoterPreRegistryVoterRegistrationFailedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterPreRegistryAbi,
    eventName: 'VoterRegistrationFailed',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__
 */
export const useReadIVoterRegistry = /*#__PURE__*/ createUseReadContract({
  abi: iVoterRegistryAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"chilledUntilRewardEpochId"`
 */
export const useReadIVoterRegistryChilledUntilRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'chilledUntilRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"getNumberOfRegisteredVoters"`
 */
export const useReadIVoterRegistryGetNumberOfRegisteredVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'getNumberOfRegisteredVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"getRegisteredVoters"`
 */
export const useReadIVoterRegistryGetRegisteredVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'getRegisteredVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"isVoterRegistered"`
 */
export const useReadIVoterRegistryIsVoterRegistered =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'isVoterRegistered',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"maxVoters"`
 */
export const useReadIVoterRegistryMaxVoters =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'maxVoters',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"newSigningPolicyInitializationStartBlockNumber"`
 */
export const useReadIVoterRegistryNewSigningPolicyInitializationStartBlockNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'newSigningPolicyInitializationStartBlockNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"publicKeyRequired"`
 */
export const useReadIVoterRegistryPublicKeyRequired =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterRegistryAbi,
    functionName: 'publicKeyRequired',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterRegistryAbi}__
 */
export const useWriteIVoterRegistry = /*#__PURE__*/ createUseWriteContract({
  abi: iVoterRegistryAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"registerVoter"`
 */
export const useWriteIVoterRegistryRegisterVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iVoterRegistryAbi,
    functionName: 'registerVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterRegistryAbi}__
 */
export const useSimulateIVoterRegistry =
  /*#__PURE__*/ createUseSimulateContract({ abi: iVoterRegistryAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `functionName` set to `"registerVoter"`
 */
export const useSimulateIVoterRegistryRegisterVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iVoterRegistryAbi,
    functionName: 'registerVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterRegistryAbi}__
 */
export const useWatchIVoterRegistryEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iVoterRegistryAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `eventName` set to `"BeneficiaryChilled"`
 */
export const useWatchIVoterRegistryBeneficiaryChilledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterRegistryAbi,
    eventName: 'BeneficiaryChilled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `eventName` set to `"VoterRegistered"`
 */
export const useWatchIVoterRegistryVoterRegisteredEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterRegistryAbi,
    eventName: 'VoterRegistered',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterRegistryAbi}__ and `eventName` set to `"VoterRemoved"`
 */
export const useWatchIVoterRegistryVoterRemovedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterRegistryAbi,
    eventName: 'VoterRemoved',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__
 */
export const useReadIVoterWhitelister = /*#__PURE__*/ createUseReadContract({
  abi: iVoterWhitelisterAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"chilledUntilRewardEpoch"`
 */
export const useReadIVoterWhitelisterChilledUntilRewardEpoch =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'chilledUntilRewardEpoch',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"defaultMaxVotersForFtso"`
 */
export const useReadIVoterWhitelisterDefaultMaxVotersForFtso =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'defaultMaxVotersForFtso',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"getFtsoWhitelistedPriceProviders"`
 */
export const useReadIVoterWhitelisterGetFtsoWhitelistedPriceProviders =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'getFtsoWhitelistedPriceProviders',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"getFtsoWhitelistedPriceProvidersBySymbol"`
 */
export const useReadIVoterWhitelisterGetFtsoWhitelistedPriceProvidersBySymbol =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'getFtsoWhitelistedPriceProvidersBySymbol',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"maxVotersForFtso"`
 */
export const useReadIVoterWhitelisterMaxVotersForFtso =
  /*#__PURE__*/ createUseReadContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'maxVotersForFtso',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__
 */
export const useWriteIVoterWhitelister = /*#__PURE__*/ createUseWriteContract({
  abi: iVoterWhitelisterAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"requestFullVoterWhitelisting"`
 */
export const useWriteIVoterWhitelisterRequestFullVoterWhitelisting =
  /*#__PURE__*/ createUseWriteContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'requestFullVoterWhitelisting',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"requestWhitelistingVoter"`
 */
export const useWriteIVoterWhitelisterRequestWhitelistingVoter =
  /*#__PURE__*/ createUseWriteContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'requestWhitelistingVoter',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__
 */
export const useSimulateIVoterWhitelister =
  /*#__PURE__*/ createUseSimulateContract({ abi: iVoterWhitelisterAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"requestFullVoterWhitelisting"`
 */
export const useSimulateIVoterWhitelisterRequestFullVoterWhitelisting =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'requestFullVoterWhitelisting',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `functionName` set to `"requestWhitelistingVoter"`
 */
export const useSimulateIVoterWhitelisterRequestWhitelistingVoter =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iVoterWhitelisterAbi,
    functionName: 'requestWhitelistingVoter',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterWhitelisterAbi}__
 */
export const useWatchIVoterWhitelisterEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iVoterWhitelisterAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `eventName` set to `"VoterChilled"`
 */
export const useWatchIVoterWhitelisterVoterChilledEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterWhitelisterAbi,
    eventName: 'VoterChilled',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `eventName` set to `"VoterRemovedFromWhitelist"`
 */
export const useWatchIVoterWhitelisterVoterRemovedFromWhitelistEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterWhitelisterAbi,
    eventName: 'VoterRemovedFromWhitelist',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iVoterWhitelisterAbi}__ and `eventName` set to `"VoterWhitelisted"`
 */
export const useWatchIVoterWhitelisterVoterWhitelistedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iVoterWhitelisterAbi,
    eventName: 'VoterWhitelisted',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatAbi}__
 */
export const useWriteIwNat = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"deposit"`
 */
export const useWriteIwNatDeposit = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatAbi,
  functionName: 'deposit',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"depositTo"`
 */
export const useWriteIwNatDepositTo = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatAbi,
  functionName: 'depositTo',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useWriteIwNatWithdraw = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatAbi,
  functionName: 'withdraw',
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"withdrawFrom"`
 */
export const useWriteIwNatWithdrawFrom = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatAbi,
  functionName: 'withdrawFrom',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatAbi}__
 */
export const useSimulateIwNat = /*#__PURE__*/ createUseSimulateContract({
  abi: iwNatAbi,
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"deposit"`
 */
export const useSimulateIwNatDeposit = /*#__PURE__*/ createUseSimulateContract({
  abi: iwNatAbi,
  functionName: 'deposit',
})

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"depositTo"`
 */
export const useSimulateIwNatDepositTo =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iwNatAbi,
    functionName: 'depositTo',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"withdraw"`
 */
export const useSimulateIwNatWithdraw = /*#__PURE__*/ createUseSimulateContract(
  { abi: iwNatAbi, functionName: 'withdraw' },
)

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatAbi}__ and `functionName` set to `"withdrawFrom"`
 */
export const useSimulateIwNatWithdrawFrom =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iwNatAbi,
    functionName: 'withdrawFrom',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__
 */
export const useReadIwNatDelegationFee = /*#__PURE__*/ createUseReadContract({
  abi: iwNatDelegationFeeAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"defaultFeePercentageBIPS"`
 */
export const useReadIwNatDelegationFeeDefaultFeePercentageBips =
  /*#__PURE__*/ createUseReadContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'defaultFeePercentageBIPS',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"feePercentageUpdateOffset"`
 */
export const useReadIwNatDelegationFeeFeePercentageUpdateOffset =
  /*#__PURE__*/ createUseReadContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'feePercentageUpdateOffset',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"getVoterCurrentFeePercentage"`
 */
export const useReadIwNatDelegationFeeGetVoterCurrentFeePercentage =
  /*#__PURE__*/ createUseReadContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'getVoterCurrentFeePercentage',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"getVoterFeePercentage"`
 */
export const useReadIwNatDelegationFeeGetVoterFeePercentage =
  /*#__PURE__*/ createUseReadContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'getVoterFeePercentage',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"getVoterScheduledFeePercentageChanges"`
 */
export const useReadIwNatDelegationFeeGetVoterScheduledFeePercentageChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'getVoterScheduledFeePercentageChanges',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__
 */
export const useWriteIwNatDelegationFee = /*#__PURE__*/ createUseWriteContract({
  abi: iwNatDelegationFeeAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"setVoterFeePercentage"`
 */
export const useWriteIwNatDelegationFeeSetVoterFeePercentage =
  /*#__PURE__*/ createUseWriteContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'setVoterFeePercentage',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__
 */
export const useSimulateIwNatDelegationFee =
  /*#__PURE__*/ createUseSimulateContract({ abi: iwNatDelegationFeeAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `functionName` set to `"setVoterFeePercentage"`
 */
export const useSimulateIwNatDelegationFeeSetVoterFeePercentage =
  /*#__PURE__*/ createUseSimulateContract({
    abi: iwNatDelegationFeeAbi,
    functionName: 'setVoterFeePercentage',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__
 */
export const useWatchIwNatDelegationFeeEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: iwNatDelegationFeeAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link iwNatDelegationFeeAbi}__ and `eventName` set to `"FeePercentageChanged"`
 */
export const useWatchIwNatDelegationFeeFeePercentageChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: iwNatDelegationFeeAbi,
    eventName: 'FeePercentageChanged',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iWeb2JsonVerificationAbi}__
 */
export const useReadIWeb2JsonVerification = /*#__PURE__*/ createUseReadContract(
  { abi: iWeb2JsonVerificationAbi },
)

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link iWeb2JsonVerificationAbi}__ and `functionName` set to `"verifyWeb2Json"`
 */
export const useReadIWeb2JsonVerificationVerifyWeb2Json =
  /*#__PURE__*/ createUseReadContract({
    abi: iWeb2JsonVerificationAbi,
    functionName: 'verifyWeb2Json',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__
 */
export const useReadProtocolsV2Interface = /*#__PURE__*/ createUseReadContract({
  abi: protocolsV2InterfaceAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"firstRewardEpochStartTs"`
 */
export const useReadProtocolsV2InterfaceFirstRewardEpochStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'firstRewardEpochStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"firstVotingRoundStartTs"`
 */
export const useReadProtocolsV2InterfaceFirstVotingRoundStartTs =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'firstVotingRoundStartTs',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"getCurrentRewardEpochId"`
 */
export const useReadProtocolsV2InterfaceGetCurrentRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'getCurrentRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"getCurrentVotingEpochId"`
 */
export const useReadProtocolsV2InterfaceGetCurrentVotingEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'getCurrentVotingEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"getStartVotingRoundId"`
 */
export const useReadProtocolsV2InterfaceGetStartVotingRoundId =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'getStartVotingRoundId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"getVotePowerBlock"`
 */
export const useReadProtocolsV2InterfaceGetVotePowerBlock =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'getVotePowerBlock',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"rewardEpochDurationSeconds"`
 */
export const useReadProtocolsV2InterfaceRewardEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'rewardEpochDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link protocolsV2InterfaceAbi}__ and `functionName` set to `"votingEpochDurationSeconds"`
 */
export const useReadProtocolsV2InterfaceVotingEpochDurationSeconds =
  /*#__PURE__*/ createUseReadContract({
    abi: protocolsV2InterfaceAbi,
    functionName: 'votingEpochDurationSeconds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link randomNumberV2InterfaceAbi}__
 */
export const useReadRandomNumberV2Interface =
  /*#__PURE__*/ createUseReadContract({ abi: randomNumberV2InterfaceAbi })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link randomNumberV2InterfaceAbi}__ and `functionName` set to `"getRandomNumber"`
 */
export const useReadRandomNumberV2InterfaceGetRandomNumber =
  /*#__PURE__*/ createUseReadContract({
    abi: randomNumberV2InterfaceAbi,
    functionName: 'getRandomNumber',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link randomNumberV2InterfaceAbi}__ and `functionName` set to `"getRandomNumberHistorical"`
 */
export const useReadRandomNumberV2InterfaceGetRandomNumberHistorical =
  /*#__PURE__*/ createUseReadContract({
    abi: randomNumberV2InterfaceAbi,
    functionName: 'getRandomNumberHistorical',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__
 */
export const useReadRewardsV2Interface = /*#__PURE__*/ createUseReadContract({
  abi: rewardsV2InterfaceAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"active"`
 */
export const useReadRewardsV2InterfaceActive =
  /*#__PURE__*/ createUseReadContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'active',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"getNextClaimableRewardEpochId"`
 */
export const useReadRewardsV2InterfaceGetNextClaimableRewardEpochId =
  /*#__PURE__*/ createUseReadContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'getNextClaimableRewardEpochId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"getRewardEpochIdsWithClaimableRewards"`
 */
export const useReadRewardsV2InterfaceGetRewardEpochIdsWithClaimableRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'getRewardEpochIdsWithClaimableRewards',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"getStateOfRewards"`
 */
export const useReadRewardsV2InterfaceGetStateOfRewards =
  /*#__PURE__*/ createUseReadContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'getStateOfRewards',
  })

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__
 */
export const useWriteRewardsV2Interface = /*#__PURE__*/ createUseWriteContract({
  abi: rewardsV2InterfaceAbi,
})

/**
 * Wraps __{@link useWriteContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"claim"`
 */
export const useWriteRewardsV2InterfaceClaim =
  /*#__PURE__*/ createUseWriteContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__
 */
export const useSimulateRewardsV2Interface =
  /*#__PURE__*/ createUseSimulateContract({ abi: rewardsV2InterfaceAbi })

/**
 * Wraps __{@link useSimulateContract}__ with `abi` set to __{@link rewardsV2InterfaceAbi}__ and `functionName` set to `"claim"`
 */
export const useSimulateRewardsV2InterfaceClaim =
  /*#__PURE__*/ createUseSimulateContract({
    abi: rewardsV2InterfaceAbi,
    functionName: 'claim',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__
 */
export const useReadTestFtsoV2Interface = /*#__PURE__*/ createUseReadContract({
  abi: testFtsoV2InterfaceAbi,
})

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"calculateFeeById"`
 */
export const useReadTestFtsoV2InterfaceCalculateFeeById =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'calculateFeeById',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"calculateFeeByIds"`
 */
export const useReadTestFtsoV2InterfaceCalculateFeeByIds =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'calculateFeeByIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFeedById"`
 */
export const useReadTestFtsoV2InterfaceGetFeedById =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFeedById',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFeedByIdInWei"`
 */
export const useReadTestFtsoV2InterfaceGetFeedByIdInWei =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFeedByIdInWei',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFeedIdChanges"`
 */
export const useReadTestFtsoV2InterfaceGetFeedIdChanges =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFeedIdChanges',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsById"`
 */
export const useReadTestFtsoV2InterfaceGetFeedsById =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFeedsById',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFeedsByIdInWei"`
 */
export const useReadTestFtsoV2InterfaceGetFeedsByIdInWei =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFeedsByIdInWei',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getFtsoProtocolId"`
 */
export const useReadTestFtsoV2InterfaceGetFtsoProtocolId =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getFtsoProtocolId',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"getSupportedFeedIds"`
 */
export const useReadTestFtsoV2InterfaceGetSupportedFeedIds =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'getSupportedFeedIds',
  })

/**
 * Wraps __{@link useReadContract}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `functionName` set to `"verifyFeedData"`
 */
export const useReadTestFtsoV2InterfaceVerifyFeedData =
  /*#__PURE__*/ createUseReadContract({
    abi: testFtsoV2InterfaceAbi,
    functionName: 'verifyFeedData',
  })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__
 */
export const useWatchTestFtsoV2InterfaceEvent =
  /*#__PURE__*/ createUseWatchContractEvent({ abi: testFtsoV2InterfaceAbi })

/**
 * Wraps __{@link useWatchContractEvent}__ with `abi` set to __{@link testFtsoV2InterfaceAbi}__ and `eventName` set to `"FeedIdChanged"`
 */
export const useWatchTestFtsoV2InterfaceFeedIdChangedEvent =
  /*#__PURE__*/ createUseWatchContractEvent({
    abi: testFtsoV2InterfaceAbi,
    eventName: 'FeedIdChanged',
  })
